// generated by Fast Light User Interface Designer (fluid) version 1.0300

#ifndef MicrotonalUI_h
#define MicrotonalUI_h
#include <FL/Fl.H>
#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include <FL/Fl_File_Chooser.H>
#include <FL/fl_ask.H>
#include "Fl_Osc_Pane.H"
#include "Fl_Osc_Value.H"
#include "Fl_Osc_Check.H"
#include "Fl_Osc_Counter.H"
#include "Fl_Osc_Input.H"
#include "Fl_Osc_Output.H"
#include "../Misc/Microtonal.h"
#include <FL/Fl_Box.H>
#include <FL/Fl_Group.H>
#include <FL/Fl_Button.H>

class MicrotonalUI {
public:
  Fl_Osc_Window* make_window(Fl_Osc_Interface *osc, std::string base);
  Fl_Osc_Window *microtonaluiwindow;
private:
  void cb_Invert_i(Fl_Osc_Check*, void*);
  static void cb_Invert(Fl_Osc_Check*, void*);
public:
  Fl_Osc_Counter *centerinvertcounter;
  Fl_Group *microtonalgroup;
  Fl_Button *applybutton;
private:
  void cb_applybutton_i(Fl_Button*, void*);
  static void cb_applybutton(Fl_Button*, void*);
public:
  Fl_Osc_Output *octavesizeoutput;
  Fl_Osc_Input *nameinput;
  Fl_Osc_Input *tuningsinput;
  Fl_Osc_Input *commentinput;
private:
  void cb_Import_i(Fl_Button*, void*);
  static void cb_Import(Fl_Button*, void*);
public:
  Fl_Group *keymappinggroup;
  Fl_Osc_Input *mappinginput;
  Fl_Osc_Counter *firstnotecounter;
  Fl_Osc_Counter *lastnotecounter;
  Fl_Osc_Counter *middlenotecounter;
  Fl_Osc_Output *mapsizeoutput;
  Fl_Osc_Check *mappingenabledbutton;
private:
  void cb_mappingenabledbutton_i(Fl_Osc_Check*, void*);
  static void cb_mappingenabledbutton(Fl_Osc_Check*, void*);
  void cb_Import1_i(Fl_Button*, void*);
  static void cb_Import1(Fl_Button*, void*);
public:
  Fl_Osc_Counter *anotecounter;
private:
  void cb_anotecounter_i(Fl_Osc_Counter*, void*);
  static void cb_anotecounter(Fl_Osc_Counter*, void*);
public:
  Fl_Osc_Value *afreqinput;
private:
  void cb_Close_i(Fl_Button*, void*);
  static void cb_Close(Fl_Button*, void*);
  void cb_Enable_i(Fl_Osc_Check*, void*);
  static void cb_Enable(Fl_Osc_Check*, void*);
public:
  void updateTuningsInput();
  void updateMappingInput();
  MicrotonalUI(Fl_Osc_Interface *osc_, std::string base);
  ~MicrotonalUI();
  void show();
  void apply();
private:
  Fl_Osc_Interface *osc; 
};
#endif
