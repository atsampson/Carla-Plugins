// generated by Fast Light User Interface Designer (fluid) version 1.0300

#ifndef FilterUI_h
#define FilterUI_h
#include <FL/Fl.H>
#include "Fl_Osc_Dial.H"
#include "Fl_Osc_Choice.H"
#include "Fl_Osc_Check.H"
#include "Fl_Osc_Counter.H"
#include "Fl_Osc_Output.H"
#include "Fl_Osc_Slider.H"
#include "Fl_Osc_Pane.H"
#include "../globals.h"
#include "../Misc/Util.h"
#include <FL/Fl_Group.H>
#include "../Params/FilterParams.h"
#include <FL/Fl_Box.H>
#include <FL/fl_draw.H>
#include <FL/fl_ask.H>
#include "PresetsUI.h"
#include "common.H"
#include "FormantFilterGraph.H"
using namespace zyncarla;
#include <FL/Fl_Button.H>
#include <FL/Fl_Group.H>
#include <FL/Fl_Counter.H>
#include <FL/Fl_Box.H>

class FilterUI : public Fl_Osc_Group,PresetsUI_ {
public:
  FilterUI(int x,int y, int w, int h, const char *label=0);
  ~FilterUI();
  Fl_Osc_Group* make_window();
  Fl_Osc_Group *filterui;
private:
  void cb_P_i(Fl_Button*, void*);
  static void cb_P(Fl_Button*, void*);
public:
  Fl_Group *filterparamswindow;
  Fl_Osc_Choice *analogfiltertypechoice;
  static Fl_Menu_Item menu_analogfiltertypechoice[];
  Fl_Osc_Choice *svfiltertypechoice;
  static Fl_Menu_Item menu_svfiltertypechoice[];
  Fl_Osc_Choice *filtertype;
private:
  void cb_filtertype_i(Fl_Osc_Choice*, void*);
  static void cb_filtertype(Fl_Osc_Choice*, void*);
  static Fl_Menu_Item menu_filtertype[];
public:
  Fl_Osc_Dial *cfreqdial;
  Fl_Osc_Dial *qdial;
private:
  void cb_qdial_i(Fl_Osc_Dial*, void*);
  static void cb_qdial(Fl_Osc_Dial*, void*);
public:
  Fl_Osc_Dial *freqtrdial;
  Fl_Osc_Dial *vsnsadial;
  Fl_Osc_Dial *vsnsdial;
  Fl_Osc_Dial *gaindial;
private:
  void cb_gaindial_i(Fl_Osc_Dial*, void*);
  static void cb_gaindial(Fl_Osc_Dial*, void*);
public:
  Fl_Osc_Choice *stcounter;
private:
  void cb_stcounter_i(Fl_Osc_Choice*, void*);
  static void cb_stcounter(Fl_Osc_Choice*, void*);
public:
  Fl_Button *editbutton;
private:
  void cb_editbutton_i(Fl_Button*, void*);
  static void cb_editbutton(Fl_Button*, void*);
  void cb_C_i(Fl_Button*, void*);
  static void cb_C(Fl_Button*, void*);
  void cb_P1_i(Fl_Button*, void*);
  static void cb_P1(Fl_Button*, void*);
public:
  Fl_Osc_Window* make_formant_window();
  Fl_Osc_Window *formantparswindow;
private:
  void cb_P2_i(Fl_Button*, void*);
  static void cb_P2(Fl_Button*, void*);
  void cb_Formant_i(Fl_Counter*, void*);
  static void cb_Formant(Fl_Counter*, void*);
  void cb_Vowel_i(Fl_Counter*, void*);
  static void cb_Vowel(Fl_Counter*, void*);
public:
  Fl_Osc_Group *formantparsgroup;
  Fl_Osc_Dial *formant_freq_dial;
private:
  void cb_formant_freq_dial_i(Fl_Osc_Dial*, void*);
  static void cb_formant_freq_dial(Fl_Osc_Dial*, void*);
public:
  Fl_Osc_Dial *formant_q_dial;
private:
  void cb_formant_q_dial_i(Fl_Osc_Dial*, void*);
  static void cb_formant_q_dial(Fl_Osc_Dial*, void*);
public:
  Fl_Osc_Dial *formant_amp_dial;
private:
  void cb_formant_amp_dial_i(Fl_Osc_Dial*, void*);
  static void cb_formant_amp_dial(Fl_Osc_Dial*, void*);
public:
  Fl_Osc_Counter *sequencesize;
private:
  void cb_sequencesize_i(Fl_Osc_Counter*, void*);
  static void cb_sequencesize(Fl_Osc_Counter*, void*);
  void cb_S_i(Fl_Counter*, void*);
  static void cb_S(Fl_Counter*, void*);
public:
  Fl_Osc_Counter *vowel_counter;
private:
  void cb_vowel_counter_i(Fl_Osc_Counter*, void*);
  static void cb_vowel_counter(Fl_Osc_Counter*, void*);
public:
  Fl_Osc_Dial *strchdial;
  Fl_Osc_Counter *numformants;
private:
  void cb_numformants_i(Fl_Osc_Counter*, void*);
  static void cb_numformants(Fl_Osc_Counter*, void*);
public:
  Fl_Osc_Dial *frsldial;
  Fl_Osc_Output *centerfreqvo;
private:
  void cb_centerfreqvo_i(Fl_Osc_Output*, void*);
  static void cb_centerfreqvo(Fl_Osc_Output*, void*);
public:
  Fl_Osc_Output *octavesfreqvo;
private:
  void cb_octavesfreqvo_i(Fl_Osc_Output*, void*);
  static void cb_octavesfreqvo(Fl_Osc_Output*, void*);
public:
  Fl_Osc_Slider *cfknob;
private:
  void cb_cfknob_i(Fl_Osc_Slider*, void*);
  static void cb_cfknob(Fl_Osc_Slider*, void*);
public:
  Fl_Osc_Slider *octknob;
private:
  void cb_octknob_i(Fl_Osc_Slider*, void*);
  static void cb_octknob(Fl_Osc_Slider*, void*);
public:
  FormantFilterGraph *formantfiltergraph;
  Fl_Osc_Dial *wvknob;
private:
  void cb_Close_i(Fl_Button*, void*);
  static void cb_Close(Fl_Button*, void*);
  void cb_C1_i(Fl_Button*, void*);
  static void cb_C1(Fl_Button*, void*);
public:
  void update_formant_window();
  void refresh();
  void rebase(std::string new_base);
  void init(std::string alt_root_, Fl_Osc_Interface *osc_, std::string base_, std::string ext_);
  void switchcategory(int newcat);
  void use_for_dynamic_filter();
private:
  std::string alt_root; 
  int nvowel,nformant,nseqpos; 
};
#endif
