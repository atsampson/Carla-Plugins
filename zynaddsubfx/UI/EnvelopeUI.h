// generated by Fast Light User Interface Designer (fluid) version 1.0300

#ifndef EnvelopeUI_h
#define EnvelopeUI_h
#include <FL/Fl.H>
#include "Fl_Osc_Dial.H"
#include "Fl_Osc_Check.H"
#include "Fl_Osc_Button.H"
#include "Fl_Osc_Counter.H"
#include "Fl_Osc_Pane.H"
#include <stdio.h>
#include <stdlib.h>
#include "../globals.h"
#include <FL/Fl_Group.H>
#include "../Params/EnvelopeParams.h"
#include <FL/Fl_Box.H>
#include <FL/fl_draw.H>
#include <FL/fl_ask.H>
#include "PresetsUI.h"
#include "common.H"
#include "EnvelopeFreeEdit.h"

class PointButton : public Fl_Button, public Fl_Osc_Widget {
public:
  PointButton(int x,int y, int w, int h, const char *label=0);
  void rebase(std::string new_base);
  void init(std::string path_);
};
#include <FL/Fl_Button.H>
#include <FL/Fl_Group.H>

class EnvelopeUI : public Fl_Osc_Group,PresetsUI_ {
public:
  EnvelopeUI(int x,int y, int w, int h, const char *label=0);
  ~EnvelopeUI();
  Fl_Osc_Window* make_freemode_edit_window();
  Fl_Osc_Window *freemodeeditwindow;
private:
  void cb_C_i(Fl_Button*, void*);
  static void cb_C(Fl_Button*, void*);
  void cb_P_i(Fl_Button*, void*);
  static void cb_P(Fl_Button*, void*);
public:
  PointButton *addpoint;
private:
  void cb_addpoint_i(PointButton*, void*);
  static void cb_addpoint(PointButton*, void*);
public:
  EnvelopeFreeEdit *freeedit;
private:
  void cb_freeedit_i(EnvelopeFreeEdit*, void*);
  static void cb_freeedit(EnvelopeFreeEdit*, void*);
public:
  PointButton *deletepoint;
private:
  void cb_deletepoint_i(PointButton*, void*);
  static void cb_deletepoint(PointButton*, void*);
public:
  Fl_Osc_Check *forcedreleasecheck;
  Fl_Osc_Dial *envstretchdial;
private:
  void cb_Close_i(Fl_Button*, void*);
  static void cb_Close(Fl_Button*, void*);
public:
  Fl_Osc_Check *linearenvelopecheck;
  Fl_Osc_Counter *sustaincounter;
private:
  void cb_sustaincounter_i(Fl_Osc_Counter*, void*);
  static void cb_sustaincounter(Fl_Osc_Counter*, void*);
public:
  Fl_Osc_Check *freemodehack;
private:
  void cb_freemodehack_i(Fl_Osc_Check*, void*);
  static void cb_freemodehack(Fl_Osc_Check*, void*);
  void cb_Cancel_i(Fl_Osc_Button*, void*);
  static void cb_Cancel(Fl_Osc_Button*, void*);
public:
  Fl_Osc_Group* make_ADSR_window();
  Fl_Osc_Group *envADSR;
private:
  void cb_C1_i(Fl_Button*, void*);
  static void cb_C1(Fl_Button*, void*);
  void cb_P1_i(Fl_Button*, void*);
  static void cb_P1(Fl_Button*, void*);
public:
  Fl_Osc_Dial *e1adt;
private:
  void cb_e1adt_i(Fl_Osc_Dial*, void*);
  static void cb_e1adt(Fl_Osc_Dial*, void*);
public:
  Fl_Osc_Dial *e1ddt;
private:
  void cb_e1ddt_i(Fl_Osc_Dial*, void*);
  static void cb_e1ddt(Fl_Osc_Dial*, void*);
public:
  Fl_Osc_Dial *e1rdt;
private:
  void cb_e1rdt_i(Fl_Osc_Dial*, void*);
  static void cb_e1rdt(Fl_Osc_Dial*, void*);
public:
  Fl_Osc_Dial *e1sval;
private:
  void cb_e1sval_i(Fl_Osc_Dial*, void*);
  static void cb_e1sval(Fl_Osc_Dial*, void*);
public:
  Fl_Osc_Check *e1forcedrelease;
  Fl_Osc_Dial *e1envstretch;
private:
  void cb_E_i(Fl_Osc_Button*, void*);
  static void cb_E(Fl_Osc_Button*, void*);
public:
  Fl_Osc_Check *e1linearenvelope;
  Fl_Osc_Group* make_ASR_window();
  Fl_Osc_Group *envASR;
private:
  void cb_C2_i(Fl_Button*, void*);
  static void cb_C2(Fl_Button*, void*);
  void cb_P2_i(Fl_Button*, void*);
  static void cb_P2(Fl_Button*, void*);
public:
  Fl_Osc_Dial *e2aval;
private:
  void cb_e2aval_i(Fl_Osc_Dial*, void*);
  static void cb_e2aval(Fl_Osc_Dial*, void*);
public:
  Fl_Osc_Dial *e2adt;
private:
  void cb_e2adt_i(Fl_Osc_Dial*, void*);
  static void cb_e2adt(Fl_Osc_Dial*, void*);
public:
  Fl_Osc_Dial *e2rval;
private:
  void cb_e2rval_i(Fl_Osc_Dial*, void*);
  static void cb_e2rval(Fl_Osc_Dial*, void*);
public:
  Fl_Osc_Dial *e2rdt;
private:
  void cb_e2rdt_i(Fl_Osc_Dial*, void*);
  static void cb_e2rdt(Fl_Osc_Dial*, void*);
public:
  Fl_Osc_Dial *e2envstretch;
  Fl_Osc_Check *e2forcedrelease;
private:
  void cb_E1_i(Fl_Osc_Button*, void*);
  static void cb_E1(Fl_Osc_Button*, void*);
public:
  Fl_Osc_Group* make_ADSRfilter_window();
  Fl_Osc_Group *envADSRfilter;
private:
  void cb_C3_i(Fl_Button*, void*);
  static void cb_C3(Fl_Button*, void*);
  void cb_P3_i(Fl_Button*, void*);
  static void cb_P3(Fl_Button*, void*);
public:
  Fl_Osc_Dial *e3aval;
private:
  void cb_e3aval_i(Fl_Osc_Dial*, void*);
  static void cb_e3aval(Fl_Osc_Dial*, void*);
public:
  Fl_Osc_Dial *e3adt;
private:
  void cb_e3adt_i(Fl_Osc_Dial*, void*);
  static void cb_e3adt(Fl_Osc_Dial*, void*);
public:
  Fl_Osc_Dial *e3dval;
private:
  void cb_e3dval_i(Fl_Osc_Dial*, void*);
  static void cb_e3dval(Fl_Osc_Dial*, void*);
public:
  Fl_Osc_Dial *e3ddt;
private:
  void cb_e3ddt_i(Fl_Osc_Dial*, void*);
  static void cb_e3ddt(Fl_Osc_Dial*, void*);
public:
  Fl_Osc_Dial *e3rdt;
private:
  void cb_e3rdt_i(Fl_Osc_Dial*, void*);
  static void cb_e3rdt(Fl_Osc_Dial*, void*);
public:
  Fl_Osc_Dial *e3rval;
private:
  void cb_e3rval_i(Fl_Osc_Dial*, void*);
  static void cb_e3rval(Fl_Osc_Dial*, void*);
public:
  Fl_Osc_Dial *e3envstretch;
  Fl_Osc_Check *e3forcedrelease;
private:
  void cb_E2_i(Fl_Osc_Button*, void*);
  static void cb_E2(Fl_Osc_Button*, void*);
public:
  Fl_Osc_Group* make_ASRbw_window();
  Fl_Osc_Group *envASRbw;
private:
  void cb_C4_i(Fl_Button*, void*);
  static void cb_C4(Fl_Button*, void*);
  void cb_P4_i(Fl_Button*, void*);
  static void cb_P4(Fl_Button*, void*);
public:
  Fl_Osc_Dial *e4aval;
private:
  void cb_e4aval_i(Fl_Osc_Dial*, void*);
  static void cb_e4aval(Fl_Osc_Dial*, void*);
public:
  Fl_Osc_Dial *e4adt;
private:
  void cb_e4adt_i(Fl_Osc_Dial*, void*);
  static void cb_e4adt(Fl_Osc_Dial*, void*);
public:
  Fl_Osc_Dial *e4rval;
private:
  void cb_e4rval_i(Fl_Osc_Dial*, void*);
  static void cb_e4rval(Fl_Osc_Dial*, void*);
public:
  Fl_Osc_Dial *e4rdt;
private:
  void cb_e4rdt_i(Fl_Osc_Dial*, void*);
  static void cb_e4rdt(Fl_Osc_Dial*, void*);
public:
  Fl_Osc_Dial *e4envstretch;
  Fl_Osc_Check *e4forcedrelease;
private:
  void cb_E3_i(Fl_Osc_Button*, void*);
  static void cb_E3(Fl_Osc_Button*, void*);
public:
  Fl_Osc_Group* make_free_window();
  Fl_Osc_Group *envfree;
  Fl_Group *envfreegroup;
private:
  void cb_E4_i(Fl_Osc_Button*, void*);
  static void cb_E4(Fl_Osc_Button*, void*);
public:
  EnvelopeFreeEdit *freeeditsmall;
private:
  void cb_freeeditsmall_i(EnvelopeFreeEdit*, void*);
  static void cb_freeeditsmall(EnvelopeFreeEdit*, void*);
  void cb_C5_i(Fl_Button*, void*);
  static void cb_C5(Fl_Button*, void*);
  void cb_P5_i(Fl_Button*, void*);
  static void cb_P5(Fl_Button*, void*);
public:
  void open_as_freemode();
  void init(int env_type, Fl_Osc_Interface *osc_, std::string base_, std::string ext_);
  void rebase(std::string new_base);
  void disable_freemode();
  void refresh();
  void refresh_display();
private:
  int Envmode; 
  int Penvsustain; 
  int Penvpoints; 
  int Penvstretch; 
  int Pforcedrelease; 
  int Plinearenvelope; 
  Fl_Group *envwindow; 
};
#endif
