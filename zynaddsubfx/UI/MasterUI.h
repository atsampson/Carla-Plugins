// generated by Fast Light User Interface Designer (fluid) version 1.0300

#ifndef MasterUI_h
#define MasterUI_h
#include <FL/Fl.H>
#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include "WidgetPDial.h"
#include "ADnoteUI.h"
#include "SUBnoteUI.h"
#include "EffUI.h"
#include "VirKeyboard.h"
#include "ConfigUI.h"
#include "BankUI.h"
#include "PartUI.h"
#include "MicrotonalUI.h"
#include "PresetsUI.h"
#include "NioUI.h"
#include "VuPartMeter.h"
#include "VuMasterMeter.h"
#include "PartNameButton.h"
#include "common.H"
#if USE_NSM
#include "NSM.H"
extern NSM_Client *nsm;
#endif
#if !defined(PLUGINVERSION) && HAS_X11
#include <X11/xpm.h>
#endif
#include "../globals.h"

class SysEffSend : public Fl_Osc_Dial {
public:
  SysEffSend(int x,int y, int w, int h, const char *label=0);
  void init(int neff1,int neff2);
  ~SysEffSend();
};
#include <FL/Fl_Group.H>
#include <FL/Fl_Button.H>

class Panellistitem : public Fl_Osc_Group {
  Fl_Group* make_window();
  Fl_Group *panellistitem;
  Fl_Group *panellistitemgroup;
public:
  VuPartMeter *partvu;
  PartNameButton *partname;
private:
  void cb_partname_i(PartNameButton*, void*);
  static void cb_partname(PartNameButton*, void*);
public:
  Fl_Osc_TSlider *partvolume;
  Fl_Osc_Dial *partpanning;
private:
  void cb_edit_i(Fl_Button*, void*);
  static void cb_edit(Fl_Button*, void*);
public:
  Fl_Osc_Choice *partrcv;
private:
  Fl_Osc_Check *partenabled;
  void cb_partenabled_i(Fl_Osc_Check*, void*);
  static void cb_partenabled(Fl_Osc_Check*, void*);
public:
  Panellistitem(int x,int y, int w, int h, const char *label=0);
  void init(int npart_,BankUI *bankui_, PartUI *partui_);
  void refresh();
  ~Panellistitem();
private:
  int npart; 
  BankUI *bankui; 
  PartUI *partui; 
};
#include <FL/Fl_Box.H>
#include <FL/Fl_Menu_Bar.H>
#include <FL/Fl_Tabs.H>
#include <FL/Fl_Counter.H>
#include <FL/Fl_Double_Window.H>
#include <FL/Fl_Scroll.H>
#include <FL/Fl_Pack.H>
#include <FL/Fl_Choice.H>

class MasterUI {
public:
  Fl_Osc_Window* make_window();
  Fl_Osc_Window *masterwindow;
private:
  void cb_masterwindow_i(Fl_Osc_Window*, void*);
  static void cb_masterwindow(Fl_Osc_Window*, void*);
public:
  Fl_Box *dummy_again;
  Fl_Osc_Group *win_root;
  Fl_Menu_Bar *mastermenu;
  static Fl_Menu_Item menu_mastermenu[];
private:
  void cb_New_i(Fl_Menu_*, void*);
  static void cb_New(Fl_Menu_*, void*);
  void cb_Revert_i(Fl_Menu_*, void*);
  static void cb_Revert(Fl_Menu_*, void*);
  void cb_Open_i(Fl_Menu_*, void*);
  static void cb_Open(Fl_Menu_*, void*);
  void cb_Save_i(Fl_Menu_*, void*);
  static void cb_Save(Fl_Menu_*, void*);
  void cb_Load_i(Fl_Menu_*, void*);
  static void cb_Load(Fl_Menu_*, void*);
  void cb_Clear_i(Fl_Menu_*, void*);
  static void cb_Clear(Fl_Menu_*, void*);
  void cb_Save1_i(Fl_Menu_*, void*);
  static void cb_Save1(Fl_Menu_*, void*);
  void cb_Load1_i(Fl_Menu_*, void*);
  static void cb_Load1(Fl_Menu_*, void*);
  void cb_Save2_i(Fl_Menu_*, void*);
  static void cb_Save2(Fl_Menu_*, void*);
  void cb_Show_i(Fl_Menu_*, void*);
  static void cb_Show(Fl_Menu_*, void*);
  void cb_Settings_i(Fl_Menu_*, void*);
  static void cb_Settings(Fl_Menu_*, void*);
  void cb_N_i(Fl_Menu_*, void*);
  static void cb_N(Fl_Menu_*, void*);
  void cb_Copyright_i(Fl_Menu_*, void*);
  static void cb_Copyright(Fl_Menu_*, void*);
  void cb_E_i(Fl_Menu_*, void*);
  static void cb_E(Fl_Menu_*, void*);
  void cb_Clear1_i(Fl_Menu_*, void*);
  static void cb_Clear1(Fl_Menu_*, void*);
  void cb_Open1_i(Fl_Menu_*, void*);
  static void cb_Open1(Fl_Menu_*, void*);
  void cb_Save3_i(Fl_Menu_*, void*);
  static void cb_Save3(Fl_Menu_*, void*);
  void cb_Show1_i(Fl_Menu_*, void*);
  static void cb_Show1(Fl_Menu_*, void*);
  void cb_Virtual_i(Fl_Menu_*, void*);
  static void cb_Virtual(Fl_Menu_*, void*);
public:
  static Fl_Menu_Item *recordmenu;
private:
  void cb_Choose_i(Fl_Menu_*, void*);
  static void cb_Choose(Fl_Menu_*, void*);
  void cb_Switch_i(Fl_Menu_*, void*);
  static void cb_Switch(Fl_Menu_*, void*);
public:
  Fl_Box *dummy;
  Fl_Osc_Dial *mastervolumedial;
  Fl_Osc_Counter *masterkeyshiftcounter;
private:
  void cb_Panic_i(Fl_Osc_Button*, void*);
  static void cb_Panic(Fl_Osc_Button*, void*);
public:
  Fl_Group *partuigroup;
  PartUI *partui;
  Fl_Counter *syseffnocounter;
private:
  void cb_syseffnocounter_i(Fl_Counter*, void*);
  static void cb_syseffnocounter(Fl_Counter*, void*);
public:
  Fl_Osc_Choice *sysefftype;
private:
  void cb_sysefftype_i(Fl_Osc_Choice*, void*);
  static void cb_sysefftype(Fl_Osc_Choice*, void*);
  static Fl_Menu_Item menu_sysefftype[];
public:
  Fl_Osc_Group *syseffectuigroup;
  EffUI *syseffectui;
private:
  void cb_Send_i(Fl_Button*, void*);
  static void cb_Send(Fl_Button*, void*);
  void cb_C_i(Fl_Button*, void*);
  static void cb_C(Fl_Button*, void*);
  void cb_P_i(Fl_Button*, void*);
  static void cb_P(Fl_Button*, void*);
public:
  Fl_Counter *inseffnocounter;
private:
  void cb_inseffnocounter_i(Fl_Counter*, void*);
  static void cb_inseffnocounter(Fl_Counter*, void*);
public:
  Fl_Osc_Choice *insefftype;
private:
  void cb_insefftype_i(Fl_Osc_Choice*, void*);
  static void cb_insefftype(Fl_Osc_Choice*, void*);
  static Fl_Menu_Item menu_insefftype[];
public:
  Fl_Osc_Group *inseffectuigroup;
  EffUI *inseffectui;
  Fl_Osc_Choice *inseffpart;
private:
  void cb_inseffpart_i(Fl_Osc_Choice*, void*);
  static void cb_inseffpart(Fl_Osc_Choice*, void*);
  void cb_C1_i(Fl_Button*, void*);
  static void cb_C1(Fl_Button*, void*);
  void cb_P1_i(Fl_Button*, void*);
  static void cb_P1(Fl_Button*, void*);
  void cb_Scales_i(Fl_Button*, void*);
  static void cb_Scales(Fl_Button*, void*);
public:
  Fl_Osc_Button *recordbutton;
private:
  void cb_recordbutton_i(Fl_Osc_Button*, void*);
  static void cb_recordbutton(Fl_Osc_Button*, void*);
public:
  Fl_Osc_Button *stopbutton;
private:
  void cb_stopbutton_i(Fl_Osc_Button*, void*);
  static void cb_stopbutton(Fl_Osc_Button*, void*);
public:
  Fl_Osc_Button *pausebutton;
private:
  void cb_pausebutton_i(Fl_Osc_Button*, void*);
  static void cb_pausebutton(Fl_Osc_Button*, void*);
public:
  Fl_Box *pauselabel;
  VuMasterMeter *mastervu;
  Fl_Osc_Check *nrpnbutton;
  Fl_Counter *npartcounter;
private:
  void cb_npartcounter_i(Fl_Counter*, void*);
  static void cb_npartcounter(Fl_Counter*, void*);
  void cb_vK_i(Fl_Button*, void*);
  static void cb_vK(Fl_Button*, void*);
  void cb_Reset_i(Fl_Button*, void*);
  static void cb_Reset(Fl_Button*, void*);
public:
  Fl_Osc_Dial *globalfinedetuneslider;
private:
  void cb_Panel_i(Fl_Button*, void*);
  static void cb_Panel(Fl_Button*, void*);
public:
  Fl_Button *sm_indicator1;
  Fl_Double_Window *aboutwindow;
private:
  void cb_Close_i(Fl_Button*, void*);
  static void cb_Close(Fl_Button*, void*);
public:
  Fl_Osc_Window *syseffsendwindow;
  Fl_Scroll *syseffscroll;
private:
  void cb_Close1_i(Fl_Button*, void*);
  static void cb_Close1(Fl_Button*, void*);
public:
  Fl_Osc_Window *panelwindow;
private:
  void cb_Close2_i(Fl_Button*, void*);
  static void cb_Close2(Fl_Button*, void*);
  void cb_Refresh_i(Fl_Button*, void*);
  static void cb_Refresh(Fl_Button*, void*);
public:
  Fl_Osc_Window *simplemasterwindow;
private:
  void cb_simplemasterwindow_i(Fl_Osc_Window*, void*);
  static void cb_simplemasterwindow(Fl_Osc_Window*, void*);
public:
  Fl_Menu_Bar *simplemastermenu;
  static Fl_Menu_Item menu_simplemastermenu[];
private:
  void cb_New1_i(Fl_Menu_*, void*);
  static void cb_New1(Fl_Menu_*, void*);
  void cb_Revert1_i(Fl_Menu_*, void*);
  static void cb_Revert1(Fl_Menu_*, void*);
  void cb_Open2_i(Fl_Menu_*, void*);
  static void cb_Open2(Fl_Menu_*, void*);
  void cb_Save4_i(Fl_Menu_*, void*);
  static void cb_Save4(Fl_Menu_*, void*);
  void cb_Settings1_i(Fl_Menu_*, void*);
  static void cb_Settings1(Fl_Menu_*, void*);
  void cb_Copyright1_i(Fl_Menu_*, void*);
  static void cb_Copyright1(Fl_Menu_*, void*);
  void cb_E1_i(Fl_Menu_*, void*);
  static void cb_E1(Fl_Menu_*, void*);
  void cb_Open3_i(Fl_Menu_*, void*);
  static void cb_Open3(Fl_Menu_*, void*);
  void cb_Show2_i(Fl_Menu_*, void*);
  static void cb_Show2(Fl_Menu_*, void*);
  void cb_Switch1_i(Fl_Menu_*, void*);
  static void cb_Switch1(Fl_Menu_*, void*);
  Fl_Osc_Group *simplelistitemgroup;
public:
  PartNameButton *partname;
private:
  void cb_partname1_i(PartNameButton*, void*);
  static void cb_partname1(PartNameButton*, void*);
public:
  Fl_Osc_TSlider *partpanning;
  Fl_Osc_Choice *partrcv;
private:
  void cb_partrcv_i(Fl_Osc_Choice*, void*);
  static void cb_partrcv(Fl_Osc_Choice*, void*);
public:
  Fl_Osc_Dial *partvolume;
  Fl_Osc_Check *simplepartportamento;
  Fl_Osc_Counter *simpleminkcounter;
private:
  void cb_simpleminkcounter_i(Fl_Osc_Counter*, void*);
  static void cb_simpleminkcounter(Fl_Osc_Counter*, void*);
public:
  Fl_Osc_Counter *simplemaxkcounter;
private:
  void cb_simplemaxkcounter_i(Fl_Osc_Counter*, void*);
  static void cb_simplemaxkcounter(Fl_Osc_Counter*, void*);
  void cb_m_i(Fl_Osc_Button*, void*);
  static void cb_m(Fl_Osc_Button*, void*);
  void cb_M_i(Fl_Osc_Button*, void*);
  static void cb_M(Fl_Osc_Button*, void*);
  void cb_R_i(Fl_Button*, void*);
  static void cb_R(Fl_Button*, void*);
public:
  Fl_Osc_Counter *simplepartkeyshiftcounter;
  Fl_Osc_Dial *simplesyseffsend;
private:
  Fl_Osc_Check *partenabled;
  void cb_partenabled1_i(Fl_Osc_Check*, void*);
  static void cb_partenabled1(Fl_Osc_Check*, void*);
public:
  VirKeys *virkeys;
  Fl_Counter *simplesyseffnocounter;
private:
  void cb_simplesyseffnocounter_i(Fl_Counter*, void*);
  static void cb_simplesyseffnocounter(Fl_Counter*, void*);
public:
  Fl_Osc_Choice *simplesysefftype;
private:
  void cb_simplesysefftype_i(Fl_Osc_Choice*, void*);
  static void cb_simplesysefftype(Fl_Osc_Choice*, void*);
  static Fl_Menu_Item menu_simplesysefftype[];
public:
  Fl_Osc_Group *simplesyseffectuigroup;
  SimpleEffUI *simplesyseffectui;
private:
  void cb_Send1_i(Fl_Button*, void*);
  static void cb_Send1(Fl_Button*, void*);
  void cb_P2_i(Fl_Button*, void*);
  static void cb_P2(Fl_Button*, void*);
public:
  Fl_Counter *simpleinseffnocounter;
private:
  void cb_simpleinseffnocounter_i(Fl_Counter*, void*);
  static void cb_simpleinseffnocounter(Fl_Counter*, void*);
public:
  Fl_Osc_Choice *simpleinsefftype;
private:
  void cb_simpleinsefftype_i(Fl_Osc_Choice*, void*);
  static void cb_simpleinsefftype(Fl_Osc_Choice*, void*);
  static Fl_Menu_Item menu_simpleinsefftype[];
public:
  Fl_Osc_Group *simpleinseffectuigroup;
  SimpleEffUI *simpleinseffectui;
  Fl_Choice *simpleinseffpart;
private:
  void cb_simpleinseffpart_i(Fl_Choice*, void*);
  static void cb_simpleinseffpart(Fl_Choice*, void*);
  void cb_P3_i(Fl_Button*, void*);
  static void cb_P3(Fl_Button*, void*);
public:
  VuMasterMeter *simplemastervu;
  Fl_Osc_Dial *simplemastervolumedial;
  Fl_Osc_Counter *simplemasterkeyshiftcounter;
private:
  void cb_Stop_i(Fl_Osc_Button*, void*);
  static void cb_Stop(Fl_Osc_Button*, void*);
  void cb_Reset1_i(Fl_Button*, void*);
  static void cb_Reset1(Fl_Button*, void*);
public:
  Fl_Osc_Dial *simpleglobalfinedetuneslider;
  Fl_Counter *simplenpartcounter;
private:
  void cb_simplenpartcounter_i(Fl_Counter*, void*);
  static void cb_simplenpartcounter(Fl_Counter*, void*);
  void cb_Keyb_i(Fl_Counter*, void*);
  static void cb_Keyb(Fl_Counter*, void*);
public:
  Fl_Button *sm_indicator2;
  Fl_Osc_Window *selectuiwindow;
private:
  void cb_selectuiwindow_i(Fl_Osc_Window*, void*);
  static void cb_selectuiwindow(Fl_Osc_Window*, void*);
  void cb_Advanced_i(Fl_Button*, void*);
  static void cb_Advanced(Fl_Button*, void*);
  void cb_Beginner_i(Fl_Button*, void*);
  static void cb_Beginner(Fl_Button*, void*);
public:
  void updatesendwindow();
  void updatepanel();
  void setfilelabel(const char *filename);
  MasterUI(int *exitprogram_, class Fl_Osc_Interface *osc_);
  ~MasterUI();
  void showUI(int UIMode);
  void simplerefresh();
  void do_new_master_unconditional();
  void do_new_master();
  int do_revert_changes_unconditional();
  void do_revert_changes();
  int do_load_master_unconditional(const char *filename, const char *display_name);
  void do_load_master(const char* file = NULL);
  void do_save_master(const char* file = NULL);
  void refresh_master_ui();
  class Osc_DataModel *last_xmz;
private:
  MicrotonalUI *microtonalui; 
  BankUI *bankui; 
  int ninseff,npart; 
  int nsyseff; 
  int *exitprogram; 
  Fl_Osc_Dial *syseffsend[NUM_SYS_EFX][NUM_SYS_EFX]; 
  VirKeyboard *virkeyboard; 
  ConfigUI *configui; 
  int swapefftype; 
  char masterwindowlabel[100]; 
public:
  Panellistitem *panellistitem[NUM_MIDI_PARTS]; 
private:
  NioUI nioui; 
public:
  class Fl_Osc_Interface *osc;
  char last_loaded[XMZ_PATH_MAX]; 
  char loading_next[XMZ_PATH_MAX]; 
  void close();
};
#endif
