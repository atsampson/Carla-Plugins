// generated by Fast Light User Interface Designer (fluid) version 1.0300

#include "external/zynaddsubfx/UI/EffUI.h"
//Copyright (c) 2002-2005 Nasca Octavian Paul
//License: GNU GPL version 2 or later

Fl_Menu_Item EffUI::menu_revp[] = {
 {"Cathedral 1", 0,  0, 0, 0, FL_NORMAL_LABEL, 1, 10, 0},
 {"Cathedral 2", 0,  0, 0, 0, FL_NORMAL_LABEL, 1, 10, 0},
 {"Cathedral 3", 0,  0, 0, 0, FL_NORMAL_LABEL, 1, 10, 0},
 {"Hall 1", 0,  0, 0, 0, FL_NORMAL_LABEL, 1, 10, 0},
 {"Hall 2", 0,  0, 0, 0, FL_NORMAL_LABEL, 1, 10, 0},
 {"Room 1", 0,  0, 0, 0, FL_NORMAL_LABEL, 1, 10, 0},
 {"Room 2", 0,  0, 0, 0, FL_NORMAL_LABEL, 1, 10, 0},
 {"Basement", 0,  0, 0, 0, FL_NORMAL_LABEL, 1, 10, 0},
 {"Tunnel", 0,  0, 0, 0, FL_NORMAL_LABEL, 1, 10, 0},
 {"Echoed 1", 0,  0, 0, 0, FL_NORMAL_LABEL, 1, 10, 0},
 {"Echoed 2", 0,  0, 0, 0, FL_NORMAL_LABEL, 1, 10, 0},
 {"Very Long 1", 0,  0, 0, 0, FL_NORMAL_LABEL, 1, 10, 0},
 {"Very Long 2", 0,  0, 0, 0, FL_NORMAL_LABEL, 1, 10, 0},
 {0,0,0,0,0,0,0,0,0}
};

void EffUI::cb_revp10_i(Fl_Osc_Choice* o, void*) {
  if(o->value()==2) revp12->activate();
	else revp12->deactivate();
}
void EffUI::cb_revp10(Fl_Osc_Choice* o, void* v) {
  ((EffUI*)(o->parent()->user_data()))->cb_revp10_i(o,v);
}

Fl_Menu_Item EffUI::menu_revp10[] = {
 {"Random", 0,  0, 0, 0, FL_NORMAL_LABEL, 1, 10, 0},
 {"Freeverb", 0,  0, 0, 0, FL_NORMAL_LABEL, 1, 10, 0},
 {"Bandwidth", 0,  0, 0, 0, FL_NORMAL_LABEL, 1, 10, 0},
 {0,0,0,0,0,0,0,0,0}
};

Fl_Menu_Item EffUI::menu_echop[] = {
 {"Echo 1", 0,  0, 0, 0, FL_NORMAL_LABEL, 1, 10, 0},
 {"Echo 2", 0,  0, 0, 0, FL_NORMAL_LABEL, 1, 10, 0},
 {"Echo 3", 0,  0, 0, 0, FL_NORMAL_LABEL, 1, 10, 0},
 {"Simple Echo", 0,  0, 0, 0, FL_NORMAL_LABEL, 1, 10, 0},
 {"Canyon", 0,  0, 0, 0, FL_NORMAL_LABEL, 1, 10, 0},
 {"Panning Echo 1", 0,  0, 0, 0, FL_NORMAL_LABEL, 1, 10, 0},
 {"Panning Echo 2", 0,  0, 0, 0, FL_NORMAL_LABEL, 1, 10, 0},
 {"Panning Echo 3", 0,  0, 0, 0, FL_NORMAL_LABEL, 1, 10, 0},
 {"Feedback Echo", 0,  0, 0, 0, FL_NORMAL_LABEL, 1, 10, 0},
 {0,0,0,0,0,0,0,0,0}
};

Fl_Menu_Item EffUI::menu_chorusp[] = {
 {"Chorus 1", 0,  0, 0, 0, FL_NORMAL_LABEL, 1, 10, 0},
 {"Chorus 2", 0,  0, 0, 0, FL_NORMAL_LABEL, 1, 10, 0},
 {"Chorus 3", 0,  0, 0, 0, FL_NORMAL_LABEL, 1, 10, 0},
 {"Celeste 1", 0,  0, 0, 0, FL_NORMAL_LABEL, 1, 10, 0},
 {"Celeste 2", 0,  0, 0, 0, FL_NORMAL_LABEL, 1, 10, 0},
 {"Flange 1", 0,  0, 0, 0, FL_NORMAL_LABEL, 1, 10, 0},
 {"Flange 2", 0,  0, 0, 0, FL_NORMAL_LABEL, 1, 10, 0},
 {"Flange 3", 0,  0, 0, 0, FL_NORMAL_LABEL, 1, 10, 0},
 {"Flange 4", 0,  0, 0, 0, FL_NORMAL_LABEL, 1, 10, 0},
 {"Flange 5", 0,  0, 0, 0, FL_NORMAL_LABEL, 1, 10, 0},
 {0,0,0,0,0,0,0,0,0}
};

Fl_Menu_Item EffUI::menu_chorusp4[] = {
 {"SINE", 0,  0, 0, 0, FL_NORMAL_LABEL, 1, 10, 0},
 {"TRI", 0,  0, 0, 0, FL_NORMAL_LABEL, 1, 10, 0},
 {0,0,0,0,0,0,0,0,0}
};

Fl_Menu_Item EffUI::menu_phaserp[] = {
 {"Phaser 1", 0,  0, 0, 0, FL_NORMAL_LABEL, 1, 10, 0},
 {"Phaser 2", 0,  0, 0, 0, FL_NORMAL_LABEL, 1, 10, 0},
 {"Phaser 3", 0,  0, 0, 0, FL_NORMAL_LABEL, 1, 10, 0},
 {"Phaser 4", 0,  0, 0, 0, FL_NORMAL_LABEL, 1, 10, 0},
 {"Phaser 5", 0,  0, 0, 0, FL_NORMAL_LABEL, 1, 10, 0},
 {"Phaser 6", 0,  0, 0, 0, FL_NORMAL_LABEL, 1, 10, 0},
 {"APhaser 1", 0,  0, 0, 0, FL_NORMAL_LABEL, 1, 10, 0},
 {"APhaser 2", 0,  0, 0, 0, FL_NORMAL_LABEL, 1, 10, 0},
 {"APhaser 3", 0,  0, 0, 0, FL_NORMAL_LABEL, 1, 10, 0},
 {"APhaser 4", 0,  0, 0, 0, FL_NORMAL_LABEL, 1, 10, 0},
 {"APhaser 5", 0,  0, 0, 0, FL_NORMAL_LABEL, 1, 10, 0},
 {"APhaser 6", 0,  0, 0, 0, FL_NORMAL_LABEL, 1, 10, 0},
 {0,0,0,0,0,0,0,0,0}
};

Fl_Menu_Item EffUI::menu_phaserp4[] = {
 {"SIN", 0,  0, 0, 0, FL_NORMAL_LABEL, 1, 10, 0},
 {"TRI", 0,  0, 0, 0, FL_NORMAL_LABEL, 1, 10, 0},
 {0,0,0,0,0,0,0,0,0}
};

Fl_Menu_Item EffUI::menu_awp[] = {
 {"Alienwah 1", 0,  0, 0, 0, FL_NORMAL_LABEL, 1, 10, 0},
 {"Alienwah 2", 0,  0, 0, 0, FL_NORMAL_LABEL, 1, 10, 0},
 {"Alienwah 3", 0,  0, 0, 0, FL_NORMAL_LABEL, 1, 10, 0},
 {"Alienwah 4", 0,  0, 0, 0, FL_NORMAL_LABEL, 1, 10, 0},
 {0,0,0,0,0,0,0,0,0}
};

Fl_Menu_Item EffUI::menu_awp4[] = {
 {"SINE", 0,  0, 0, 0, FL_NORMAL_LABEL, 1, 10, 0},
 {"TRI", 0,  0, 0, 0, FL_NORMAL_LABEL, 1, 10, 0},
 {0,0,0,0,0,0,0,0,0}
};

Fl_Menu_Item EffUI::menu_distp[] = {
 {"Overdrive 1", 0,  0, 0, 0, FL_NORMAL_LABEL, 1, 10, 0},
 {"Overdrive 2", 0,  0, 0, 0, FL_NORMAL_LABEL, 1, 10, 0},
 {"A. Exciter 1", 0,  0, 0, 0, FL_NORMAL_LABEL, 1, 10, 0},
 {"A. Exciter 2", 0,  0, 0, 0, FL_NORMAL_LABEL, 1, 10, 0},
 {"Guitar Amp", 0,  0, 0, 0, FL_NORMAL_LABEL, 1, 10, 0},
 {"Quantisize", 0,  0, 0, 0, FL_NORMAL_LABEL, 1, 10, 0},
 {0,0,0,0,0,0,0,0,0}
};

Fl_Menu_Item EffUI::menu_distp5[] = {
 {"Atan", 0,  0, 0, 0, FL_NORMAL_LABEL, 1, 10, 0},
 {"Asym1", 0,  0, 0, 0, FL_NORMAL_LABEL, 1, 10, 0},
 {"Pow", 0,  0, 0, 0, FL_NORMAL_LABEL, 1, 10, 0},
 {"Sine", 0,  0, 0, 0, FL_NORMAL_LABEL, 1, 10, 0},
 {"Qnts", 0,  0, 0, 0, FL_NORMAL_LABEL, 1, 10, 0},
 {"Zigzg", 0,  0, 0, 0, FL_NORMAL_LABEL, 1, 10, 0},
 {"Lmt", 0,  0, 0, 0, FL_NORMAL_LABEL, 1, 10, 0},
 {"LmtU", 0,  0, 0, 0, FL_NORMAL_LABEL, 1, 10, 0},
 {"LmtL", 0,  0, 0, 0, FL_NORMAL_LABEL, 1, 10, 0},
 {"ILmt", 0,  0, 0, 0, FL_NORMAL_LABEL, 1, 10, 0},
 {"Clip", 0,  0, 0, 0, FL_NORMAL_LABEL, 1, 10, 0},
 {"Asym2", 0,  0, 0, 0, FL_NORMAL_LABEL, 1, 10, 0},
 {"Pow2", 0,  0, 0, 0, FL_NORMAL_LABEL, 1, 10, 0},
 {"Sgm", 0,  0, 0, 0, FL_NORMAL_LABEL, 1, 10, 0},
 {0,0,0,0,0,0,0,0,0}
};

void EffUI::cb_eqp0_i(Fl_Osc_Dial*, void*) {
  eqgraph->redraw();
}
void EffUI::cb_eqp0(Fl_Osc_Dial* o, void* v) {
  ((EffUI*)(o->parent()->user_data()))->cb_eqp0_i(o,v);
}

void EffUI::cb_bandcounter_i(Fl_Counter* o, void*) {
  eqband=(int) o->value();
int npb=eqband*5+10;

typechoice->oscMove("parameter"+to_s(npb));
freqdial->oscMove("parameter"+to_s(npb+1));
gaindial->oscMove("parameter"+to_s(npb+2));
qdial->oscMove("parameter"+to_s(npb+3));
stagescounter->oscMove("parameter"+to_s(npb+4));
}
void EffUI::cb_bandcounter(Fl_Counter* o, void* v) {
  ((EffUI*)(o->parent()->user_data()))->cb_bandcounter_i(o,v);
}

void EffUI::cb_freqdial_i(Fl_Osc_Dial*, void*) {
  eqgraph->update();
}
void EffUI::cb_freqdial(Fl_Osc_Dial* o, void* v) {
  ((EffUI*)(o->parent()->parent()->user_data()))->cb_freqdial_i(o,v);
}

void EffUI::cb_gaindial_i(Fl_Osc_Dial*, void*) {
  eqgraph->update();
}
void EffUI::cb_gaindial(Fl_Osc_Dial* o, void* v) {
  ((EffUI*)(o->parent()->parent()->user_data()))->cb_gaindial_i(o,v);
}

void EffUI::cb_qdial_i(Fl_Osc_Dial*, void*) {
  eqgraph->update();
}
void EffUI::cb_qdial(Fl_Osc_Dial* o, void* v) {
  ((EffUI*)(o->parent()->parent()->user_data()))->cb_qdial_i(o,v);
}

void EffUI::cb_stagescounter_i(Fl_Osc_Counter*, void*) {
  eqgraph->update();
}
void EffUI::cb_stagescounter(Fl_Osc_Counter* o, void* v) {
  ((EffUI*)(o->parent()->parent()->user_data()))->cb_stagescounter_i(o,v);
}

void EffUI::cb_typechoice_i(Fl_Osc_Choice* o, void*) {
  int type = o->value();
if (type>6) gaindial->activate();
 else gaindial->deactivate();

if (type==0) bandgroup->deactivate();
else bandgroup->activate();
eqgraph->update();
}
void EffUI::cb_typechoice(Fl_Osc_Choice* o, void* v) {
  ((EffUI*)(o->parent()->user_data()))->cb_typechoice_i(o,v);
}

Fl_Menu_Item EffUI::menu_typechoice[] = {
 {"OFF", 0,  0, 0, 0, FL_NORMAL_LABEL, 1, 10, 0},
 {"Lp1", 0,  0, 0, 0, FL_NORMAL_LABEL, 1, 10, 0},
 {"Hp1", 0,  0, 0, 0, FL_NORMAL_LABEL, 1, 10, 0},
 {"Lp2", 0,  0, 0, 0, FL_NORMAL_LABEL, 1, 10, 0},
 {"Hp2", 0,  0, 0, 0, FL_NORMAL_LABEL, 1, 10, 0},
 {"Bp2", 0,  0, 0, 0, FL_NORMAL_LABEL, 1, 10, 0},
 {"N2", 0,  0, 0, 0, FL_NORMAL_LABEL, 1, 10, 0},
 {"Pk", 0,  0, 0, 0, FL_NORMAL_LABEL, 1, 10, 0},
 {"LSh", 0,  0, 0, 0, FL_NORMAL_LABEL, 1, 10, 0},
 {"HSh", 0,  0, 0, 0, FL_NORMAL_LABEL, 1, 10, 0},
 {0,0,0,0,0,0,0,0,0}
};

Fl_Menu_Item EffUI::menu_dfp[] = {
 {"WahWah", 0,  0, 0, 0, FL_NORMAL_LABEL, 1, 10, 0},
 {"AutoWah", 0,  0, 0, 0, FL_NORMAL_LABEL, 1, 10, 0},
 {"Sweep", 0,  0, 0, 0, FL_NORMAL_LABEL, 1, 10, 0},
 {"VocalMorph1", 0,  0, 0, 0, FL_NORMAL_LABEL, 1, 10, 0},
 {"VocalMorph2", 0,  0, 0, 0, FL_NORMAL_LABEL, 1, 10, 0},
 {0,0,0,0,0,0,0,0,0}
};

Fl_Menu_Item EffUI::menu_dfp4[] = {
 {"SINE", 0,  0, 0, 0, FL_NORMAL_LABEL, 1, 10, 0},
 {"TRI", 0,  0, 0, 0, FL_NORMAL_LABEL, 1, 10, 0},
 {0,0,0,0,0,0,0,0,0}
};

void EffUI::cb_Filter_i(Fl_Button*, void*) {
  filterwindow->show();
}
void EffUI::cb_Filter(Fl_Button* o, void* v) {
  ((EffUI*)(o->parent()->user_data()))->cb_Filter_i(o,v);
}

void EffUI::cb_Close_i(Fl_Button*, void*) {
  filterwindow->hide();
}
void EffUI::cb_Close(Fl_Button* o, void* v) {
  ((EffUI*)(o->parent()->user_data()))->cb_Close_i(o,v);
}

EffUI::EffUI(int x,int y, int w, int h, const char *label):Fl_Osc_Group(x,y,w,h,label) {
  filterwindow=NULL;
}

EffUI::~EffUI() {
  effnullwindow->hide();//delete (effnullwindow);
  effreverbwindow->hide();//delete (effreverbwindow);
  effechowindow->hide();//delete (effechowindow);
  effchoruswindow->hide();//delete (effchoruswindow);
  effphaserwindow->hide();//delete (effphaserwindow);
  effalienwahwindow->hide();//delete (effalienwahwindow);
  effdistorsionwindow->hide();//delete (effdistorsionwindow);
  effeqwindow->hide();//delete (effeqwindow);
  effdynamicfilterwindow->hide();//delete (effdynamicfilterwindow);
  
  if (filterwindow!=NULL){
  	filterwindow->hide();
  	delete(filterwindow);
  };
}

Fl_Group* EffUI::make_null_window() {
  { Fl_Group* o = effnullwindow = new Fl_Group(0, 0, 380, 100);
    effnullwindow->box(FL_UP_BOX);
    effnullwindow->color((Fl_Color)221);
    effnullwindow->selection_color(FL_BACKGROUND_COLOR);
    effnullwindow->labeltype(FL_NO_LABEL);
    effnullwindow->labelfont(1);
    effnullwindow->labelsize(19);
    effnullwindow->labelcolor(FL_FOREGROUND_COLOR);
    effnullwindow->user_data((void*)(this));
    effnullwindow->align(Fl_Align(FL_ALIGN_TOP));
    effnullwindow->when(FL_WHEN_RELEASE);
    set_module_parameters(o);
    effnullwindow->end();
  } // Fl_Group* effnullwindow
  return effnullwindow;
}

Fl_Group* EffUI::make_reverb_window() {
  { Fl_Group* o = effreverbwindow = new Fl_Group(0, 0, 380, 100);
    effreverbwindow->box(FL_UP_BOX);
    effreverbwindow->color((Fl_Color)221);
    effreverbwindow->selection_color(FL_BACKGROUND_COLOR);
    effreverbwindow->labeltype(FL_NO_LABEL);
    effreverbwindow->labelfont(1);
    effreverbwindow->labelsize(19);
    effreverbwindow->labelcolor(FL_FOREGROUND_COLOR);
    effreverbwindow->user_data((void*)(this));
    effreverbwindow->align(Fl_Align(FL_ALIGN_TOP));
    effreverbwindow->when(FL_WHEN_RELEASE);
    { Fl_Osc_Choice* o = revp = new Fl_Osc_Choice(10, 15, 90, 15, "Preset");
      revp->box(FL_UP_BOX);
      revp->down_box(FL_BORDER_BOX);
      revp->color((Fl_Color)14);
      revp->selection_color(FL_BACKGROUND2_COLOR);
      revp->labeltype(FL_NORMAL_LABEL);
      revp->labelfont(1);
      revp->labelsize(10);
      revp->labelcolor(FL_FOREGROUND_COLOR);
      revp->textfont(1);
      revp->textsize(10);
      revp->align(Fl_Align(FL_ALIGN_TOP_LEFT));
      revp->when(FL_WHEN_RELEASE);
      revp->menu(menu_revp);
      o->init("preset");
    } // Fl_Osc_Choice* revp
    { Fl_Osc_Choice* o = revp10 = new Fl_Osc_Choice(110, 15, 85, 15, "Type");
      revp10->box(FL_UP_BOX);
      revp10->down_box(FL_BORDER_BOX);
      revp10->color((Fl_Color)14);
      revp10->selection_color(FL_BACKGROUND2_COLOR);
      revp10->labeltype(FL_NORMAL_LABEL);
      revp10->labelfont(1);
      revp10->labelsize(10);
      revp10->labelcolor(FL_FOREGROUND_COLOR);
      revp10->textfont(1);
      revp10->textsize(10);
      revp10->callback((Fl_Callback*)cb_revp10);
      revp10->align(Fl_Align(FL_ALIGN_TOP_LEFT));
      revp10->when(FL_WHEN_RELEASE);
      revp10->menu(menu_revp10);
      o->init("parameter10");
    } // Fl_Osc_Choice* revp10
    { Fl_Osc_Dial* o = revp0 = new Fl_Osc_Dial(10, 40, 30, 30, "Vol");
      revp0->tooltip("Effect Volume");
      revp0->box(FL_ROUND_UP_BOX);
      revp0->color(FL_BACKGROUND_COLOR);
      revp0->selection_color(FL_INACTIVE_COLOR);
      revp0->labeltype(FL_NORMAL_LABEL);
      revp0->labelfont(1);
      revp0->labelsize(11);
      revp0->labelcolor(FL_FOREGROUND_COLOR);
      revp0->maximum(127);
      revp0->align(Fl_Align(FL_ALIGN_BOTTOM));
      revp0->when(FL_WHEN_CHANGED);
      o->init("parameter0");
    } // Fl_Osc_Dial* revp0
    { Fl_Osc_Dial* o = revp1 = new Fl_Osc_Dial(45, 40, 30, 30, "Pan");
      revp1->box(FL_ROUND_UP_BOX);
      revp1->color(FL_BACKGROUND_COLOR);
      revp1->selection_color(FL_INACTIVE_COLOR);
      revp1->labeltype(FL_NORMAL_LABEL);
      revp1->labelfont(1);
      revp1->labelsize(11);
      revp1->labelcolor(FL_FOREGROUND_COLOR);
      revp1->maximum(127);
      revp1->align(Fl_Align(FL_ALIGN_BOTTOM));
      revp1->when(FL_WHEN_CHANGED);
      o->init("parameter1");
    } // Fl_Osc_Dial* revp1
    { Fl_Osc_Dial* o = revp2 = new Fl_Osc_Dial(80, 40, 30, 30, "Time");
      revp2->tooltip("Duration of Effect");
      revp2->box(FL_ROUND_UP_BOX);
      revp2->color(FL_BACKGROUND_COLOR);
      revp2->selection_color(FL_INACTIVE_COLOR);
      revp2->labeltype(FL_NORMAL_LABEL);
      revp2->labelfont(1);
      revp2->labelsize(11);
      revp2->labelcolor(FL_FOREGROUND_COLOR);
      revp2->maximum(127);
      revp2->align(Fl_Align(FL_ALIGN_BOTTOM));
      revp2->when(FL_WHEN_CHANGED);
      o->init("parameter2");
    } // Fl_Osc_Dial* revp2
    { Fl_Osc_Dial* o = revp3 = new Fl_Osc_Dial(120, 40, 30, 30, "I.del");
      revp3->tooltip("Initial Delay");
      revp3->box(FL_ROUND_UP_BOX);
      revp3->color(FL_BACKGROUND_COLOR);
      revp3->selection_color(FL_INACTIVE_COLOR);
      revp3->labeltype(FL_NORMAL_LABEL);
      revp3->labelfont(1);
      revp3->labelsize(11);
      revp3->labelcolor(FL_FOREGROUND_COLOR);
      revp3->maximum(127);
      revp3->align(Fl_Align(FL_ALIGN_BOTTOM));
      revp3->when(FL_WHEN_RELEASE);
      o->init("parameter3");
    } // Fl_Osc_Dial* revp3
    { Fl_Osc_Dial* o = revp4 = new Fl_Osc_Dial(155, 40, 30, 30, "I.delfb");
      revp4->tooltip("Initial Delay Feedback");
      revp4->box(FL_ROUND_UP_BOX);
      revp4->color(FL_BACKGROUND_COLOR);
      revp4->selection_color(FL_INACTIVE_COLOR);
      revp4->labeltype(FL_NORMAL_LABEL);
      revp4->labelfont(1);
      revp4->labelsize(11);
      revp4->labelcolor(FL_FOREGROUND_COLOR);
      revp4->maximum(127);
      revp4->align(Fl_Align(FL_ALIGN_BOTTOM));
      revp4->when(FL_WHEN_CHANGED);
      o->init("parameter4");
    } // Fl_Osc_Dial* revp4
    { Fl_Osc_Dial* o = revp12 = new Fl_Osc_Dial(200, 40, 30, 30, "bw");
      revp12->box(FL_ROUND_UP_BOX);
      revp12->color(FL_BACKGROUND_COLOR);
      revp12->selection_color(FL_INACTIVE_COLOR);
      revp12->labeltype(FL_NORMAL_LABEL);
      revp12->labelfont(1);
      revp12->labelsize(11);
      revp12->labelcolor(FL_FOREGROUND_COLOR);
      revp12->maximum(127);
      revp12->align(Fl_Align(FL_ALIGN_BOTTOM));
      revp12->when(FL_WHEN_RELEASE);
      revp12->deactivate();
      o->init("parameter12");
    } // Fl_Osc_Dial* revp12
    { Fl_Osc_Dial* o = revp6 = new Fl_Osc_Dial(235, 40, 30, 30, "E/R");
      revp6->box(FL_ROUND_UP_BOX);
      revp6->color(FL_BACKGROUND_COLOR);
      revp6->selection_color(FL_INACTIVE_COLOR);
      revp6->labeltype(FL_NORMAL_LABEL);
      revp6->labelfont(1);
      revp6->labelsize(11);
      revp6->labelcolor(FL_FOREGROUND_COLOR);
      revp6->maximum(127);
      revp6->align(Fl_Align(FL_ALIGN_BOTTOM));
      revp6->when(FL_WHEN_CHANGED);
      revp6->deactivate();
      o->init("parameter6");
    } // Fl_Osc_Dial* revp6
    { Fl_Osc_Dial* o = revp7 = new Fl_Osc_Dial(270, 40, 30, 30, "LPF");
      revp7->tooltip("Low Pass Filter");
      revp7->box(FL_ROUND_UP_BOX);
      revp7->color(FL_BACKGROUND_COLOR);
      revp7->selection_color(FL_INACTIVE_COLOR);
      revp7->labeltype(FL_NORMAL_LABEL);
      revp7->labelfont(1);
      revp7->labelsize(11);
      revp7->labelcolor(FL_FOREGROUND_COLOR);
      revp7->maximum(127);
      revp7->align(Fl_Align(FL_ALIGN_BOTTOM));
      revp7->when(FL_WHEN_CHANGED);
      o->init("parameter7");
    } // Fl_Osc_Dial* revp7
    { Fl_Osc_Dial* o = revp8 = new Fl_Osc_Dial(305, 40, 30, 30, "HPF");
      revp8->tooltip("High Pass Filter");
      revp8->box(FL_ROUND_UP_BOX);
      revp8->color(FL_BACKGROUND_COLOR);
      revp8->selection_color(FL_INACTIVE_COLOR);
      revp8->labeltype(FL_NORMAL_LABEL);
      revp8->labelfont(1);
      revp8->labelsize(11);
      revp8->labelcolor(FL_FOREGROUND_COLOR);
      revp8->maximum(127);
      revp8->align(Fl_Align(FL_ALIGN_BOTTOM));
      revp8->when(FL_WHEN_CHANGED);
      o->init("parameter8");
    } // Fl_Osc_Dial* revp8
    { Fl_Osc_Dial* o = revp9 = new Fl_Osc_Dial(340, 40, 30, 30, "Damp");
      revp9->tooltip("Dampening");
      revp9->box(FL_ROUND_UP_BOX);
      revp9->color(FL_BACKGROUND_COLOR);
      revp9->selection_color(FL_INACTIVE_COLOR);
      revp9->labeltype(FL_NORMAL_LABEL);
      revp9->labelfont(1);
      revp9->labelsize(11);
      revp9->labelcolor(FL_FOREGROUND_COLOR);
      revp9->minimum(64);
      revp9->maximum(127);
      revp9->step(1);
      revp9->align(Fl_Align(FL_ALIGN_BOTTOM));
      revp9->when(FL_WHEN_CHANGED);
      o->init("parameter9");
    } // Fl_Osc_Dial* revp9
    { Fl_Osc_Dial* o = revp11 = new Fl_Osc_Dial(200, 10, 25, 25, "R.S.");
      revp11->tooltip("RoomSize");
      revp11->box(FL_ROUND_UP_BOX);
      revp11->color(FL_BACKGROUND_COLOR);
      revp11->selection_color(FL_INACTIVE_COLOR);
      revp11->labeltype(FL_NORMAL_LABEL);
      revp11->labelfont(1);
      revp11->labelsize(8);
      revp11->labelcolor(FL_FOREGROUND_COLOR);
      revp11->minimum(1);
      revp11->maximum(127);
      revp11->step(1);
      revp11->align(Fl_Align(FL_ALIGN_RIGHT));
      revp11->when(FL_WHEN_CHANGED);
      o->init("parameter11");
    } // Fl_Osc_Dial* revp11
    set_module_parameters(o);
    effreverbwindow->end();
  } // Fl_Group* effreverbwindow
  return effreverbwindow;
}

Fl_Group* EffUI::make_echo_window() {
  { Fl_Group* o = effechowindow = new Fl_Group(0, 0, 380, 100);
    effechowindow->box(FL_UP_BOX);
    effechowindow->color((Fl_Color)221);
    effechowindow->selection_color(FL_BACKGROUND_COLOR);
    effechowindow->labeltype(FL_NO_LABEL);
    effechowindow->labelfont(1);
    effechowindow->labelsize(19);
    effechowindow->labelcolor(FL_FOREGROUND_COLOR);
    effechowindow->user_data((void*)(this));
    effechowindow->align(Fl_Align(FL_ALIGN_TOP));
    effechowindow->when(FL_WHEN_RELEASE);
    { Fl_Osc_Choice* o = echop = new Fl_Osc_Choice(11, 15, 95, 15, "Preset");
      echop->box(FL_UP_BOX);
      echop->down_box(FL_BORDER_BOX);
      echop->color((Fl_Color)14);
      echop->selection_color(FL_BACKGROUND2_COLOR);
      echop->labeltype(FL_NORMAL_LABEL);
      echop->labelfont(1);
      echop->labelsize(10);
      echop->labelcolor(FL_FOREGROUND_COLOR);
      echop->textfont(1);
      echop->textsize(10);
      echop->align(Fl_Align(FL_ALIGN_TOP_LEFT));
      echop->when(FL_WHEN_RELEASE);
      echop->menu(menu_echop);
      o->init("preset");
    } // Fl_Osc_Choice* echop
    { Fl_Osc_Dial* o = echop0 = new Fl_Osc_Dial(10, 40, 30, 30, "Vol");
      echop0->tooltip("Effect Volume");
      echop0->box(FL_ROUND_UP_BOX);
      echop0->color(FL_BACKGROUND_COLOR);
      echop0->selection_color(FL_INACTIVE_COLOR);
      echop0->labeltype(FL_NORMAL_LABEL);
      echop0->labelfont(1);
      echop0->labelsize(11);
      echop0->labelcolor(FL_FOREGROUND_COLOR);
      echop0->maximum(127);
      echop0->align(Fl_Align(FL_ALIGN_BOTTOM));
      echop0->when(FL_WHEN_CHANGED);
      o->init("parameter0");
    } // Fl_Osc_Dial* echop0
    { Fl_Osc_Dial* o = echop1 = new Fl_Osc_Dial(45, 40, 30, 30, "Pan");
      echop1->box(FL_ROUND_UP_BOX);
      echop1->color(FL_BACKGROUND_COLOR);
      echop1->selection_color(FL_INACTIVE_COLOR);
      echop1->labeltype(FL_NORMAL_LABEL);
      echop1->labelfont(1);
      echop1->labelsize(11);
      echop1->labelcolor(FL_FOREGROUND_COLOR);
      echop1->maximum(127);
      echop1->align(Fl_Align(FL_ALIGN_BOTTOM));
      echop1->when(FL_WHEN_CHANGED);
      o->init("parameter1");
    } // Fl_Osc_Dial* echop1
    { Fl_Osc_Dial* o = echop2 = new Fl_Osc_Dial(80, 40, 30, 30, "Delay");
      echop2->box(FL_ROUND_UP_BOX);
      echop2->color(FL_BACKGROUND_COLOR);
      echop2->selection_color(FL_INACTIVE_COLOR);
      echop2->labeltype(FL_NORMAL_LABEL);
      echop2->labelfont(1);
      echop2->labelsize(11);
      echop2->labelcolor(FL_FOREGROUND_COLOR);
      echop2->maximum(127);
      echop2->align(Fl_Align(FL_ALIGN_BOTTOM));
      echop2->when(FL_WHEN_RELEASE);
      o->init("parameter2");
    } // Fl_Osc_Dial* echop2
    { Fl_Osc_Dial* o = echop3 = new Fl_Osc_Dial(120, 40, 30, 30, "LRdl.");
      echop3->tooltip("Delay Between L/R");
      echop3->box(FL_ROUND_UP_BOX);
      echop3->color(FL_BACKGROUND_COLOR);
      echop3->selection_color(FL_INACTIVE_COLOR);
      echop3->labeltype(FL_NORMAL_LABEL);
      echop3->labelfont(1);
      echop3->labelsize(11);
      echop3->labelcolor(FL_FOREGROUND_COLOR);
      echop3->maximum(127);
      echop3->align(Fl_Align(FL_ALIGN_BOTTOM));
      echop3->when(FL_WHEN_RELEASE);
      o->init("parameter3");
    } // Fl_Osc_Dial* echop3
    { Fl_Osc_Dial* o = echop4 = new Fl_Osc_Dial(155, 40, 30, 30, "LRc.");
      echop4->tooltip("L/R Crossover");
      echop4->box(FL_ROUND_UP_BOX);
      echop4->color(FL_BACKGROUND_COLOR);
      echop4->selection_color(FL_INACTIVE_COLOR);
      echop4->labeltype(FL_NORMAL_LABEL);
      echop4->labelfont(1);
      echop4->labelsize(11);
      echop4->labelcolor(FL_FOREGROUND_COLOR);
      echop4->maximum(127);
      echop4->align(Fl_Align(FL_ALIGN_BOTTOM));
      echop4->when(FL_WHEN_CHANGED);
      o->init("parameter4");
    } // Fl_Osc_Dial* echop4
    { Fl_Osc_Dial* o = echop5 = new Fl_Osc_Dial(195, 40, 30, 30, "Fb.");
      echop5->tooltip("Feedback");
      echop5->box(FL_ROUND_UP_BOX);
      echop5->color(FL_BACKGROUND_COLOR);
      echop5->selection_color(FL_INACTIVE_COLOR);
      echop5->labeltype(FL_NORMAL_LABEL);
      echop5->labelfont(1);
      echop5->labelsize(11);
      echop5->labelcolor(FL_FOREGROUND_COLOR);
      echop5->maximum(127);
      echop5->align(Fl_Align(FL_ALIGN_BOTTOM));
      echop5->when(FL_WHEN_CHANGED);
      o->init("parameter5");
    } // Fl_Osc_Dial* echop5
    { Fl_Osc_Dial* o = echop6 = new Fl_Osc_Dial(235, 40, 30, 30, "Damp");
      echop6->tooltip("Dampening");
      echop6->box(FL_ROUND_UP_BOX);
      echop6->color(FL_BACKGROUND_COLOR);
      echop6->selection_color(FL_INACTIVE_COLOR);
      echop6->labeltype(FL_NORMAL_LABEL);
      echop6->labelfont(1);
      echop6->labelsize(11);
      echop6->labelcolor(FL_FOREGROUND_COLOR);
      echop6->maximum(127);
      echop6->align(Fl_Align(FL_ALIGN_BOTTOM));
      echop6->when(FL_WHEN_CHANGED);
      o->init("parameter6");
    } // Fl_Osc_Dial* echop6
    set_module_parameters(o);
    effechowindow->end();
  } // Fl_Group* effechowindow
  return effechowindow;
}

Fl_Group* EffUI::make_chorus_window() {
  { Fl_Group* o = effchoruswindow = new Fl_Group(0, 0, 380, 100);
    effchoruswindow->box(FL_UP_BOX);
    effchoruswindow->color((Fl_Color)221);
    effchoruswindow->selection_color(FL_BACKGROUND_COLOR);
    effchoruswindow->labeltype(FL_NO_LABEL);
    effchoruswindow->labelfont(1);
    effchoruswindow->labelsize(19);
    effchoruswindow->labelcolor(FL_FOREGROUND_COLOR);
    effchoruswindow->user_data((void*)(this));
    effchoruswindow->align(Fl_Align(FL_ALIGN_TOP));
    effchoruswindow->when(FL_WHEN_RELEASE);
    { Fl_Osc_Choice* o = chorusp = new Fl_Osc_Choice(10, 15, 90, 15, "Preset");
      chorusp->box(FL_UP_BOX);
      chorusp->down_box(FL_BORDER_BOX);
      chorusp->color((Fl_Color)14);
      chorusp->selection_color(FL_BACKGROUND2_COLOR);
      chorusp->labeltype(FL_NORMAL_LABEL);
      chorusp->labelfont(1);
      chorusp->labelsize(10);
      chorusp->labelcolor(FL_FOREGROUND_COLOR);
      chorusp->textfont(1);
      chorusp->textsize(10);
      chorusp->align(Fl_Align(FL_ALIGN_TOP_LEFT));
      chorusp->when(FL_WHEN_RELEASE);
      chorusp->menu(menu_chorusp);
      o->init("preset");
    } // Fl_Osc_Choice* chorusp
    { Fl_Osc_Dial* o = chorusp0 = new Fl_Osc_Dial(10, 40, 30, 30, "Vol");
      chorusp0->box(FL_ROUND_UP_BOX);
      chorusp0->color(FL_BACKGROUND_COLOR);
      chorusp0->selection_color(FL_INACTIVE_COLOR);
      chorusp0->labeltype(FL_NORMAL_LABEL);
      chorusp0->labelfont(1);
      chorusp0->labelsize(11);
      chorusp0->labelcolor(FL_FOREGROUND_COLOR);
      chorusp0->maximum(127);
      chorusp0->align(Fl_Align(FL_ALIGN_BOTTOM));
      chorusp0->when(FL_WHEN_CHANGED);
      o->init("parameter0");
    } // Fl_Osc_Dial* chorusp0
    { Fl_Osc_Dial* o = chorusp1 = new Fl_Osc_Dial(45, 40, 30, 30, "Pan");
      chorusp1->box(FL_ROUND_UP_BOX);
      chorusp1->color(FL_BACKGROUND_COLOR);
      chorusp1->selection_color(FL_INACTIVE_COLOR);
      chorusp1->labeltype(FL_NORMAL_LABEL);
      chorusp1->labelfont(1);
      chorusp1->labelsize(11);
      chorusp1->labelcolor(FL_FOREGROUND_COLOR);
      chorusp1->maximum(127);
      chorusp1->align(Fl_Align(FL_ALIGN_BOTTOM));
      chorusp1->when(FL_WHEN_CHANGED);
      o->init("parameter1");
    } // Fl_Osc_Dial* chorusp1
    { Fl_Osc_Dial* o = chorusp2 = new Fl_Osc_Dial(85, 40, 30, 30, "Freq");
      chorusp2->tooltip("LFO Frequency");
      chorusp2->box(FL_ROUND_UP_BOX);
      chorusp2->color(FL_BACKGROUND_COLOR);
      chorusp2->selection_color(FL_INACTIVE_COLOR);
      chorusp2->labeltype(FL_NORMAL_LABEL);
      chorusp2->labelfont(1);
      chorusp2->labelsize(11);
      chorusp2->labelcolor(FL_FOREGROUND_COLOR);
      chorusp2->maximum(127);
      chorusp2->align(Fl_Align(FL_ALIGN_BOTTOM));
      chorusp2->when(FL_WHEN_CHANGED);
      o->init("parameter2");
    } // Fl_Osc_Dial* chorusp2
    { Fl_Osc_Dial* o = chorusp3 = new Fl_Osc_Dial(120, 40, 30, 30, "Rnd");
      chorusp3->tooltip("LFO Randomness");
      chorusp3->box(FL_ROUND_UP_BOX);
      chorusp3->color(FL_BACKGROUND_COLOR);
      chorusp3->selection_color(FL_INACTIVE_COLOR);
      chorusp3->labeltype(FL_NORMAL_LABEL);
      chorusp3->labelfont(1);
      chorusp3->labelsize(11);
      chorusp3->labelcolor(FL_FOREGROUND_COLOR);
      chorusp3->maximum(127);
      chorusp3->align(Fl_Align(FL_ALIGN_BOTTOM));
      chorusp3->when(FL_WHEN_RELEASE);
      o->init("parameter3");
    } // Fl_Osc_Dial* chorusp3
    { Fl_Osc_Dial* o = chorusp5 = new Fl_Osc_Dial(200, 40, 30, 30, "St.df");
      chorusp5->tooltip("L/R Phase Shift");
      chorusp5->box(FL_ROUND_UP_BOX);
      chorusp5->color(FL_BACKGROUND_COLOR);
      chorusp5->selection_color(FL_INACTIVE_COLOR);
      chorusp5->labeltype(FL_NORMAL_LABEL);
      chorusp5->labelfont(1);
      chorusp5->labelsize(11);
      chorusp5->labelcolor(FL_FOREGROUND_COLOR);
      chorusp5->maximum(127);
      chorusp5->align(Fl_Align(FL_ALIGN_BOTTOM));
      chorusp5->when(FL_WHEN_CHANGED);
      o->init("parameter5");
    } // Fl_Osc_Dial* chorusp5
    { Fl_Osc_Dial* o = chorusp6 = new Fl_Osc_Dial(235, 40, 30, 30, "Dpth");
      chorusp6->tooltip("LFO Depth");
      chorusp6->box(FL_ROUND_UP_BOX);
      chorusp6->color(FL_BACKGROUND_COLOR);
      chorusp6->selection_color(FL_INACTIVE_COLOR);
      chorusp6->labeltype(FL_NORMAL_LABEL);
      chorusp6->labelfont(1);
      chorusp6->labelsize(11);
      chorusp6->labelcolor(FL_FOREGROUND_COLOR);
      chorusp6->maximum(127);
      chorusp6->align(Fl_Align(FL_ALIGN_BOTTOM));
      chorusp6->when(FL_WHEN_CHANGED);
      o->init("parameter6");
    } // Fl_Osc_Dial* chorusp6
    { Fl_Osc_Dial* o = chorusp7 = new Fl_Osc_Dial(270, 40, 30, 30, "Delay");
      chorusp7->box(FL_ROUND_UP_BOX);
      chorusp7->color(FL_BACKGROUND_COLOR);
      chorusp7->selection_color(FL_INACTIVE_COLOR);
      chorusp7->labeltype(FL_NORMAL_LABEL);
      chorusp7->labelfont(1);
      chorusp7->labelsize(11);
      chorusp7->labelcolor(FL_FOREGROUND_COLOR);
      chorusp7->maximum(127);
      chorusp7->align(Fl_Align(FL_ALIGN_BOTTOM));
      chorusp7->when(FL_WHEN_CHANGED);
      o->init("parameter7");
    } // Fl_Osc_Dial* chorusp7
    { Fl_Osc_Dial* o = chorusp8 = new Fl_Osc_Dial(305, 40, 30, 30, "Fb");
      chorusp8->tooltip("Feedback");
      chorusp8->box(FL_ROUND_UP_BOX);
      chorusp8->color(FL_BACKGROUND_COLOR);
      chorusp8->selection_color(FL_INACTIVE_COLOR);
      chorusp8->labeltype(FL_NORMAL_LABEL);
      chorusp8->labelfont(1);
      chorusp8->labelsize(11);
      chorusp8->labelcolor(FL_FOREGROUND_COLOR);
      chorusp8->maximum(127);
      chorusp8->align(Fl_Align(FL_ALIGN_BOTTOM));
      chorusp8->when(FL_WHEN_CHANGED);
      o->init("parameter8");
    } // Fl_Osc_Dial* chorusp8
    { Fl_Osc_Dial* o = chorusp9 = new Fl_Osc_Dial(340, 40, 30, 30, "L/R");
      chorusp9->tooltip("Channel Routing");
      chorusp9->box(FL_ROUND_UP_BOX);
      chorusp9->color(FL_BACKGROUND_COLOR);
      chorusp9->selection_color(FL_INACTIVE_COLOR);
      chorusp9->labeltype(FL_NORMAL_LABEL);
      chorusp9->labelfont(1);
      chorusp9->labelsize(11);
      chorusp9->labelcolor(FL_FOREGROUND_COLOR);
      chorusp9->maximum(127);
      chorusp9->align(Fl_Align(FL_ALIGN_BOTTOM));
      chorusp9->when(FL_WHEN_CHANGED);
      o->init("parameter9");
    } // Fl_Osc_Dial* chorusp9
    { Fl_Osc_Check* o = new Fl_Osc_Check(120, 10, 55, 20, "Flange");
      o->box(FL_THIN_UP_BOX);
      o->down_box(FL_DOWN_BOX);
      o->color((Fl_Color)230);
      o->selection_color(FL_FOREGROUND_COLOR);
      o->labeltype(FL_NORMAL_LABEL);
      o->labelfont(1);
      o->labelsize(10);
      o->labelcolor(FL_FOREGROUND_COLOR);
      o->align(Fl_Align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE));
      o->when(FL_WHEN_RELEASE);
      o->hide();
      o->deactivate();
      o->init("parameter10");
    } // Fl_Osc_Check* o
    { Fl_Osc_Check* o = chorusp11 = new Fl_Osc_Check(185, 10, 70, 20, "Subtract");
      chorusp11->tooltip("inverts the output");
      chorusp11->box(FL_THIN_UP_BOX);
      chorusp11->down_box(FL_DOWN_BOX);
      chorusp11->color((Fl_Color)51);
      chorusp11->selection_color(FL_FOREGROUND_COLOR);
      chorusp11->labeltype(FL_NORMAL_LABEL);
      chorusp11->labelfont(0);
      chorusp11->labelsize(10);
      chorusp11->labelcolor(FL_FOREGROUND_COLOR);
      chorusp11->align(Fl_Align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE));
      chorusp11->when(FL_WHEN_RELEASE);
      o->init("parameter11");
    } // Fl_Osc_Check* chorusp11
    { Fl_Osc_Choice* o = chorusp4 = new Fl_Osc_Choice(155, 50, 40, 15, "LFO type");
      chorusp4->tooltip("LFO function");
      chorusp4->box(FL_UP_BOX);
      chorusp4->down_box(FL_BORDER_BOX);
      chorusp4->color(FL_BACKGROUND_COLOR);
      chorusp4->selection_color(FL_SELECTION_COLOR);
      chorusp4->labeltype(FL_NORMAL_LABEL);
      chorusp4->labelfont(1);
      chorusp4->labelsize(10);
      chorusp4->labelcolor(FL_FOREGROUND_COLOR);
      chorusp4->textsize(8);
      chorusp4->align(Fl_Align(130));
      chorusp4->when(FL_WHEN_RELEASE);
      chorusp4->menu(menu_chorusp4);
      o->init("parameter4");
    } // Fl_Osc_Choice* chorusp4
    set_module_parameters(o);
    effchoruswindow->end();
  } // Fl_Group* effchoruswindow
  return effchoruswindow;
}

Fl_Group* EffUI::make_phaser_window() {
  { Fl_Group* o = effphaserwindow = new Fl_Group(0, 0, 380, 95);
    effphaserwindow->box(FL_UP_BOX);
    effphaserwindow->color((Fl_Color)221);
    effphaserwindow->selection_color(FL_BACKGROUND_COLOR);
    effphaserwindow->labeltype(FL_NO_LABEL);
    effphaserwindow->labelfont(1);
    effphaserwindow->labelsize(19);
    effphaserwindow->labelcolor(FL_FOREGROUND_COLOR);
    effphaserwindow->user_data((void*)(this));
    effphaserwindow->align(Fl_Align(FL_ALIGN_TOP));
    effphaserwindow->when(FL_WHEN_RELEASE);
    { Fl_Osc_Choice* o = phaserp = new Fl_Osc_Choice(10, 15, 100, 15, "Preset");
      phaserp->box(FL_UP_BOX);
      phaserp->down_box(FL_BORDER_BOX);
      phaserp->color((Fl_Color)14);
      phaserp->selection_color(FL_BACKGROUND2_COLOR);
      phaserp->labeltype(FL_NORMAL_LABEL);
      phaserp->labelfont(1);
      phaserp->labelsize(10);
      phaserp->labelcolor(FL_FOREGROUND_COLOR);
      phaserp->textfont(1);
      phaserp->textsize(10);
      phaserp->align(Fl_Align(FL_ALIGN_TOP_LEFT));
      phaserp->when(FL_WHEN_RELEASE);
      phaserp->menu(menu_phaserp);
      o->init("preset");
    } // Fl_Osc_Choice* phaserp
    { Fl_Osc_Dial* o = phaserp0 = new Fl_Osc_Dial(10, 40, 30, 30, "Vol");
      phaserp0->tooltip("Effect Volume");
      phaserp0->box(FL_ROUND_UP_BOX);
      phaserp0->color(FL_BACKGROUND_COLOR);
      phaserp0->selection_color(FL_INACTIVE_COLOR);
      phaserp0->labeltype(FL_NORMAL_LABEL);
      phaserp0->labelfont(1);
      phaserp0->labelsize(11);
      phaserp0->labelcolor(FL_FOREGROUND_COLOR);
      phaserp0->maximum(127);
      phaserp0->align(Fl_Align(FL_ALIGN_BOTTOM));
      phaserp0->when(FL_WHEN_CHANGED);
      o->init("parameter0");
    } // Fl_Osc_Dial* phaserp0
    { Fl_Osc_Dial* o = phaserp1 = new Fl_Osc_Dial(45, 40, 30, 30, "Pan");
      phaserp1->box(FL_ROUND_UP_BOX);
      phaserp1->color(FL_BACKGROUND_COLOR);
      phaserp1->selection_color(FL_INACTIVE_COLOR);
      phaserp1->labeltype(FL_NORMAL_LABEL);
      phaserp1->labelfont(1);
      phaserp1->labelsize(11);
      phaserp1->labelcolor(FL_FOREGROUND_COLOR);
      phaserp1->maximum(127);
      phaserp1->align(Fl_Align(FL_ALIGN_BOTTOM));
      phaserp1->when(FL_WHEN_CHANGED);
      o->init("parameter1");
    } // Fl_Osc_Dial* phaserp1
    { Fl_Osc_Dial* o = phaserp2 = new Fl_Osc_Dial(85, 45, 25, 25, "Freq");
      phaserp2->tooltip("LFO frequency");
      phaserp2->box(FL_ROUND_UP_BOX);
      phaserp2->color(FL_BACKGROUND_COLOR);
      phaserp2->selection_color(FL_INACTIVE_COLOR);
      phaserp2->labeltype(FL_NORMAL_LABEL);
      phaserp2->labelfont(1);
      phaserp2->labelsize(11);
      phaserp2->labelcolor(FL_FOREGROUND_COLOR);
      phaserp2->maximum(127);
      phaserp2->align(Fl_Align(FL_ALIGN_BOTTOM));
      phaserp2->when(FL_WHEN_CHANGED);
      o->init("parameter2");
    } // Fl_Osc_Dial* phaserp2
    { Fl_Osc_Dial* o = phaserp3 = new Fl_Osc_Dial(120, 45, 25, 25, "Rnd");
      phaserp3->tooltip("LFO randomness");
      phaserp3->box(FL_ROUND_UP_BOX);
      phaserp3->color(FL_BACKGROUND_COLOR);
      phaserp3->selection_color(FL_INACTIVE_COLOR);
      phaserp3->labeltype(FL_NORMAL_LABEL);
      phaserp3->labelfont(1);
      phaserp3->labelsize(11);
      phaserp3->labelcolor(FL_FOREGROUND_COLOR);
      phaserp3->maximum(127);
      phaserp3->align(Fl_Align(FL_ALIGN_BOTTOM));
      phaserp3->when(FL_WHEN_RELEASE);
      o->init("parameter3");
    } // Fl_Osc_Dial* phaserp3
    { Fl_Osc_Choice* o = phaserp4 = new Fl_Osc_Choice(245, 55, 40, 15, "LFO");
      phaserp4->tooltip("LFO function");
      phaserp4->box(FL_UP_BOX);
      phaserp4->down_box(FL_BORDER_BOX);
      phaserp4->color(FL_BACKGROUND_COLOR);
      phaserp4->selection_color(FL_SELECTION_COLOR);
      phaserp4->labeltype(FL_NORMAL_LABEL);
      phaserp4->labelfont(1);
      phaserp4->labelsize(10);
      phaserp4->labelcolor(FL_FOREGROUND_COLOR);
      phaserp4->textsize(8);
      phaserp4->align(Fl_Align(130));
      phaserp4->when(FL_WHEN_RELEASE);
      phaserp4->menu(menu_phaserp4);
      o->init("parameter4");
    } // Fl_Osc_Choice* phaserp4
    { Fl_Osc_Dial* o = phaserp5 = new Fl_Osc_Dial(155, 45, 25, 25, "St.df");
      phaserp5->tooltip("Left/Right Channel Phase Shift");
      phaserp5->box(FL_ROUND_UP_BOX);
      phaserp5->color(FL_BACKGROUND_COLOR);
      phaserp5->selection_color(FL_INACTIVE_COLOR);
      phaserp5->labeltype(FL_NORMAL_LABEL);
      phaserp5->labelfont(1);
      phaserp5->labelsize(11);
      phaserp5->labelcolor(FL_FOREGROUND_COLOR);
      phaserp5->maximum(127);
      phaserp5->align(Fl_Align(FL_ALIGN_BOTTOM));
      phaserp5->when(FL_WHEN_CHANGED);
      o->init("parameter5");
    } // Fl_Osc_Dial* phaserp5
    { Fl_Osc_Dial* o = phaserp6 = new Fl_Osc_Dial(120, 5, 25, 25, "Dpth");
      phaserp6->tooltip("LFO Depth");
      phaserp6->box(FL_ROUND_UP_BOX);
      phaserp6->color(FL_BACKGROUND_COLOR);
      phaserp6->selection_color(FL_INACTIVE_COLOR);
      phaserp6->labeltype(FL_NORMAL_LABEL);
      phaserp6->labelfont(1);
      phaserp6->labelsize(10);
      phaserp6->labelcolor(FL_FOREGROUND_COLOR);
      phaserp6->maximum(127);
      phaserp6->align(Fl_Align(FL_ALIGN_BOTTOM));
      phaserp6->when(FL_WHEN_CHANGED);
      o->init("parameter6");
    } // Fl_Osc_Dial* phaserp6
    { Fl_Osc_Dial* o = phaserp7 = new Fl_Osc_Dial(185, 45, 25, 25, "Fb");
      phaserp7->tooltip("Feedback");
      phaserp7->box(FL_ROUND_UP_BOX);
      phaserp7->color(FL_BACKGROUND_COLOR);
      phaserp7->selection_color(FL_INACTIVE_COLOR);
      phaserp7->labeltype(FL_NORMAL_LABEL);
      phaserp7->labelfont(1);
      phaserp7->labelsize(11);
      phaserp7->labelcolor(FL_FOREGROUND_COLOR);
      phaserp7->maximum(127);
      phaserp7->align(Fl_Align(FL_ALIGN_BOTTOM));
      phaserp7->when(FL_WHEN_CHANGED);
      o->init("parameter7");
    } // Fl_Osc_Dial* phaserp7
    { Fl_Osc_Counter* o = phaserp8 = new Fl_Osc_Counter(290, 55, 35, 15, "Stages");
      phaserp8->type(1);
      phaserp8->box(FL_UP_BOX);
      phaserp8->color(FL_BACKGROUND_COLOR);
      phaserp8->selection_color(FL_INACTIVE_COLOR);
      phaserp8->labeltype(FL_NORMAL_LABEL);
      phaserp8->labelfont(1);
      phaserp8->labelsize(11);
      phaserp8->labelcolor(FL_FOREGROUND_COLOR);
      phaserp8->minimum(0);
      phaserp8->maximum(127);
      phaserp8->step(1);
      phaserp8->align(Fl_Align(FL_ALIGN_BOTTOM));
      phaserp8->when(FL_WHEN_CHANGED);
      o->range(1,MAX_PHASER_STAGES);
      o->init("parameter8");
    } // Fl_Osc_Counter* phaserp8
    { Fl_Osc_Dial* o = phaserp9 = new Fl_Osc_Dial(215, 45, 25, 25, "L/R");
      phaserp9->tooltip("Channel Routing");
      phaserp9->box(FL_ROUND_UP_BOX);
      phaserp9->color(FL_BACKGROUND_COLOR);
      phaserp9->selection_color(FL_INACTIVE_COLOR);
      phaserp9->labeltype(FL_NORMAL_LABEL);
      phaserp9->labelfont(1);
      phaserp9->labelsize(11);
      phaserp9->labelcolor(FL_FOREGROUND_COLOR);
      phaserp9->maximum(127);
      phaserp9->align(Fl_Align(FL_ALIGN_BOTTOM));
      phaserp9->when(FL_WHEN_CHANGED);
      o->init("parameter9");
    } // Fl_Osc_Dial* phaserp9
    { Fl_Osc_Check* o = phaserp10 = new Fl_Osc_Check(200, 10, 74, 20, "Subtract");
      phaserp10->tooltip("inverts output");
      phaserp10->box(FL_THIN_UP_BOX);
      phaserp10->down_box(FL_DOWN_BOX);
      phaserp10->color((Fl_Color)51);
      phaserp10->selection_color(FL_FOREGROUND_COLOR);
      phaserp10->labeltype(FL_NORMAL_LABEL);
      phaserp10->labelfont(1);
      phaserp10->labelsize(10);
      phaserp10->labelcolor(FL_FOREGROUND_COLOR);
      phaserp10->align(Fl_Align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE));
      phaserp10->when(FL_WHEN_RELEASE);
      o->init("parameter10");
    } // Fl_Osc_Check* phaserp10
    { Fl_Osc_Dial* o = phaserp11 = new Fl_Osc_Dial(155, 5, 25, 25, "Phase");
      phaserp11->box(FL_ROUND_UP_BOX);
      phaserp11->color(FL_BACKGROUND_COLOR);
      phaserp11->selection_color(FL_INACTIVE_COLOR);
      phaserp11->labeltype(FL_NORMAL_LABEL);
      phaserp11->labelfont(1);
      phaserp11->labelsize(10);
      phaserp11->labelcolor(FL_FOREGROUND_COLOR);
      phaserp11->maximum(127);
      phaserp11->align(Fl_Align(FL_ALIGN_BOTTOM));
      phaserp11->when(FL_WHEN_CHANGED);
      o->init("parameter11");
    } // Fl_Osc_Dial* phaserp11
    { Fl_Osc_Check* o = phaserp12 = new Fl_Osc_Check(245, 35, 55, 15, "hyp.");
      phaserp12->tooltip("hyper");
      phaserp12->box(FL_NO_BOX);
      phaserp12->down_box(FL_DOWN_BOX);
      phaserp12->color(FL_BACKGROUND_COLOR);
      phaserp12->selection_color(FL_FOREGROUND_COLOR);
      phaserp12->labeltype(FL_NORMAL_LABEL);
      phaserp12->labelfont(0);
      phaserp12->labelsize(14);
      phaserp12->labelcolor(FL_FOREGROUND_COLOR);
      phaserp12->align(Fl_Align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE));
      phaserp12->when(FL_WHEN_RELEASE);
      o->init("parameter12");
    } // Fl_Osc_Check* phaserp12
    { Fl_Osc_Dial* o = phaserp13 = new Fl_Osc_Dial(340, 50, 25, 25, "dist");
      phaserp13->tooltip("Distortion");
      phaserp13->box(FL_ROUND_UP_BOX);
      phaserp13->color(FL_BACKGROUND_COLOR);
      phaserp13->selection_color(FL_INACTIVE_COLOR);
      phaserp13->labeltype(FL_NORMAL_LABEL);
      phaserp13->labelfont(1);
      phaserp13->labelsize(11);
      phaserp13->labelcolor(FL_FOREGROUND_COLOR);
      phaserp13->maximum(127);
      phaserp13->align(Fl_Align(FL_ALIGN_BOTTOM));
      phaserp13->when(FL_WHEN_CHANGED);
      o->init("parameter13");
    } // Fl_Osc_Dial* phaserp13
    { Fl_Osc_Check* o = phaserp14 = new Fl_Osc_Check(305, 35, 70, 15, "Analog");
      phaserp14->box(FL_NO_BOX);
      phaserp14->down_box(FL_DOWN_BOX);
      phaserp14->color(FL_BACKGROUND_COLOR);
      phaserp14->selection_color(FL_FOREGROUND_COLOR);
      phaserp14->labeltype(FL_NORMAL_LABEL);
      phaserp14->labelfont(0);
      phaserp14->labelsize(14);
      phaserp14->labelcolor(FL_FOREGROUND_COLOR);
      phaserp14->align(Fl_Align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE));
      phaserp14->when(FL_WHEN_RELEASE);
      o->init("parameter14");
    } // Fl_Osc_Check* phaserp14
    set_module_parameters(o);
    effphaserwindow->end();
  } // Fl_Group* effphaserwindow
  return effphaserwindow;
}

Fl_Group* EffUI::make_alienwah_window() {
  { Fl_Group* o = effalienwahwindow = new Fl_Group(0, 0, 380, 100);
    effalienwahwindow->box(FL_UP_BOX);
    effalienwahwindow->color((Fl_Color)221);
    effalienwahwindow->selection_color(FL_BACKGROUND_COLOR);
    effalienwahwindow->labeltype(FL_NO_LABEL);
    effalienwahwindow->labelfont(1);
    effalienwahwindow->labelsize(19);
    effalienwahwindow->labelcolor(FL_FOREGROUND_COLOR);
    effalienwahwindow->user_data((void*)(this));
    effalienwahwindow->align(Fl_Align(FL_ALIGN_TOP));
    effalienwahwindow->when(FL_WHEN_RELEASE);
    { Fl_Osc_Choice* o = awp = new Fl_Osc_Choice(10, 15, 90, 15, "Preset");
      awp->box(FL_UP_BOX);
      awp->down_box(FL_BORDER_BOX);
      awp->color((Fl_Color)14);
      awp->selection_color(FL_BACKGROUND2_COLOR);
      awp->labeltype(FL_NORMAL_LABEL);
      awp->labelfont(1);
      awp->labelsize(10);
      awp->labelcolor(FL_FOREGROUND_COLOR);
      awp->textfont(1);
      awp->textsize(10);
      awp->align(Fl_Align(FL_ALIGN_TOP_LEFT));
      awp->when(FL_WHEN_RELEASE);
      awp->menu(menu_awp);
      o->init("preset");
    } // Fl_Osc_Choice* awp
    { Fl_Osc_Dial* o = awp0 = new Fl_Osc_Dial(10, 40, 30, 30, "Vol");
      awp0->tooltip("Effect Volume");
      awp0->box(FL_ROUND_UP_BOX);
      awp0->color(FL_BACKGROUND_COLOR);
      awp0->selection_color(FL_INACTIVE_COLOR);
      awp0->labeltype(FL_NORMAL_LABEL);
      awp0->labelfont(1);
      awp0->labelsize(11);
      awp0->labelcolor(FL_FOREGROUND_COLOR);
      awp0->maximum(127);
      awp0->align(Fl_Align(FL_ALIGN_BOTTOM));
      awp0->when(FL_WHEN_CHANGED);
      o->init("parameter0");
    } // Fl_Osc_Dial* awp0
    { Fl_Osc_Dial* o = awp1 = new Fl_Osc_Dial(45, 40, 30, 30, "Pan");
      awp1->box(FL_ROUND_UP_BOX);
      awp1->color(FL_BACKGROUND_COLOR);
      awp1->selection_color(FL_INACTIVE_COLOR);
      awp1->labeltype(FL_NORMAL_LABEL);
      awp1->labelfont(1);
      awp1->labelsize(11);
      awp1->labelcolor(FL_FOREGROUND_COLOR);
      awp1->maximum(127);
      awp1->align(Fl_Align(FL_ALIGN_BOTTOM));
      awp1->when(FL_WHEN_CHANGED);
      o->init("parameter1");
    } // Fl_Osc_Dial* awp1
    { Fl_Osc_Dial* o = awp2 = new Fl_Osc_Dial(85, 40, 30, 30, "Freq");
      awp2->tooltip("LFO Frequency");
      awp2->box(FL_ROUND_UP_BOX);
      awp2->color(FL_BACKGROUND_COLOR);
      awp2->selection_color(FL_INACTIVE_COLOR);
      awp2->labeltype(FL_NORMAL_LABEL);
      awp2->labelfont(1);
      awp2->labelsize(11);
      awp2->labelcolor(FL_FOREGROUND_COLOR);
      awp2->maximum(127);
      awp2->align(Fl_Align(FL_ALIGN_BOTTOM));
      awp2->when(FL_WHEN_CHANGED);
      o->init("parameter2");
    } // Fl_Osc_Dial* awp2
    { Fl_Osc_Dial* o = awp3 = new Fl_Osc_Dial(120, 40, 30, 30, "Rnd");
      awp3->tooltip("LFO Randomness");
      awp3->box(FL_ROUND_UP_BOX);
      awp3->color(FL_BACKGROUND_COLOR);
      awp3->selection_color(FL_INACTIVE_COLOR);
      awp3->labeltype(FL_NORMAL_LABEL);
      awp3->labelfont(1);
      awp3->labelsize(11);
      awp3->labelcolor(FL_FOREGROUND_COLOR);
      awp3->maximum(127);
      awp3->align(Fl_Align(FL_ALIGN_BOTTOM));
      awp3->when(FL_WHEN_RELEASE);
      o->init("parameter3");
    } // Fl_Osc_Dial* awp3
    { Fl_Osc_Dial* o = awp5 = new Fl_Osc_Dial(200, 40, 30, 30, "St.df");
      awp5->tooltip("Left/Right Channel Phase Shift");
      awp5->box(FL_ROUND_UP_BOX);
      awp5->color(FL_BACKGROUND_COLOR);
      awp5->selection_color(FL_INACTIVE_COLOR);
      awp5->labeltype(FL_NORMAL_LABEL);
      awp5->labelfont(1);
      awp5->labelsize(11);
      awp5->labelcolor(FL_FOREGROUND_COLOR);
      awp5->maximum(127);
      awp5->align(Fl_Align(FL_ALIGN_BOTTOM));
      awp5->when(FL_WHEN_CHANGED);
      o->init("parameter5");
    } // Fl_Osc_Dial* awp5
    { Fl_Osc_Dial* o = awp6 = new Fl_Osc_Dial(235, 40, 30, 30, "Dpth");
      awp6->tooltip("Depth");
      awp6->box(FL_ROUND_UP_BOX);
      awp6->color(FL_BACKGROUND_COLOR);
      awp6->selection_color(FL_INACTIVE_COLOR);
      awp6->labeltype(FL_NORMAL_LABEL);
      awp6->labelfont(1);
      awp6->labelsize(11);
      awp6->labelcolor(FL_FOREGROUND_COLOR);
      awp6->maximum(127);
      awp6->align(Fl_Align(FL_ALIGN_BOTTOM));
      awp6->when(FL_WHEN_CHANGED);
      o->init("parameter6");
    } // Fl_Osc_Dial* awp6
    { Fl_Osc_Dial* o = awp7 = new Fl_Osc_Dial(270, 40, 30, 30, "Fb");
      awp7->tooltip("Feedback");
      awp7->box(FL_ROUND_UP_BOX);
      awp7->color(FL_BACKGROUND_COLOR);
      awp7->selection_color(FL_INACTIVE_COLOR);
      awp7->labeltype(FL_NORMAL_LABEL);
      awp7->labelfont(1);
      awp7->labelsize(11);
      awp7->labelcolor(FL_FOREGROUND_COLOR);
      awp7->maximum(127);
      awp7->align(Fl_Align(FL_ALIGN_BOTTOM));
      awp7->when(FL_WHEN_CHANGED);
      o->init("parameter7");
    } // Fl_Osc_Dial* awp7
    { Fl_Osc_Dial* o = awp9 = new Fl_Osc_Dial(345, 40, 30, 30, "L/R");
      awp9->box(FL_ROUND_UP_BOX);
      awp9->color(FL_BACKGROUND_COLOR);
      awp9->selection_color(FL_INACTIVE_COLOR);
      awp9->labeltype(FL_NORMAL_LABEL);
      awp9->labelfont(1);
      awp9->labelsize(11);
      awp9->labelcolor(FL_FOREGROUND_COLOR);
      awp9->maximum(127);
      awp9->align(Fl_Align(FL_ALIGN_BOTTOM));
      awp9->when(FL_WHEN_CHANGED);
      o->init("parameter9");
    } // Fl_Osc_Dial* awp9
    { Fl_Osc_Choice* o = awp4 = new Fl_Osc_Choice(155, 50, 40, 15, "LFO type");
      awp4->tooltip("LFO function");
      awp4->box(FL_UP_BOX);
      awp4->down_box(FL_BORDER_BOX);
      awp4->color(FL_BACKGROUND_COLOR);
      awp4->selection_color(FL_SELECTION_COLOR);
      awp4->labeltype(FL_NORMAL_LABEL);
      awp4->labelfont(1);
      awp4->labelsize(10);
      awp4->labelcolor(FL_FOREGROUND_COLOR);
      awp4->textsize(8);
      awp4->align(Fl_Align(130));
      awp4->when(FL_WHEN_RELEASE);
      awp4->menu(menu_awp4);
      o->init("parameter4");
    } // Fl_Osc_Choice* awp4
    { Fl_Osc_Dial* o = awp10 = new Fl_Osc_Dial(160, 5, 30, 30, "Phase");
      awp10->box(FL_ROUND_UP_BOX);
      awp10->color(FL_BACKGROUND_COLOR);
      awp10->selection_color(FL_INACTIVE_COLOR);
      awp10->labeltype(FL_NORMAL_LABEL);
      awp10->labelfont(1);
      awp10->labelsize(11);
      awp10->labelcolor(FL_FOREGROUND_COLOR);
      awp10->maximum(127);
      awp10->align(Fl_Align(FL_ALIGN_BOTTOM));
      awp10->when(FL_WHEN_CHANGED);
      o->init("parameter10");
    } // Fl_Osc_Dial* awp10
    { Fl_Osc_Counter* o = awp8 = new Fl_Osc_Counter(305, 55, 35, 15, "Delay");
      awp8->type(1);
      awp8->box(FL_UP_BOX);
      awp8->color(FL_BACKGROUND_COLOR);
      awp8->selection_color(FL_INACTIVE_COLOR);
      awp8->labeltype(FL_NORMAL_LABEL);
      awp8->labelfont(1);
      awp8->labelsize(11);
      awp8->labelcolor(FL_FOREGROUND_COLOR);
      awp8->minimum(0);
      awp8->maximum(127);
      awp8->step(1);
      awp8->align(Fl_Align(FL_ALIGN_BOTTOM));
      awp8->when(FL_WHEN_CHANGED);
      o->range(1,MAX_ALIENWAH_DELAY);
      o->init("parameter8");
    } // Fl_Osc_Counter* awp8
    set_module_parameters(o);
    effalienwahwindow->end();
  } // Fl_Group* effalienwahwindow
  return effalienwahwindow;
}

Fl_Group* EffUI::make_distorsion_window() {
  { Fl_Group* o = effdistorsionwindow = new Fl_Group(0, 0, 380, 100);
    effdistorsionwindow->box(FL_UP_BOX);
    effdistorsionwindow->color((Fl_Color)221);
    effdistorsionwindow->selection_color(FL_BACKGROUND_COLOR);
    effdistorsionwindow->labeltype(FL_NO_LABEL);
    effdistorsionwindow->labelfont(1);
    effdistorsionwindow->labelsize(19);
    effdistorsionwindow->labelcolor(FL_FOREGROUND_COLOR);
    effdistorsionwindow->user_data((void*)(this));
    effdistorsionwindow->align(Fl_Align(FL_ALIGN_TOP));
    effdistorsionwindow->when(FL_WHEN_RELEASE);
    { Fl_Osc_Choice* o = distp = new Fl_Osc_Choice(11, 15, 95, 15, "Preset");
      distp->box(FL_UP_BOX);
      distp->down_box(FL_BORDER_BOX);
      distp->color((Fl_Color)14);
      distp->selection_color(FL_BACKGROUND2_COLOR);
      distp->labeltype(FL_NORMAL_LABEL);
      distp->labelfont(1);
      distp->labelsize(10);
      distp->labelcolor(FL_FOREGROUND_COLOR);
      distp->textfont(1);
      distp->textsize(10);
      distp->align(Fl_Align(FL_ALIGN_TOP_LEFT));
      distp->when(FL_WHEN_RELEASE);
      distp->menu(menu_distp);
      o->init("preset");
    } // Fl_Osc_Choice* distp
    { Fl_Osc_Dial* o = distp0 = new Fl_Osc_Dial(10, 40, 30, 30, "Vol");
      distp0->tooltip("Effect Volume");
      distp0->box(FL_ROUND_UP_BOX);
      distp0->color(FL_BACKGROUND_COLOR);
      distp0->selection_color(FL_INACTIVE_COLOR);
      distp0->labeltype(FL_NORMAL_LABEL);
      distp0->labelfont(1);
      distp0->labelsize(11);
      distp0->labelcolor(FL_FOREGROUND_COLOR);
      distp0->maximum(127);
      distp0->align(Fl_Align(FL_ALIGN_BOTTOM));
      distp0->when(FL_WHEN_CHANGED);
      o->init("parameter0");
    } // Fl_Osc_Dial* distp0
    { Fl_Osc_Dial* o = distp1 = new Fl_Osc_Dial(45, 40, 30, 30, "Pan");
      distp1->box(FL_ROUND_UP_BOX);
      distp1->color(FL_BACKGROUND_COLOR);
      distp1->selection_color(FL_INACTIVE_COLOR);
      distp1->labeltype(FL_NORMAL_LABEL);
      distp1->labelfont(1);
      distp1->labelsize(11);
      distp1->labelcolor(FL_FOREGROUND_COLOR);
      distp1->maximum(127);
      distp1->align(Fl_Align(FL_ALIGN_BOTTOM));
      distp1->when(FL_WHEN_CHANGED);
      o->init("parameter1");
    } // Fl_Osc_Dial* distp1
    { Fl_Osc_Dial* o = distp2 = new Fl_Osc_Dial(80, 40, 30, 30, "LRc.");
      distp2->tooltip("L/R Mix");
      distp2->box(FL_ROUND_UP_BOX);
      distp2->color(FL_BACKGROUND_COLOR);
      distp2->selection_color(FL_INACTIVE_COLOR);
      distp2->labeltype(FL_NORMAL_LABEL);
      distp2->labelfont(1);
      distp2->labelsize(11);
      distp2->labelcolor(FL_FOREGROUND_COLOR);
      distp2->maximum(127);
      distp2->align(Fl_Align(FL_ALIGN_BOTTOM));
      distp2->when(FL_WHEN_RELEASE);
      o->init("parameter2");
    } // Fl_Osc_Dial* distp2
    { Fl_Osc_Dial* o = distp3 = new Fl_Osc_Dial(120, 40, 30, 30, "Drive");
      distp3->tooltip("Input Amplification");
      distp3->box(FL_ROUND_UP_BOX);
      distp3->color(FL_BACKGROUND_COLOR);
      distp3->selection_color(FL_INACTIVE_COLOR);
      distp3->labeltype(FL_NORMAL_LABEL);
      distp3->labelfont(1);
      distp3->labelsize(11);
      distp3->labelcolor(FL_FOREGROUND_COLOR);
      distp3->maximum(127);
      distp3->align(Fl_Align(FL_ALIGN_BOTTOM));
      distp3->when(FL_WHEN_RELEASE);
      o->init("parameter3");
    } // Fl_Osc_Dial* distp3
    { Fl_Osc_Dial* o = distp4 = new Fl_Osc_Dial(155, 40, 30, 30, "Level");
      distp4->tooltip("Output Amplification");
      distp4->box(FL_ROUND_UP_BOX);
      distp4->color(FL_BACKGROUND_COLOR);
      distp4->selection_color(FL_INACTIVE_COLOR);
      distp4->labeltype(FL_NORMAL_LABEL);
      distp4->labelfont(1);
      distp4->labelsize(11);
      distp4->labelcolor(FL_FOREGROUND_COLOR);
      distp4->maximum(127);
      distp4->align(Fl_Align(FL_ALIGN_BOTTOM));
      distp4->when(FL_WHEN_CHANGED);
      o->init("parameter4");
    } // Fl_Osc_Dial* distp4
    { Fl_Osc_Dial* o = distp7 = new Fl_Osc_Dial(285, 40, 30, 30, "LPF");
      distp7->tooltip("Low Pass Filter");
      distp7->box(FL_ROUND_UP_BOX);
      distp7->color(FL_BACKGROUND_COLOR);
      distp7->selection_color(FL_INACTIVE_COLOR);
      distp7->labeltype(FL_NORMAL_LABEL);
      distp7->labelfont(1);
      distp7->labelsize(11);
      distp7->labelcolor(FL_FOREGROUND_COLOR);
      distp7->maximum(127);
      distp7->align(Fl_Align(FL_ALIGN_BOTTOM));
      distp7->when(FL_WHEN_CHANGED);
      o->init("parameter7");
    } // Fl_Osc_Dial* distp7
    { Fl_Osc_Dial* o = distp8 = new Fl_Osc_Dial(320, 40, 30, 30, "HPF");
      distp8->tooltip("High Pass Filter");
      distp8->box(FL_ROUND_UP_BOX);
      distp8->color(FL_BACKGROUND_COLOR);
      distp8->selection_color(FL_INACTIVE_COLOR);
      distp8->labeltype(FL_NORMAL_LABEL);
      distp8->labelfont(1);
      distp8->labelsize(11);
      distp8->labelcolor(FL_FOREGROUND_COLOR);
      distp8->maximum(127);
      distp8->align(Fl_Align(FL_ALIGN_BOTTOM));
      distp8->when(FL_WHEN_CHANGED);
      o->init("parameter8");
    } // Fl_Osc_Dial* distp8
    { Fl_Osc_Choice* o = distp5 = new Fl_Osc_Choice(190, 50, 60, 20, "Type");
      distp5->box(FL_UP_BOX);
      distp5->down_box(FL_BORDER_BOX);
      distp5->color(FL_BACKGROUND_COLOR);
      distp5->selection_color(FL_SELECTION_COLOR);
      distp5->labeltype(FL_NORMAL_LABEL);
      distp5->labelfont(1);
      distp5->labelsize(11);
      distp5->labelcolor(FL_FOREGROUND_COLOR);
      distp5->textsize(10);
      distp5->align(Fl_Align(FL_ALIGN_BOTTOM));
      distp5->when(FL_WHEN_RELEASE);
      distp5->menu(menu_distp5);
      o->init("parameter5");
    } // Fl_Osc_Choice* distp5
    { Fl_Osc_Check* o = distp6 = new Fl_Osc_Check(260, 55, 15, 15, "Neg.");
      distp6->box(FL_NO_BOX);
      distp6->down_box(FL_DOWN_BOX);
      distp6->color(FL_BACKGROUND_COLOR);
      distp6->selection_color(FL_FOREGROUND_COLOR);
      distp6->labeltype(FL_NORMAL_LABEL);
      distp6->labelfont(1);
      distp6->labelsize(11);
      distp6->labelcolor(FL_FOREGROUND_COLOR);
      distp6->align(Fl_Align(FL_ALIGN_BOTTOM));
      distp6->when(FL_WHEN_RELEASE);
      o->init("parameter6");
    } // Fl_Osc_Check* distp6
    { Fl_Osc_Check* o = distp9 = new Fl_Osc_Check(355, 60, 15, 15, "St.");
      distp9->tooltip("Stereo");
      distp9->box(FL_NO_BOX);
      distp9->down_box(FL_DOWN_BOX);
      distp9->color(FL_BACKGROUND_COLOR);
      distp9->selection_color(FL_FOREGROUND_COLOR);
      distp9->labeltype(FL_NORMAL_LABEL);
      distp9->labelfont(1);
      distp9->labelsize(11);
      distp9->labelcolor(FL_FOREGROUND_COLOR);
      distp9->align(Fl_Align(FL_ALIGN_BOTTOM));
      distp9->when(FL_WHEN_RELEASE);
      o->init("parameter9");
    } // Fl_Osc_Check* distp9
    { Fl_Osc_Check* o = distp10 = new Fl_Osc_Check(355, 44, 15, 15, "PF");
      distp10->tooltip("Applies the filters(before or after) the distorsion");
      distp10->box(FL_NO_BOX);
      distp10->down_box(FL_DOWN_BOX);
      distp10->color(FL_BACKGROUND_COLOR);
      distp10->selection_color(FL_FOREGROUND_COLOR);
      distp10->labeltype(FL_NORMAL_LABEL);
      distp10->labelfont(1);
      distp10->labelsize(11);
      distp10->labelcolor(FL_FOREGROUND_COLOR);
      distp10->align(Fl_Align(FL_ALIGN_TOP));
      distp10->when(FL_WHEN_RELEASE);
      o->init("parameter10");
    } // Fl_Osc_Check* distp10
    set_module_parameters(o);
    effdistorsionwindow->end();
  } // Fl_Group* effdistorsionwindow
  return effdistorsionwindow;
}

Fl_Group* EffUI::make_eq_window() {
  { Fl_Group* o = effeqwindow = new Fl_Group(0, 0, 380, 100);
    effeqwindow->box(FL_UP_BOX);
    effeqwindow->color((Fl_Color)221);
    effeqwindow->selection_color(FL_BACKGROUND_COLOR);
    effeqwindow->labeltype(FL_NO_LABEL);
    effeqwindow->labelfont(1);
    effeqwindow->labelsize(19);
    effeqwindow->labelcolor(FL_FOREGROUND_COLOR);
    effeqwindow->user_data((void*)(this));
    effeqwindow->align(Fl_Align(FL_ALIGN_TOP));
    effeqwindow->when(FL_WHEN_RELEASE);
    { Fl_Osc_Dial* o = eqp0 = new Fl_Osc_Dial(10, 35, 30, 30, "Gain");
      eqp0->box(FL_ROUND_UP_BOX);
      eqp0->color(FL_BACKGROUND_COLOR);
      eqp0->selection_color(FL_INACTIVE_COLOR);
      eqp0->labeltype(FL_NORMAL_LABEL);
      eqp0->labelfont(1);
      eqp0->labelsize(11);
      eqp0->labelcolor(FL_FOREGROUND_COLOR);
      eqp0->maximum(127);
      eqp0->callback((Fl_Callback*)cb_eqp0);
      eqp0->align(Fl_Align(FL_ALIGN_BOTTOM));
      eqp0->when(FL_WHEN_CHANGED);
      o->init("parameter0");
    } // Fl_Osc_Dial* eqp0
    { Fl_Counter* o = bandcounter = new Fl_Counter(240, 20, 45, 15, "B.");
      bandcounter->tooltip("Band no.");
      bandcounter->type(1);
      bandcounter->labelfont(1);
      bandcounter->labelsize(11);
      bandcounter->minimum(0);
      bandcounter->maximum(1);
      bandcounter->step(1);
      bandcounter->textfont(1);
      bandcounter->textsize(11);
      bandcounter->callback((Fl_Callback*)cb_bandcounter);
      bandcounter->align(Fl_Align(FL_ALIGN_TOP));
      o->bounds(0,MAX_EQ_BANDS-1);
    } // Fl_Counter* bandcounter
    { bandgroup = new Fl_Group(245, 40, 130, 50);
      bandgroup->box(FL_ENGRAVED_FRAME);
      { Fl_Osc_Dial* o = freqdial = new Fl_Osc_Dial(250, 50, 25, 25, "Freq");
        freqdial->box(FL_ROUND_UP_BOX);
        freqdial->color(FL_BACKGROUND_COLOR);
        freqdial->selection_color(FL_INACTIVE_COLOR);
        freqdial->labeltype(FL_NORMAL_LABEL);
        freqdial->labelfont(1);
        freqdial->labelsize(10);
        freqdial->labelcolor(FL_FOREGROUND_COLOR);
        freqdial->maximum(127);
        freqdial->callback((Fl_Callback*)cb_freqdial);
        freqdial->align(Fl_Align(FL_ALIGN_BOTTOM));
        freqdial->when(3);
        o->init("parameter11");
      } // Fl_Osc_Dial* freqdial
      { Fl_Osc_Dial* o = gaindial = new Fl_Osc_Dial(280, 50, 25, 25, "Gain");
        gaindial->box(FL_ROUND_UP_BOX);
        gaindial->color(FL_BACKGROUND_COLOR);
        gaindial->selection_color(FL_INACTIVE_COLOR);
        gaindial->labeltype(FL_NORMAL_LABEL);
        gaindial->labelfont(1);
        gaindial->labelsize(10);
        gaindial->labelcolor(FL_FOREGROUND_COLOR);
        gaindial->maximum(127);
        gaindial->step(1);
        gaindial->callback((Fl_Callback*)cb_gaindial);
        gaindial->align(Fl_Align(FL_ALIGN_BOTTOM));
        gaindial->when(3);
        o->init("parameter12");
      } // Fl_Osc_Dial* gaindial
      { Fl_Osc_Dial* o = qdial = new Fl_Osc_Dial(310, 50, 25, 25, "Q");
        qdial->tooltip("Resonance/Bandwidth");
        qdial->box(FL_ROUND_UP_BOX);
        qdial->color(FL_BACKGROUND_COLOR);
        qdial->selection_color(FL_INACTIVE_COLOR);
        qdial->labeltype(FL_NORMAL_LABEL);
        qdial->labelfont(1);
        qdial->labelsize(10);
        qdial->labelcolor(FL_FOREGROUND_COLOR);
        qdial->maximum(127);
        qdial->callback((Fl_Callback*)cb_qdial);
        qdial->align(Fl_Align(FL_ALIGN_BOTTOM));
        qdial->when(3);
        o->init("parameter13");
      } // Fl_Osc_Dial* qdial
      { Fl_Osc_Counter* o = stagescounter = new Fl_Osc_Counter(340, 60, 30, 15, "St.");
        stagescounter->tooltip("Additional filter stages");
        stagescounter->type(1);
        stagescounter->box(FL_UP_BOX);
        stagescounter->color(FL_BACKGROUND_COLOR);
        stagescounter->selection_color(FL_INACTIVE_COLOR);
        stagescounter->labeltype(FL_NORMAL_LABEL);
        stagescounter->labelfont(1);
        stagescounter->labelsize(10);
        stagescounter->labelcolor(FL_FOREGROUND_COLOR);
        stagescounter->minimum(0);
        stagescounter->maximum(127);
        stagescounter->step(1);
        stagescounter->textfont(1);
        stagescounter->textsize(11);
        stagescounter->callback((Fl_Callback*)cb_stagescounter);
        stagescounter->align(Fl_Align(FL_ALIGN_BOTTOM));
        stagescounter->when(FL_WHEN_CHANGED);
        o->init("parameter14");
      } // Fl_Osc_Counter* stagescounter
      bandgroup->end();
    } // Fl_Group* bandgroup
    { Fl_Osc_Choice* o = typechoice = new Fl_Osc_Choice(290, 20, 40, 15, "T.");
      typechoice->tooltip("Type");
      typechoice->box(FL_UP_BOX);
      typechoice->down_box(FL_BORDER_BOX);
      typechoice->color(FL_BACKGROUND_COLOR);
      typechoice->selection_color(FL_SELECTION_COLOR);
      typechoice->labeltype(FL_NORMAL_LABEL);
      typechoice->labelfont(1);
      typechoice->labelsize(10);
      typechoice->labelcolor(FL_FOREGROUND_COLOR);
      typechoice->textsize(10);
      typechoice->callback((Fl_Callback*)cb_typechoice);
      typechoice->align(Fl_Align(FL_ALIGN_TOP));
      typechoice->when(FL_WHEN_RELEASE_ALWAYS);
      typechoice->menu(menu_typechoice);
      o->init("parameter15");
    } // Fl_Osc_Choice* typechoice
    { eqgraph = new Fl_EQGraph(45, 10, 190, 75);
      eqgraph->box(FL_BORDER_BOX);
      eqgraph->color(FL_LIGHT1);
      eqgraph->selection_color(FL_BACKGROUND_COLOR);
      eqgraph->labeltype(FL_NORMAL_LABEL);
      eqgraph->labelfont(0);
      eqgraph->labelsize(14);
      eqgraph->labelcolor(FL_FOREGROUND_COLOR);
      eqgraph->align(Fl_Align(FL_ALIGN_CENTER));
      eqgraph->when(FL_WHEN_RELEASE);
    } // Fl_EQGraph* eqgraph
    set_module_parameters(o);
    effeqwindow->end();
  } // Fl_Group* effeqwindow
  return effeqwindow;
}

Fl_Group* EffUI::make_dynamicfilter_window() {
  { Fl_Group* o = effdynamicfilterwindow = new Fl_Group(0, 0, 380, 100);
    effdynamicfilterwindow->box(FL_UP_BOX);
    effdynamicfilterwindow->color((Fl_Color)221);
    effdynamicfilterwindow->selection_color(FL_BACKGROUND_COLOR);
    effdynamicfilterwindow->labeltype(FL_NO_LABEL);
    effdynamicfilterwindow->labelfont(1);
    effdynamicfilterwindow->labelsize(19);
    effdynamicfilterwindow->labelcolor(FL_FOREGROUND_COLOR);
    effdynamicfilterwindow->user_data((void*)(this));
    effdynamicfilterwindow->align(Fl_Align(FL_ALIGN_TOP));
    effdynamicfilterwindow->when(FL_WHEN_RELEASE);
    { Fl_Osc_Choice* o = dfp = new Fl_Osc_Choice(10, 15, 90, 15, "Preset");
      dfp->box(FL_UP_BOX);
      dfp->down_box(FL_BORDER_BOX);
      dfp->color((Fl_Color)14);
      dfp->selection_color(FL_BACKGROUND2_COLOR);
      dfp->labeltype(FL_NORMAL_LABEL);
      dfp->labelfont(1);
      dfp->labelsize(10);
      dfp->labelcolor(FL_FOREGROUND_COLOR);
      dfp->textfont(1);
      dfp->textsize(10);
      dfp->align(Fl_Align(FL_ALIGN_TOP_LEFT));
      dfp->when(FL_WHEN_RELEASE);
      dfp->menu(menu_dfp);
      o->init("preset");
    } // Fl_Osc_Choice* dfp
    { Fl_Osc_Dial* o = dfp0 = new Fl_Osc_Dial(10, 40, 30, 30, "Vol");
      dfp0->tooltip("Effect Volume");
      dfp0->box(FL_ROUND_UP_BOX);
      dfp0->color(FL_BACKGROUND_COLOR);
      dfp0->selection_color(FL_INACTIVE_COLOR);
      dfp0->labeltype(FL_NORMAL_LABEL);
      dfp0->labelfont(1);
      dfp0->labelsize(11);
      dfp0->labelcolor(FL_FOREGROUND_COLOR);
      dfp0->maximum(127);
      dfp0->align(Fl_Align(FL_ALIGN_BOTTOM));
      dfp0->when(FL_WHEN_CHANGED);
      o->init("parameter0");
    } // Fl_Osc_Dial* dfp0
    { Fl_Osc_Dial* o = dfp1 = new Fl_Osc_Dial(45, 40, 30, 30, "Pan");
      dfp1->box(FL_ROUND_UP_BOX);
      dfp1->color(FL_BACKGROUND_COLOR);
      dfp1->selection_color(FL_INACTIVE_COLOR);
      dfp1->labeltype(FL_NORMAL_LABEL);
      dfp1->labelfont(1);
      dfp1->labelsize(11);
      dfp1->labelcolor(FL_FOREGROUND_COLOR);
      dfp1->maximum(127);
      dfp1->align(Fl_Align(FL_ALIGN_BOTTOM));
      dfp1->when(FL_WHEN_CHANGED);
      o->init("parameter1");
    } // Fl_Osc_Dial* dfp1
    { Fl_Osc_Dial* o = dfp2 = new Fl_Osc_Dial(85, 40, 30, 30, "Freq");
      dfp2->tooltip("LFO Frequency");
      dfp2->box(FL_ROUND_UP_BOX);
      dfp2->color(FL_BACKGROUND_COLOR);
      dfp2->selection_color(FL_INACTIVE_COLOR);
      dfp2->labeltype(FL_NORMAL_LABEL);
      dfp2->labelfont(1);
      dfp2->labelsize(11);
      dfp2->labelcolor(FL_FOREGROUND_COLOR);
      dfp2->maximum(127);
      dfp2->align(Fl_Align(FL_ALIGN_BOTTOM));
      dfp2->when(FL_WHEN_CHANGED);
      o->init("parameter2");
    } // Fl_Osc_Dial* dfp2
    { Fl_Osc_Dial* o = dfp3 = new Fl_Osc_Dial(120, 40, 30, 30, "Rnd");
      dfp3->tooltip("LFO Randomness");
      dfp3->box(FL_ROUND_UP_BOX);
      dfp3->color(FL_BACKGROUND_COLOR);
      dfp3->selection_color(FL_INACTIVE_COLOR);
      dfp3->labeltype(FL_NORMAL_LABEL);
      dfp3->labelfont(1);
      dfp3->labelsize(11);
      dfp3->labelcolor(FL_FOREGROUND_COLOR);
      dfp3->maximum(127);
      dfp3->align(Fl_Align(FL_ALIGN_BOTTOM));
      dfp3->when(FL_WHEN_RELEASE);
      o->init("parameter3");
    } // Fl_Osc_Dial* dfp3
    { Fl_Osc_Dial* o = dfp5 = new Fl_Osc_Dial(200, 40, 30, 30, "St.df");
      dfp5->tooltip("Left/Right Channel Phase Shift");
      dfp5->box(FL_ROUND_UP_BOX);
      dfp5->color(FL_BACKGROUND_COLOR);
      dfp5->selection_color(FL_INACTIVE_COLOR);
      dfp5->labeltype(FL_NORMAL_LABEL);
      dfp5->labelfont(1);
      dfp5->labelsize(11);
      dfp5->labelcolor(FL_FOREGROUND_COLOR);
      dfp5->maximum(127);
      dfp5->align(Fl_Align(FL_ALIGN_BOTTOM));
      dfp5->when(FL_WHEN_CHANGED);
      o->init("parameter5");
    } // Fl_Osc_Dial* dfp5
    { Fl_Osc_Dial* o = dfp6 = new Fl_Osc_Dial(235, 40, 30, 30, "LfoD");
      dfp6->tooltip("LFO Depth");
      dfp6->box(FL_ROUND_UP_BOX);
      dfp6->color(FL_BACKGROUND_COLOR);
      dfp6->selection_color(FL_INACTIVE_COLOR);
      dfp6->labeltype(FL_NORMAL_LABEL);
      dfp6->labelfont(1);
      dfp6->labelsize(11);
      dfp6->labelcolor(FL_FOREGROUND_COLOR);
      dfp6->maximum(127);
      dfp6->align(Fl_Align(FL_ALIGN_BOTTOM));
      dfp6->when(FL_WHEN_CHANGED);
      o->init("parameter6");
    } // Fl_Osc_Dial* dfp6
    { Fl_Osc_Choice* o = dfp4 = new Fl_Osc_Choice(155, 50, 40, 15, "LFO type");
      dfp4->tooltip("LFO function");
      dfp4->box(FL_UP_BOX);
      dfp4->down_box(FL_BORDER_BOX);
      dfp4->color(FL_BACKGROUND_COLOR);
      dfp4->selection_color(FL_SELECTION_COLOR);
      dfp4->labeltype(FL_NORMAL_LABEL);
      dfp4->labelfont(1);
      dfp4->labelsize(10);
      dfp4->labelcolor(FL_FOREGROUND_COLOR);
      dfp4->textsize(8);
      dfp4->align(Fl_Align(130));
      dfp4->when(FL_WHEN_RELEASE);
      dfp4->menu(menu_dfp4);
      o->init("parameter4");
    } // Fl_Osc_Choice* dfp4
    { Fl_Button* o = new Fl_Button(115, 10, 55, 25, "Filter");
      o->box(FL_THIN_UP_BOX);
      o->callback((Fl_Callback*)cb_Filter);
    } // Fl_Button* o
    { Fl_Group* o = new Fl_Group(270, 40, 105, 45);
      o->box(FL_UP_FRAME);
      o->color((Fl_Color)51);
      { Fl_Osc_Dial* o = dfp7 = new Fl_Osc_Dial(275, 45, 25, 25, "A.S.");
        dfp7->tooltip("Filter vs Amplitude");
        dfp7->box(FL_ROUND_UP_BOX);
        dfp7->color(FL_BACKGROUND_COLOR);
        dfp7->selection_color(FL_INACTIVE_COLOR);
        dfp7->labeltype(FL_NORMAL_LABEL);
        dfp7->labelfont(1);
        dfp7->labelsize(11);
        dfp7->labelcolor(FL_FOREGROUND_COLOR);
        dfp7->maximum(127);
        dfp7->align(Fl_Align(FL_ALIGN_BOTTOM));
        dfp7->when(FL_WHEN_CHANGED);
        o->init("parameter7");
      } // Fl_Osc_Dial* dfp7
      { Fl_Osc_Dial* o = dfp9 = new Fl_Osc_Dial(305, 45, 25, 25, "A.M");
        dfp9->tooltip("rate that  amplitude changes the filter");
        dfp9->box(FL_ROUND_UP_BOX);
        dfp9->color(FL_BACKGROUND_COLOR);
        dfp9->selection_color(FL_INACTIVE_COLOR);
        dfp9->labeltype(FL_NORMAL_LABEL);
        dfp9->labelfont(1);
        dfp9->labelsize(11);
        dfp9->labelcolor(FL_FOREGROUND_COLOR);
        dfp9->maximum(127);
        dfp9->align(Fl_Align(FL_ALIGN_BOTTOM));
        dfp9->when(FL_WHEN_CHANGED);
        o->init("parameter9");
      } // Fl_Osc_Dial* dfp9
      { Fl_Osc_Check* o = dfp8 = new Fl_Osc_Check(345, 55, 15, 15, "A.Inv.");
        dfp8->tooltip("enable for filter frequency to lower with higher input amplitude");
        dfp8->box(FL_NO_BOX);
        dfp8->down_box(FL_DOWN_BOX);
        dfp8->color(FL_BACKGROUND_COLOR);
        dfp8->selection_color(FL_FOREGROUND_COLOR);
        dfp8->labeltype(FL_NORMAL_LABEL);
        dfp8->labelfont(1);
        dfp8->labelsize(11);
        dfp8->labelcolor(FL_FOREGROUND_COLOR);
        dfp8->align(Fl_Align(FL_ALIGN_BOTTOM));
        dfp8->when(FL_WHEN_RELEASE);
        o->init("parameter8");
      } // Fl_Osc_Check* dfp8
      o->end();
    } // Fl_Group* o
    set_module_parameters(o);
    effdynamicfilterwindow->end();
  } // Fl_Group* effdynamicfilterwindow
  return effdynamicfilterwindow;
}

Fl_Double_Window* EffUI::make_filter_window() {
  { Fl_Double_Window* o = filterwindow = new Fl_Double_Window(290, 110, "Filter Parameters for DynFilter Eff.");
    filterwindow->user_data((void*)(this));
    { FilterUI* o = new FilterUI(5, 5, 275, 75, "DynFilter effect  - Filter");
      o->box(FL_FLAT_BOX);
      o->color(FL_LIGHT1);
      o->selection_color(FL_BACKGROUND_COLOR);
      o->labeltype(FL_NORMAL_LABEL);
      o->labelfont(0);
      o->labelsize(14);
      o->labelcolor(FL_FOREGROUND_COLOR);
      o->align(Fl_Align(FL_ALIGN_WRAP|FL_ALIGN_INSIDE));
      o->when(FL_WHEN_RELEASE);
      o->init("",osc, loc(), "filterpars/");
      o->use_for_dynamic_filter();
      o->end();
    } // FilterUI* o
    { Fl_Button* o = new Fl_Button(105, 85, 70, 20, "Close");
      o->box(FL_THIN_UP_BOX);
      o->callback((Fl_Callback*)cb_Close);
    } // Fl_Button* o
    set_module_parameters(o);
    filterwindow->end();
  } // Fl_Double_Window* filterwindow
  return filterwindow;
}

void EffUI::init(bool ins_) {
  efftype = 0;
      insertion = ins_;
  
  make_null_window();
  make_reverb_window();
  make_echo_window();
  make_chorus_window();
  make_phaser_window();
  make_alienwah_window();
  make_distorsion_window();
  make_eq_window();
  make_dynamicfilter_window();
  
  int px=this->parent()->x();
  int py=this->parent()->y();
  
  effnullwindow->position(px,py);
  effreverbwindow->position(px,py);
  effechowindow->position(px,py);
  effchoruswindow->position(px,py);
  effphaserwindow->position(px,py);
  effalienwahwindow->position(px,py);
  effdistorsionwindow->position(px,py);
  effeqwindow->position(px,py);
  effdynamicfilterwindow->position(px,py);
  
  refresh();
}

void EffUI::refresh() {
  this->hide();
  for(int i=0; i<32; ++i)
      osc->requestValue(loc()+"parameter"+to_s(i));
  
  effnullwindow->hide();
  effreverbwindow->hide();
  effechowindow->hide();
  effchoruswindow->hide();
  effphaserwindow->hide();
  effalienwahwindow->hide();
  effdistorsionwindow->hide();
  effeqwindow->hide();
  effdynamicfilterwindow->hide();
  
  eqband=0;
  
  if (filterwindow){
  	filterwindow->hide();
  	delete(filterwindow);
  	filterwindow=NULL;
  };
  	
      if(insertion) {
          revp0->label("D/W");
          echop0->label("D/W");
          chorusp0->label("D/W");
          phaserp0->label("D/W");
          awp0->label("D/W");
          distp0->label("D/W");
          dfp0->label("D/W");
      }
  
  switch(efftype){
       case 1:
          effreverbwindow->show();
          break; 
       case 2:
  	effechowindow->show();
          break; 
       case 3:
  	effchoruswindow->show();
          break; 
       case 4:
  	effphaserwindow->show();
          break; 
       case 5:
  	effalienwahwindow->show();
          break; 
       case 6:
  	effdistorsionwindow->show();
          break;
       case 7:eqband=0;
  	bandcounter->value(eqband);
  	bandcounter->do_callback();
  	eqgraph->redraw();
  	effeqwindow->show();
          break;
       case 8:make_filter_window();
              
  	effdynamicfilterwindow->show();
  	break;
      default:effnullwindow->show();
              break; 
  };
  
  this->show();
}

Fl_Menu_Item SimpleEffUI::menu_revp1[] = {
 {"Cathedral 1", 0,  0, 0, 0, FL_NORMAL_LABEL, 1, 10, 0},
 {"Cathedral 2", 0,  0, 0, 0, FL_NORMAL_LABEL, 1, 10, 0},
 {"Cathedral 3", 0,  0, 0, 0, FL_NORMAL_LABEL, 1, 10, 0},
 {"Hall 1", 0,  0, 0, 0, FL_NORMAL_LABEL, 1, 10, 0},
 {"Hall 2", 0,  0, 0, 0, FL_NORMAL_LABEL, 1, 10, 0},
 {"Room 1", 0,  0, 0, 0, FL_NORMAL_LABEL, 1, 10, 0},
 {"Room 2", 0,  0, 0, 0, FL_NORMAL_LABEL, 1, 10, 0},
 {"Basement", 0,  0, 0, 0, FL_NORMAL_LABEL, 1, 10, 0},
 {"Tunnel", 0,  0, 0, 0, FL_NORMAL_LABEL, 1, 10, 0},
 {"Echoed 1", 0,  0, 0, 0, FL_NORMAL_LABEL, 1, 10, 0},
 {"Echoed 2", 0,  0, 0, 0, FL_NORMAL_LABEL, 1, 10, 0},
 {"Very Long 1", 0,  0, 0, 0, FL_NORMAL_LABEL, 1, 10, 0},
 {"Very Long 2", 0,  0, 0, 0, FL_NORMAL_LABEL, 1, 10, 0},
 {0,0,0,0,0,0,0,0,0}
};

Fl_Menu_Item SimpleEffUI::menu_echop1[] = {
 {"Echo 1", 0,  0, 0, 0, FL_NORMAL_LABEL, 1, 10, 0},
 {"Echo 2", 0,  0, 0, 0, FL_NORMAL_LABEL, 1, 10, 0},
 {"Echo 3", 0,  0, 0, 0, FL_NORMAL_LABEL, 1, 10, 0},
 {"Simple Echo", 0,  0, 0, 0, FL_NORMAL_LABEL, 1, 10, 0},
 {"Canyon", 0,  0, 0, 0, FL_NORMAL_LABEL, 1, 10, 0},
 {"Panning Echo 1", 0,  0, 0, 0, FL_NORMAL_LABEL, 1, 10, 0},
 {"Panning Echo 2", 0,  0, 0, 0, FL_NORMAL_LABEL, 1, 10, 0},
 {"Panning Echo 3", 0,  0, 0, 0, FL_NORMAL_LABEL, 1, 10, 0},
 {"Feedback Echo", 0,  0, 0, 0, FL_NORMAL_LABEL, 1, 10, 0},
 {0,0,0,0,0,0,0,0,0}
};

Fl_Menu_Item SimpleEffUI::menu_chorusp1[] = {
 {"Chorus 1", 0,  0, 0, 0, FL_NORMAL_LABEL, 1, 10, 0},
 {"Chorus 2", 0,  0, 0, 0, FL_NORMAL_LABEL, 1, 10, 0},
 {"Chorus 3", 0,  0, 0, 0, FL_NORMAL_LABEL, 1, 10, 0},
 {"Celeste 1", 0,  0, 0, 0, FL_NORMAL_LABEL, 1, 10, 0},
 {"Celeste 2", 0,  0, 0, 0, FL_NORMAL_LABEL, 1, 10, 0},
 {"Flange 1", 0,  0, 0, 0, FL_NORMAL_LABEL, 1, 10, 0},
 {"Flange 2", 0,  0, 0, 0, FL_NORMAL_LABEL, 1, 10, 0},
 {"Flange 3", 0,  0, 0, 0, FL_NORMAL_LABEL, 1, 10, 0},
 {"Flange 4", 0,  0, 0, 0, FL_NORMAL_LABEL, 1, 10, 0},
 {"Flange 5", 0,  0, 0, 0, FL_NORMAL_LABEL, 1, 10, 0},
 {0,0,0,0,0,0,0,0,0}
};

Fl_Menu_Item SimpleEffUI::menu_phaserp1[] = {
 {"Phaser 1", 0,  0, 0, 0, FL_NORMAL_LABEL, 1, 10, 0},
 {"Phaser 2", 0,  0, 0, 0, FL_NORMAL_LABEL, 1, 10, 0},
 {"Phaser 3", 0,  0, 0, 0, FL_NORMAL_LABEL, 1, 10, 0},
 {"Phaser 4", 0,  0, 0, 0, FL_NORMAL_LABEL, 1, 10, 0},
 {"Phaser 5", 0,  0, 0, 0, FL_NORMAL_LABEL, 1, 10, 0},
 {"Phaser 6", 0,  0, 0, 0, FL_NORMAL_LABEL, 1, 10, 0},
 {0,0,0,0,0,0,0,0,0}
};

Fl_Menu_Item SimpleEffUI::menu_awp1[] = {
 {"Alienwah 1", 0,  0, 0, 0, FL_NORMAL_LABEL, 1, 10, 0},
 {"Alienwah 2", 0,  0, 0, 0, FL_NORMAL_LABEL, 1, 10, 0},
 {"Alienwah 3", 0,  0, 0, 0, FL_NORMAL_LABEL, 1, 10, 0},
 {"Alienwah 4", 0,  0, 0, 0, FL_NORMAL_LABEL, 1, 10, 0},
 {0,0,0,0,0,0,0,0,0}
};

Fl_Menu_Item SimpleEffUI::menu_distp1[] = {
 {"Overdrive 1", 0,  0, 0, 0, FL_NORMAL_LABEL, 1, 10, 0},
 {"Overdrive 2", 0,  0, 0, 0, FL_NORMAL_LABEL, 1, 10, 0},
 {"A. Exciter 1", 0,  0, 0, 0, FL_NORMAL_LABEL, 1, 10, 0},
 {"A. Exciter 2", 0,  0, 0, 0, FL_NORMAL_LABEL, 1, 10, 0},
 {"Guitar Amp", 0,  0, 0, 0, FL_NORMAL_LABEL, 1, 10, 0},
 {"Quantisize", 0,  0, 0, 0, FL_NORMAL_LABEL, 1, 10, 0},
 {0,0,0,0,0,0,0,0,0}
};

Fl_Menu_Item SimpleEffUI::menu_distp51[] = {
 {"Atan", 0,  0, 0, 0, FL_NORMAL_LABEL, 1, 10, 0},
 {"Asym1", 0,  0, 0, 0, FL_NORMAL_LABEL, 1, 10, 0},
 {"Pow", 0,  0, 0, 0, FL_NORMAL_LABEL, 1, 10, 0},
 {"Sine", 0,  0, 0, 0, FL_NORMAL_LABEL, 1, 10, 0},
 {"Qnts", 0,  0, 0, 0, FL_NORMAL_LABEL, 1, 10, 0},
 {"Zigzg", 0,  0, 0, 0, FL_NORMAL_LABEL, 1, 10, 0},
 {"Lmt", 0,  0, 0, 0, FL_NORMAL_LABEL, 1, 10, 0},
 {"LmtU", 0,  0, 0, 0, FL_NORMAL_LABEL, 1, 10, 0},
 {"LmtL", 0,  0, 0, 0, FL_NORMAL_LABEL, 1, 10, 0},
 {"ILmt", 0,  0, 0, 0, FL_NORMAL_LABEL, 1, 10, 0},
 {"Clip", 0,  0, 0, 0, FL_NORMAL_LABEL, 1, 10, 0},
 {"Asym2", 0,  0, 0, 0, FL_NORMAL_LABEL, 1, 10, 0},
 {"Pow2", 0,  0, 0, 0, FL_NORMAL_LABEL, 1, 10, 0},
 {"Sgm", 0,  0, 0, 0, FL_NORMAL_LABEL, 1, 10, 0},
 {0,0,0,0,0,0,0,0,0}
};

void SimpleEffUI::cb_bandcounter1_i(Fl_Counter* o, void*) {
  eqband=(int) o->value();
int npb=eqband*5+10;
typechoice->oscMove("parameter"+to_s(npb));
freqdial->oscMove("parameter"+to_s(npb+1));
gaindial->oscMove("parameter"+to_s(npb+2));
qdial->oscMove("parameter"+to_s(npb+3));
stagescounter->oscMove("parameter"+to_s(npb+4));
}
void SimpleEffUI::cb_bandcounter1(Fl_Counter* o, void* v) {
  ((SimpleEffUI*)(o->parent()->user_data()))->cb_bandcounter1_i(o,v);
}

void SimpleEffUI::cb_freqdial1_i(Fl_Osc_Dial*, void*) {
  eqgraph->redraw();
}
void SimpleEffUI::cb_freqdial1(Fl_Osc_Dial* o, void* v) {
  ((SimpleEffUI*)(o->parent()->parent()->user_data()))->cb_freqdial1_i(o,v);
}

void SimpleEffUI::cb_gaindial1_i(Fl_Osc_Dial*, void*) {
  eqgraph->redraw();
}
void SimpleEffUI::cb_gaindial1(Fl_Osc_Dial* o, void* v) {
  ((SimpleEffUI*)(o->parent()->parent()->user_data()))->cb_gaindial1_i(o,v);
}

void SimpleEffUI::cb_qdial1_i(Fl_Osc_Dial*, void*) {
  eqgraph->redraw();
}
void SimpleEffUI::cb_qdial1(Fl_Osc_Dial* o, void* v) {
  ((SimpleEffUI*)(o->parent()->parent()->user_data()))->cb_qdial1_i(o,v);
}

void SimpleEffUI::cb_stagescounter1_i(Fl_Osc_Counter*, void*) {
  eqgraph->redraw();
}
void SimpleEffUI::cb_stagescounter1(Fl_Osc_Counter* o, void* v) {
  ((SimpleEffUI*)(o->parent()->parent()->user_data()))->cb_stagescounter1_i(o,v);
}

void SimpleEffUI::cb_typechoice1_i(Fl_Osc_Choice* o, void*) {
  int type = o->value();
if (type>6) gaindial->activate();
 else gaindial->deactivate();

if (type==0) bandgroup->deactivate();
else bandgroup->activate();
eqgraph->redraw();
}
void SimpleEffUI::cb_typechoice1(Fl_Osc_Choice* o, void* v) {
  ((SimpleEffUI*)(o->parent()->user_data()))->cb_typechoice1_i(o,v);
}

Fl_Menu_Item SimpleEffUI::menu_typechoice1[] = {
 {"OFF", 0,  0, 0, 0, FL_NORMAL_LABEL, 1, 10, 0},
 {"Lp1", 0,  0, 0, 0, FL_NORMAL_LABEL, 1, 10, 0},
 {"Hp1", 0,  0, 0, 0, FL_NORMAL_LABEL, 1, 10, 0},
 {"Lp2", 0,  0, 0, 0, FL_NORMAL_LABEL, 1, 10, 0},
 {"Hp2", 0,  0, 0, 0, FL_NORMAL_LABEL, 1, 10, 0},
 {"Bp2", 0,  0, 0, 0, FL_NORMAL_LABEL, 1, 10, 0},
 {"N2", 0,  0, 0, 0, FL_NORMAL_LABEL, 1, 10, 0},
 {"Pk", 0,  0, 0, 0, FL_NORMAL_LABEL, 1, 10, 0},
 {"LSh", 0,  0, 0, 0, FL_NORMAL_LABEL, 1, 10, 0},
 {"HSh", 0,  0, 0, 0, FL_NORMAL_LABEL, 1, 10, 0},
 {0,0,0,0,0,0,0,0,0}
};

Fl_Menu_Item SimpleEffUI::menu_dfp1[] = {
 {"WahWah", 0,  0, 0, 0, FL_NORMAL_LABEL, 1, 10, 0},
 {"AutoWah", 0,  0, 0, 0, FL_NORMAL_LABEL, 1, 10, 0},
 {"Sweep", 0,  0, 0, 0, FL_NORMAL_LABEL, 1, 10, 0},
 {"VocalMorph1", 0,  0, 0, 0, FL_NORMAL_LABEL, 1, 10, 0},
 {"VocalMorph2", 0,  0, 0, 0, FL_NORMAL_LABEL, 1, 10, 0},
 {0,0,0,0,0,0,0,0,0}
};

SimpleEffUI::SimpleEffUI(int x,int y, int w, int h, const char *label):Fl_Osc_Group(x,y,w,h,label),efftype(0) {
}

SimpleEffUI::~SimpleEffUI() {
  effnullwindow->hide();//delete (effnullwindow);
  effreverbwindow->hide();//delete (effreverbwindow);
  effechowindow->hide();//delete (effechowindow);
  effchoruswindow->hide();//delete (effchoruswindow);
  effphaserwindow->hide();//delete (effphaserwindow);
  effalienwahwindow->hide();//delete (effalienwahwindow);
  effdistorsionwindow->hide();//delete (effdistorsionwindow);
  effeqwindow->hide();//delete (effeqwindow);
  effdynamicfilterwindow->hide();//delete (effdynamicfilterwindow);
}

Fl_Group* SimpleEffUI::make_null_window() {
  { Fl_Group* o = effnullwindow = new Fl_Group(0, 0, 230, 95);
    effnullwindow->box(FL_UP_BOX);
    effnullwindow->color((Fl_Color)221);
    effnullwindow->selection_color(FL_BACKGROUND_COLOR);
    effnullwindow->labeltype(FL_NO_LABEL);
    effnullwindow->labelfont(1);
    effnullwindow->labelsize(19);
    effnullwindow->labelcolor(FL_FOREGROUND_COLOR);
    effnullwindow->user_data((void*)(this));
    effnullwindow->align(Fl_Align(FL_ALIGN_TOP));
    effnullwindow->when(FL_WHEN_RELEASE);
    set_module_parameters(o);
    effnullwindow->end();
  } // Fl_Group* effnullwindow
  return effnullwindow;
}

Fl_Group* SimpleEffUI::make_reverb_window() {
  { Fl_Group* o = effreverbwindow = new Fl_Group(0, 0, 230, 100);
    effreverbwindow->box(FL_UP_BOX);
    effreverbwindow->color((Fl_Color)51);
    effreverbwindow->selection_color(FL_BACKGROUND_COLOR);
    effreverbwindow->labeltype(FL_NO_LABEL);
    effreverbwindow->labelfont(1);
    effreverbwindow->labelsize(19);
    effreverbwindow->labelcolor(FL_FOREGROUND_COLOR);
    effreverbwindow->user_data((void*)(this));
    effreverbwindow->align(Fl_Align(FL_ALIGN_TOP));
    effreverbwindow->when(FL_WHEN_RELEASE);
    { Fl_Osc_Choice* o = revp = new Fl_Osc_Choice(10, 15, 90, 15, "Preset");
      revp->box(FL_UP_BOX);
      revp->down_box(FL_BORDER_BOX);
      revp->color(FL_DARK1);
      revp->selection_color(FL_BACKGROUND2_COLOR);
      revp->labeltype(FL_NORMAL_LABEL);
      revp->labelfont(1);
      revp->labelsize(10);
      revp->labelcolor(FL_FOREGROUND_COLOR);
      revp->textfont(1);
      revp->textsize(10);
      revp->align(Fl_Align(FL_ALIGN_TOP_LEFT));
      revp->when(FL_WHEN_RELEASE);
      revp->menu(menu_revp1);
      o->init("preset");
    } // Fl_Osc_Choice* revp
    { Fl_Osc_Dial* o = revp0 = new Fl_Osc_Dial(10, 40, 30, 30, "Vol");
      revp0->tooltip("Effect Volume");
      revp0->box(FL_ROUND_UP_BOX);
      revp0->color(FL_BACKGROUND_COLOR);
      revp0->selection_color(FL_INACTIVE_COLOR);
      revp0->labeltype(FL_NORMAL_LABEL);
      revp0->labelfont(1);
      revp0->labelsize(11);
      revp0->labelcolor(FL_FOREGROUND_COLOR);
      revp0->maximum(127);
      revp0->align(Fl_Align(FL_ALIGN_BOTTOM));
      revp0->when(FL_WHEN_CHANGED);
      o->init("parameter0");
    } // Fl_Osc_Dial* revp0
    { Fl_Osc_Dial* o = revp2 = new Fl_Osc_Dial(45, 40, 30, 30, "Time");
      revp2->tooltip("Duration of Reverb");
      revp2->box(FL_ROUND_UP_BOX);
      revp2->color(FL_BACKGROUND_COLOR);
      revp2->selection_color(FL_INACTIVE_COLOR);
      revp2->labeltype(FL_NORMAL_LABEL);
      revp2->labelfont(1);
      revp2->labelsize(11);
      revp2->labelcolor(FL_FOREGROUND_COLOR);
      revp2->maximum(127);
      revp2->align(Fl_Align(FL_ALIGN_BOTTOM));
      revp2->when(FL_WHEN_CHANGED);
      o->init("parameter2");
    } // Fl_Osc_Dial* revp2
    { Fl_Osc_Dial* o = revp3 = new Fl_Osc_Dial(85, 40, 30, 30, "I.del");
      revp3->tooltip("Initial Delay");
      revp3->box(FL_ROUND_UP_BOX);
      revp3->color(FL_BACKGROUND_COLOR);
      revp3->selection_color(FL_INACTIVE_COLOR);
      revp3->labeltype(FL_NORMAL_LABEL);
      revp3->labelfont(1);
      revp3->labelsize(11);
      revp3->labelcolor(FL_FOREGROUND_COLOR);
      revp3->maximum(127);
      revp3->align(Fl_Align(FL_ALIGN_BOTTOM));
      revp3->when(FL_WHEN_RELEASE);
      o->init("parameter3");
    } // Fl_Osc_Dial* revp3
    { Fl_Osc_Dial* o = revp9 = new Fl_Osc_Dial(120, 40, 30, 30, "Damp");
      revp9->tooltip("Dampening");
      revp9->box(FL_ROUND_UP_BOX);
      revp9->color(FL_BACKGROUND_COLOR);
      revp9->selection_color(FL_INACTIVE_COLOR);
      revp9->labeltype(FL_NORMAL_LABEL);
      revp9->labelfont(1);
      revp9->labelsize(11);
      revp9->labelcolor(FL_FOREGROUND_COLOR);
      revp9->minimum(64);
      revp9->maximum(127);
      revp9->step(1);
      revp9->align(Fl_Align(FL_ALIGN_BOTTOM));
      revp9->when(FL_WHEN_CHANGED);
      o->init("parameter9");
    } // Fl_Osc_Dial* revp9
    set_module_parameters(o);
    effreverbwindow->end();
  } // Fl_Group* effreverbwindow
  return effreverbwindow;
}

Fl_Group* SimpleEffUI::make_echo_window() {
  { Fl_Group* o = effechowindow = new Fl_Group(0, 0, 230, 100);
    effechowindow->box(FL_UP_BOX);
    effechowindow->color((Fl_Color)51);
    effechowindow->selection_color(FL_BACKGROUND_COLOR);
    effechowindow->labeltype(FL_NO_LABEL);
    effechowindow->labelfont(1);
    effechowindow->labelsize(19);
    effechowindow->labelcolor(FL_FOREGROUND_COLOR);
    effechowindow->user_data((void*)(this));
    effechowindow->align(Fl_Align(FL_ALIGN_TOP));
    effechowindow->when(FL_WHEN_RELEASE);
    { Fl_Osc_Choice* o = echop = new Fl_Osc_Choice(11, 15, 95, 15, "Preset");
      echop->box(FL_UP_BOX);
      echop->down_box(FL_BORDER_BOX);
      echop->color(FL_DARK1);
      echop->selection_color(FL_BACKGROUND2_COLOR);
      echop->labeltype(FL_NORMAL_LABEL);
      echop->labelfont(1);
      echop->labelsize(10);
      echop->labelcolor(FL_FOREGROUND_COLOR);
      echop->textfont(1);
      echop->textsize(10);
      echop->align(Fl_Align(FL_ALIGN_TOP_LEFT));
      echop->when(FL_WHEN_RELEASE);
      echop->menu(menu_echop1);
      o->init("preset");
    } // Fl_Osc_Choice* echop
    { Fl_Osc_Dial* o = echop0 = new Fl_Osc_Dial(10, 40, 30, 30, "Vol");
      echop0->tooltip("Effect Volume");
      echop0->box(FL_ROUND_UP_BOX);
      echop0->color(FL_BACKGROUND_COLOR);
      echop0->selection_color(FL_INACTIVE_COLOR);
      echop0->labeltype(FL_NORMAL_LABEL);
      echop0->labelfont(1);
      echop0->labelsize(11);
      echop0->labelcolor(FL_FOREGROUND_COLOR);
      echop0->maximum(127);
      echop0->align(Fl_Align(FL_ALIGN_BOTTOM));
      echop0->when(FL_WHEN_CHANGED);
      o->init("parameter0");
    } // Fl_Osc_Dial* echop0
    { Fl_Osc_Dial* o = echop2 = new Fl_Osc_Dial(45, 40, 30, 30, "Delay");
      echop2->box(FL_ROUND_UP_BOX);
      echop2->color(FL_BACKGROUND_COLOR);
      echop2->selection_color(FL_INACTIVE_COLOR);
      echop2->labeltype(FL_NORMAL_LABEL);
      echop2->labelfont(1);
      echop2->labelsize(11);
      echop2->labelcolor(FL_FOREGROUND_COLOR);
      echop2->maximum(127);
      echop2->align(Fl_Align(FL_ALIGN_BOTTOM));
      echop2->when(FL_WHEN_RELEASE);
      o->init("parameter2");
    } // Fl_Osc_Dial* echop2
    { Fl_Osc_Dial* o = echop5 = new Fl_Osc_Dial(80, 40, 30, 30, "Fb.");
      echop5->tooltip("Feedback");
      echop5->box(FL_ROUND_UP_BOX);
      echop5->color(FL_BACKGROUND_COLOR);
      echop5->selection_color(FL_INACTIVE_COLOR);
      echop5->labeltype(FL_NORMAL_LABEL);
      echop5->labelfont(1);
      echop5->labelsize(11);
      echop5->labelcolor(FL_FOREGROUND_COLOR);
      echop5->maximum(127);
      echop5->align(Fl_Align(FL_ALIGN_BOTTOM));
      echop5->when(FL_WHEN_CHANGED);
      o->init("parameter5");
    } // Fl_Osc_Dial* echop5
    set_module_parameters(o);
    effechowindow->end();
  } // Fl_Group* effechowindow
  return effechowindow;
}

Fl_Group* SimpleEffUI::make_chorus_window() {
  { Fl_Group* o = effchoruswindow = new Fl_Group(0, 0, 230, 100);
    effchoruswindow->box(FL_UP_BOX);
    effchoruswindow->color((Fl_Color)51);
    effchoruswindow->selection_color(FL_BACKGROUND_COLOR);
    effchoruswindow->labeltype(FL_NO_LABEL);
    effchoruswindow->labelfont(1);
    effchoruswindow->labelsize(19);
    effchoruswindow->labelcolor(FL_FOREGROUND_COLOR);
    effchoruswindow->user_data((void*)(this));
    effchoruswindow->align(Fl_Align(FL_ALIGN_TOP));
    effchoruswindow->when(FL_WHEN_RELEASE);
    { Fl_Osc_Choice* o = chorusp = new Fl_Osc_Choice(10, 15, 90, 15, "Preset");
      chorusp->box(FL_UP_BOX);
      chorusp->down_box(FL_BORDER_BOX);
      chorusp->color(FL_DARK1);
      chorusp->selection_color(FL_BACKGROUND2_COLOR);
      chorusp->labeltype(FL_NORMAL_LABEL);
      chorusp->labelfont(1);
      chorusp->labelsize(10);
      chorusp->labelcolor(FL_FOREGROUND_COLOR);
      chorusp->textfont(1);
      chorusp->textsize(10);
      chorusp->align(Fl_Align(FL_ALIGN_TOP_LEFT));
      chorusp->when(FL_WHEN_RELEASE);
      chorusp->menu(menu_chorusp1);
      o->init("preset");
    } // Fl_Osc_Choice* chorusp
    { Fl_Osc_Dial* o = chorusp0 = new Fl_Osc_Dial(10, 40, 30, 30, "Vol");
      chorusp0->tooltip("Effect Volume");
      chorusp0->box(FL_ROUND_UP_BOX);
      chorusp0->color(FL_BACKGROUND_COLOR);
      chorusp0->selection_color(FL_INACTIVE_COLOR);
      chorusp0->labeltype(FL_NORMAL_LABEL);
      chorusp0->labelfont(1);
      chorusp0->labelsize(11);
      chorusp0->labelcolor(FL_FOREGROUND_COLOR);
      chorusp0->maximum(127);
      chorusp0->align(Fl_Align(FL_ALIGN_BOTTOM));
      chorusp0->when(FL_WHEN_CHANGED);
      o->init("parameter0");
    } // Fl_Osc_Dial* chorusp0
    { Fl_Osc_Dial* o = chorusp2 = new Fl_Osc_Dial(45, 40, 30, 30, "Freq");
      chorusp2->tooltip("LFO Frequency");
      chorusp2->box(FL_ROUND_UP_BOX);
      chorusp2->color(FL_BACKGROUND_COLOR);
      chorusp2->selection_color(FL_INACTIVE_COLOR);
      chorusp2->labeltype(FL_NORMAL_LABEL);
      chorusp2->labelfont(1);
      chorusp2->labelsize(11);
      chorusp2->labelcolor(FL_FOREGROUND_COLOR);
      chorusp2->maximum(127);
      chorusp2->align(Fl_Align(FL_ALIGN_BOTTOM));
      chorusp2->when(FL_WHEN_CHANGED);
      o->init("parameter2");
    } // Fl_Osc_Dial* chorusp2
    { Fl_Osc_Dial* o = chorusp6 = new Fl_Osc_Dial(80, 40, 30, 30, "Dpth");
      chorusp6->tooltip("Depth");
      chorusp6->box(FL_ROUND_UP_BOX);
      chorusp6->color(FL_BACKGROUND_COLOR);
      chorusp6->selection_color(FL_INACTIVE_COLOR);
      chorusp6->labeltype(FL_NORMAL_LABEL);
      chorusp6->labelfont(1);
      chorusp6->labelsize(11);
      chorusp6->labelcolor(FL_FOREGROUND_COLOR);
      chorusp6->maximum(127);
      chorusp6->align(Fl_Align(FL_ALIGN_BOTTOM));
      chorusp6->when(FL_WHEN_CHANGED);
      o->init("parameter6");
    } // Fl_Osc_Dial* chorusp6
    { Fl_Osc_Dial* o = chorusp7 = new Fl_Osc_Dial(115, 40, 30, 30, "Delay");
      chorusp7->box(FL_ROUND_UP_BOX);
      chorusp7->color(FL_BACKGROUND_COLOR);
      chorusp7->selection_color(FL_INACTIVE_COLOR);
      chorusp7->labeltype(FL_NORMAL_LABEL);
      chorusp7->labelfont(1);
      chorusp7->labelsize(11);
      chorusp7->labelcolor(FL_FOREGROUND_COLOR);
      chorusp7->maximum(127);
      chorusp7->align(Fl_Align(FL_ALIGN_BOTTOM));
      chorusp7->when(FL_WHEN_CHANGED);
      o->init("parameter7");
    } // Fl_Osc_Dial* chorusp7
    { Fl_Osc_Dial* o = chorusp8 = new Fl_Osc_Dial(150, 40, 30, 30, "Fb");
      chorusp8->tooltip("Feedback");
      chorusp8->box(FL_ROUND_UP_BOX);
      chorusp8->color(FL_BACKGROUND_COLOR);
      chorusp8->selection_color(FL_INACTIVE_COLOR);
      chorusp8->labeltype(FL_NORMAL_LABEL);
      chorusp8->labelfont(1);
      chorusp8->labelsize(11);
      chorusp8->labelcolor(FL_FOREGROUND_COLOR);
      chorusp8->maximum(127);
      chorusp8->align(Fl_Align(FL_ALIGN_BOTTOM));
      chorusp8->when(FL_WHEN_CHANGED);
      o->init("parameter8");
    } // Fl_Osc_Dial* chorusp8
    { Fl_Osc_Check* o = new Fl_Osc_Check(120, 10, 55, 20, "Flange");
      o->box(FL_THIN_UP_BOX);
      o->down_box(FL_DOWN_BOX);
      o->color((Fl_Color)230);
      o->selection_color(FL_FOREGROUND_COLOR);
      o->labeltype(FL_NORMAL_LABEL);
      o->labelfont(1);
      o->labelsize(10);
      o->labelcolor(FL_FOREGROUND_COLOR);
      o->align(Fl_Align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE));
      o->when(FL_WHEN_RELEASE);
      o->hide();
      o->deactivate();
      o->init("parameter10");
    } // Fl_Osc_Check* o
    set_module_parameters(o);
    effchoruswindow->end();
  } // Fl_Group* effchoruswindow
  return effchoruswindow;
}

Fl_Group* SimpleEffUI::make_phaser_window() {
  { Fl_Group* o = effphaserwindow = new Fl_Group(0, 0, 230, 100);
    effphaserwindow->box(FL_UP_BOX);
    effphaserwindow->color((Fl_Color)51);
    effphaserwindow->selection_color(FL_BACKGROUND_COLOR);
    effphaserwindow->labeltype(FL_NO_LABEL);
    effphaserwindow->labelfont(1);
    effphaserwindow->labelsize(19);
    effphaserwindow->labelcolor(FL_FOREGROUND_COLOR);
    effphaserwindow->user_data((void*)(this));
    effphaserwindow->align(Fl_Align(FL_ALIGN_TOP));
    effphaserwindow->when(FL_WHEN_RELEASE);
    { Fl_Osc_Choice* o = phaserp = new Fl_Osc_Choice(10, 15, 90, 15, "Preset");
      phaserp->box(FL_UP_BOX);
      phaserp->down_box(FL_BORDER_BOX);
      phaserp->color(FL_DARK1);
      phaserp->selection_color(FL_FOREGROUND_COLOR);
      phaserp->labeltype(FL_NORMAL_LABEL);
      phaserp->labelfont(1);
      phaserp->labelsize(10);
      phaserp->labelcolor((Fl_Color)55);
      phaserp->textfont(1);
      phaserp->textsize(10);
      phaserp->textcolor(FL_BACKGROUND2_COLOR);
      phaserp->align(Fl_Align(FL_ALIGN_TOP_LEFT));
      phaserp->when(FL_WHEN_RELEASE);
      phaserp->menu(menu_phaserp1);
      o->init("preset");
    } // Fl_Osc_Choice* phaserp
    { Fl_Osc_Dial* o = phaserp0 = new Fl_Osc_Dial(10, 40, 30, 30, "Vol");
      phaserp0->tooltip("Effect Volume");
      phaserp0->box(FL_ROUND_UP_BOX);
      phaserp0->color(FL_BACKGROUND_COLOR);
      phaserp0->selection_color(FL_INACTIVE_COLOR);
      phaserp0->labeltype(FL_NORMAL_LABEL);
      phaserp0->labelfont(1);
      phaserp0->labelsize(11);
      phaserp0->labelcolor(FL_FOREGROUND_COLOR);
      phaserp0->maximum(127);
      phaserp0->align(Fl_Align(FL_ALIGN_BOTTOM));
      phaserp0->when(FL_WHEN_CHANGED);
      o->init("parameter0");
    } // Fl_Osc_Dial* phaserp0
    { Fl_Osc_Dial* o = phaserp2 = new Fl_Osc_Dial(45, 40, 30, 30, "Freq");
      phaserp2->tooltip("LFO frequency");
      phaserp2->box(FL_ROUND_UP_BOX);
      phaserp2->color(FL_BACKGROUND_COLOR);
      phaserp2->selection_color(FL_INACTIVE_COLOR);
      phaserp2->labeltype(FL_NORMAL_LABEL);
      phaserp2->labelfont(1);
      phaserp2->labelsize(11);
      phaserp2->labelcolor(FL_FOREGROUND_COLOR);
      phaserp2->maximum(127);
      phaserp2->align(Fl_Align(FL_ALIGN_BOTTOM));
      phaserp2->when(FL_WHEN_CHANGED);
      o->init("parameter2");
    } // Fl_Osc_Dial* phaserp2
    { Fl_Osc_Dial* o = phaserp5 = new Fl_Osc_Dial(80, 40, 30, 30, "St.df");
      phaserp5->tooltip("Left/Right Channel Phase Shift");
      phaserp5->box(FL_ROUND_UP_BOX);
      phaserp5->color(FL_BACKGROUND_COLOR);
      phaserp5->selection_color(FL_INACTIVE_COLOR);
      phaserp5->labeltype(FL_NORMAL_LABEL);
      phaserp5->labelfont(1);
      phaserp5->labelsize(11);
      phaserp5->labelcolor(FL_FOREGROUND_COLOR);
      phaserp5->maximum(127);
      phaserp5->align(Fl_Align(FL_ALIGN_BOTTOM));
      phaserp5->when(FL_WHEN_CHANGED);
      o->init("parameter5");
    } // Fl_Osc_Dial* phaserp5
    { Fl_Osc_Dial* o = phaserp6 = new Fl_Osc_Dial(115, 40, 30, 30, "Dpth");
      phaserp6->tooltip("Depth");
      phaserp6->box(FL_ROUND_UP_BOX);
      phaserp6->color(FL_BACKGROUND_COLOR);
      phaserp6->selection_color(FL_INACTIVE_COLOR);
      phaserp6->labeltype(FL_NORMAL_LABEL);
      phaserp6->labelfont(1);
      phaserp6->labelsize(11);
      phaserp6->labelcolor(FL_FOREGROUND_COLOR);
      phaserp6->maximum(127);
      phaserp6->align(Fl_Align(FL_ALIGN_BOTTOM));
      phaserp6->when(FL_WHEN_CHANGED);
      o->init("parameter6");
    } // Fl_Osc_Dial* phaserp6
    { Fl_Osc_Dial* o = phaserp7 = new Fl_Osc_Dial(150, 40, 30, 30, "Fb");
      phaserp7->tooltip("Feedback");
      phaserp7->box(FL_ROUND_UP_BOX);
      phaserp7->color(FL_BACKGROUND_COLOR);
      phaserp7->selection_color(FL_INACTIVE_COLOR);
      phaserp7->labeltype(FL_NORMAL_LABEL);
      phaserp7->labelfont(1);
      phaserp7->labelsize(11);
      phaserp7->labelcolor(FL_FOREGROUND_COLOR);
      phaserp7->maximum(127);
      phaserp7->align(Fl_Align(FL_ALIGN_BOTTOM));
      phaserp7->when(FL_WHEN_CHANGED);
      o->init("parameter7");
    } // Fl_Osc_Dial* phaserp7
    { Fl_Osc_Counter* o = phaserp8 = new Fl_Osc_Counter(185, 55, 35, 15, "Stages");
      phaserp8->type(1);
      phaserp8->box(FL_UP_BOX);
      phaserp8->color(FL_BACKGROUND_COLOR);
      phaserp8->selection_color(FL_INACTIVE_COLOR);
      phaserp8->labeltype(FL_NORMAL_LABEL);
      phaserp8->labelfont(1);
      phaserp8->labelsize(11);
      phaserp8->labelcolor(FL_FOREGROUND_COLOR);
      phaserp8->minimum(0);
      phaserp8->maximum(127);
      phaserp8->step(1);
      phaserp8->align(Fl_Align(FL_ALIGN_BOTTOM));
      phaserp8->when(FL_WHEN_CHANGED);
      o->range(1,MAX_PHASER_STAGES);
      o->init("parameter8");
    } // Fl_Osc_Counter* phaserp8
    set_module_parameters(o);
    effphaserwindow->end();
  } // Fl_Group* effphaserwindow
  return effphaserwindow;
}

Fl_Group* SimpleEffUI::make_alienwah_window() {
  { Fl_Group* o = effalienwahwindow = new Fl_Group(0, 0, 230, 100);
    effalienwahwindow->box(FL_UP_BOX);
    effalienwahwindow->color((Fl_Color)51);
    effalienwahwindow->selection_color(FL_BACKGROUND_COLOR);
    effalienwahwindow->labeltype(FL_NO_LABEL);
    effalienwahwindow->labelfont(1);
    effalienwahwindow->labelsize(19);
    effalienwahwindow->labelcolor(FL_FOREGROUND_COLOR);
    effalienwahwindow->user_data((void*)(this));
    effalienwahwindow->align(Fl_Align(FL_ALIGN_TOP));
    effalienwahwindow->when(FL_WHEN_RELEASE);
    { Fl_Osc_Choice* o = awp = new Fl_Osc_Choice(10, 15, 90, 15, "Preset");
      awp->box(FL_UP_BOX);
      awp->down_box(FL_BORDER_BOX);
      awp->color(FL_DARK1);
      awp->selection_color(FL_BACKGROUND2_COLOR);
      awp->labeltype(FL_NORMAL_LABEL);
      awp->labelfont(1);
      awp->labelsize(10);
      awp->labelcolor(FL_FOREGROUND_COLOR);
      awp->textfont(1);
      awp->textsize(10);
      awp->align(Fl_Align(FL_ALIGN_TOP_LEFT));
      awp->when(FL_WHEN_RELEASE);
      awp->menu(menu_awp1);
      o->init("preset");
    } // Fl_Osc_Choice* awp
    { Fl_Osc_Dial* o = awp0 = new Fl_Osc_Dial(10, 40, 30, 30, "Vol");
      awp0->tooltip("Effect Volume");
      awp0->box(FL_ROUND_UP_BOX);
      awp0->color(FL_BACKGROUND_COLOR);
      awp0->selection_color(FL_INACTIVE_COLOR);
      awp0->labeltype(FL_NORMAL_LABEL);
      awp0->labelfont(1);
      awp0->labelsize(11);
      awp0->labelcolor(FL_FOREGROUND_COLOR);
      awp0->maximum(127);
      awp0->align(Fl_Align(FL_ALIGN_BOTTOM));
      awp0->when(FL_WHEN_CHANGED);
      o->init("parameter0");
    } // Fl_Osc_Dial* awp0
    { Fl_Osc_Dial* o = awp2 = new Fl_Osc_Dial(45, 40, 30, 30, "Freq");
      awp2->tooltip("LFO frequency");
      awp2->box(FL_ROUND_UP_BOX);
      awp2->color(FL_BACKGROUND_COLOR);
      awp2->selection_color(FL_INACTIVE_COLOR);
      awp2->labeltype(FL_NORMAL_LABEL);
      awp2->labelfont(1);
      awp2->labelsize(11);
      awp2->labelcolor(FL_FOREGROUND_COLOR);
      awp2->maximum(127);
      awp2->align(Fl_Align(FL_ALIGN_BOTTOM));
      awp2->when(FL_WHEN_CHANGED);
      o->init("parameter2");
    } // Fl_Osc_Dial* awp2
    { Fl_Osc_Dial* o = awp6 = new Fl_Osc_Dial(85, 40, 30, 30, "Dpth");
      awp6->tooltip("Depth");
      awp6->box(FL_ROUND_UP_BOX);
      awp6->color(FL_BACKGROUND_COLOR);
      awp6->selection_color(FL_INACTIVE_COLOR);
      awp6->labeltype(FL_NORMAL_LABEL);
      awp6->labelfont(1);
      awp6->labelsize(11);
      awp6->labelcolor(FL_FOREGROUND_COLOR);
      awp6->maximum(127);
      awp6->align(Fl_Align(FL_ALIGN_BOTTOM));
      awp6->when(FL_WHEN_CHANGED);
      o->init("parameter6");
    } // Fl_Osc_Dial* awp6
    { Fl_Osc_Counter* o = awp8 = new Fl_Osc_Counter(125, 55, 35, 15, "Delay");
      awp8->type(1);
      awp8->box(FL_UP_BOX);
      awp8->color(FL_BACKGROUND_COLOR);
      awp8->selection_color(FL_INACTIVE_COLOR);
      awp8->labeltype(FL_NORMAL_LABEL);
      awp8->labelfont(1);
      awp8->labelsize(11);
      awp8->labelcolor(FL_FOREGROUND_COLOR);
      awp8->minimum(0);
      awp8->maximum(127);
      awp8->step(1);
      awp8->align(Fl_Align(FL_ALIGN_BOTTOM));
      awp8->when(FL_WHEN_CHANGED);
      o->range(1,MAX_ALIENWAH_DELAY);
      o->init("parameter8");
    } // Fl_Osc_Counter* awp8
    set_module_parameters(o);
    effalienwahwindow->end();
  } // Fl_Group* effalienwahwindow
  return effalienwahwindow;
}

Fl_Group* SimpleEffUI::make_distorsion_window() {
  { Fl_Group* o = effdistorsionwindow = new Fl_Group(0, 0, 230, 100);
    effdistorsionwindow->box(FL_UP_BOX);
    effdistorsionwindow->color((Fl_Color)51);
    effdistorsionwindow->selection_color(FL_BACKGROUND_COLOR);
    effdistorsionwindow->labeltype(FL_NO_LABEL);
    effdistorsionwindow->labelfont(1);
    effdistorsionwindow->labelsize(19);
    effdistorsionwindow->labelcolor(FL_FOREGROUND_COLOR);
    effdistorsionwindow->user_data((void*)(this));
    effdistorsionwindow->align(Fl_Align(FL_ALIGN_TOP));
    effdistorsionwindow->when(FL_WHEN_RELEASE);
    { Fl_Osc_Choice* o = distp = new Fl_Osc_Choice(11, 15, 95, 15, "Preset");
      distp->box(FL_UP_BOX);
      distp->down_box(FL_BORDER_BOX);
      distp->color(FL_DARK1);
      distp->selection_color(FL_BACKGROUND2_COLOR);
      distp->labeltype(FL_NORMAL_LABEL);
      distp->labelfont(1);
      distp->labelsize(10);
      distp->labelcolor(FL_FOREGROUND_COLOR);
      distp->textfont(1);
      distp->textsize(10);
      distp->align(Fl_Align(FL_ALIGN_TOP_LEFT));
      distp->when(FL_WHEN_RELEASE);
      distp->menu(menu_distp1);
      o->init("preset");
    } // Fl_Osc_Choice* distp
    { Fl_Osc_Dial* o = distp0 = new Fl_Osc_Dial(10, 40, 30, 30, "Vol");
      distp0->tooltip("Effect Volume");
      distp0->box(FL_ROUND_UP_BOX);
      distp0->color(FL_BACKGROUND_COLOR);
      distp0->selection_color(FL_INACTIVE_COLOR);
      distp0->labeltype(FL_NORMAL_LABEL);
      distp0->labelfont(1);
      distp0->labelsize(11);
      distp0->labelcolor(FL_FOREGROUND_COLOR);
      distp0->maximum(127);
      distp0->align(Fl_Align(FL_ALIGN_BOTTOM));
      distp0->when(FL_WHEN_CHANGED);
      o->init("parameter0");
    } // Fl_Osc_Dial* distp0
    { Fl_Osc_Dial* o = distp3 = new Fl_Osc_Dial(45, 40, 30, 30, "Drive");
      distp3->tooltip("Input amplification");
      distp3->box(FL_ROUND_UP_BOX);
      distp3->color(FL_BACKGROUND_COLOR);
      distp3->selection_color(FL_INACTIVE_COLOR);
      distp3->labeltype(FL_NORMAL_LABEL);
      distp3->labelfont(1);
      distp3->labelsize(11);
      distp3->labelcolor(FL_FOREGROUND_COLOR);
      distp3->maximum(127);
      distp3->align(Fl_Align(FL_ALIGN_BOTTOM));
      distp3->when(FL_WHEN_RELEASE);
      o->init("parameter3");
    } // Fl_Osc_Dial* distp3
    { Fl_Osc_Dial* o = distp4 = new Fl_Osc_Dial(80, 40, 30, 30, "Level");
      distp4->tooltip("Output Amplification");
      distp4->box(FL_ROUND_UP_BOX);
      distp4->color(FL_BACKGROUND_COLOR);
      distp4->selection_color(FL_INACTIVE_COLOR);
      distp4->labeltype(FL_NORMAL_LABEL);
      distp4->labelfont(1);
      distp4->labelsize(11);
      distp4->labelcolor(FL_FOREGROUND_COLOR);
      distp4->maximum(127);
      distp4->align(Fl_Align(FL_ALIGN_BOTTOM));
      distp4->when(FL_WHEN_CHANGED);
      o->init("parameter4");
    } // Fl_Osc_Dial* distp4
    { Fl_Osc_Dial* o = distp7 = new Fl_Osc_Dial(190, 40, 30, 30, "LPF");
      distp7->tooltip("Low Pass Filter");
      distp7->box(FL_ROUND_UP_BOX);
      distp7->color(FL_BACKGROUND_COLOR);
      distp7->selection_color(FL_INACTIVE_COLOR);
      distp7->labeltype(FL_NORMAL_LABEL);
      distp7->labelfont(1);
      distp7->labelsize(11);
      distp7->labelcolor(FL_FOREGROUND_COLOR);
      distp7->maximum(127);
      distp7->align(Fl_Align(FL_ALIGN_BOTTOM));
      distp7->when(FL_WHEN_CHANGED);
      o->init("parameter7");
    } // Fl_Osc_Dial* distp7
    { Fl_Osc_Choice* o = distp5 = new Fl_Osc_Choice(120, 50, 60, 20, "Type");
      distp5->box(FL_UP_BOX);
      distp5->down_box(FL_BORDER_BOX);
      distp5->color(FL_BACKGROUND_COLOR);
      distp5->selection_color(FL_SELECTION_COLOR);
      distp5->labeltype(FL_NORMAL_LABEL);
      distp5->labelfont(1);
      distp5->labelsize(11);
      distp5->labelcolor(FL_FOREGROUND_COLOR);
      distp5->textsize(10);
      distp5->align(Fl_Align(FL_ALIGN_BOTTOM));
      distp5->when(FL_WHEN_RELEASE);
      distp5->menu(menu_distp51);
      o->init("parameter5");
    } // Fl_Osc_Choice* distp5
    set_module_parameters(o);
    effdistorsionwindow->end();
  } // Fl_Group* effdistorsionwindow
  return effdistorsionwindow;
}

Fl_Group* SimpleEffUI::make_eq_window() {
  { Fl_Group* o = effeqwindow = new Fl_Group(0, 0, 230, 100);
    effeqwindow->box(FL_UP_BOX);
    effeqwindow->color((Fl_Color)51);
    effeqwindow->selection_color(FL_BACKGROUND_COLOR);
    effeqwindow->labeltype(FL_NO_LABEL);
    effeqwindow->labelfont(1);
    effeqwindow->labelsize(19);
    effeqwindow->labelcolor(FL_FOREGROUND_COLOR);
    effeqwindow->user_data((void*)(this));
    effeqwindow->align(Fl_Align(FL_ALIGN_TOP));
    effeqwindow->when(FL_WHEN_RELEASE);
    { Fl_Counter* o = bandcounter = new Fl_Counter(85, 15, 45, 15, "Band");
      bandcounter->tooltip("Band no.");
      bandcounter->type(1);
      bandcounter->labelfont(1);
      bandcounter->labelsize(11);
      bandcounter->minimum(0);
      bandcounter->maximum(1);
      bandcounter->step(1);
      bandcounter->textfont(1);
      bandcounter->textsize(11);
      bandcounter->callback((Fl_Callback*)cb_bandcounter1);
      bandcounter->align(Fl_Align(FL_ALIGN_TOP));
      o->bounds(0,MAX_EQ_BANDS-1);
    } // Fl_Counter* bandcounter
    { bandgroup = new Fl_Group(5, 5, 75, 85);
      bandgroup->box(FL_UP_FRAME);
      { Fl_Osc_Dial* o = freqdial = new Fl_Osc_Dial(10, 10, 25, 25, "Freq");
        freqdial->box(FL_ROUND_UP_BOX);
        freqdial->color(FL_BACKGROUND_COLOR);
        freqdial->selection_color(FL_INACTIVE_COLOR);
        freqdial->labeltype(FL_NORMAL_LABEL);
        freqdial->labelfont(1);
        freqdial->labelsize(10);
        freqdial->labelcolor(FL_FOREGROUND_COLOR);
        freqdial->maximum(127);
        freqdial->callback((Fl_Callback*)cb_freqdial1);
        freqdial->align(Fl_Align(FL_ALIGN_BOTTOM));
        freqdial->when(3);
        o->init("parameter11");
      } // Fl_Osc_Dial* freqdial
      { Fl_Osc_Dial* o = gaindial = new Fl_Osc_Dial(45, 10, 25, 25, "Gain");
        gaindial->box(FL_ROUND_UP_BOX);
        gaindial->color(FL_BACKGROUND_COLOR);
        gaindial->selection_color(FL_INACTIVE_COLOR);
        gaindial->labeltype(FL_NORMAL_LABEL);
        gaindial->labelfont(1);
        gaindial->labelsize(10);
        gaindial->labelcolor(FL_FOREGROUND_COLOR);
        gaindial->maximum(127);
        gaindial->step(1);
        gaindial->callback((Fl_Callback*)cb_gaindial1);
        gaindial->align(Fl_Align(FL_ALIGN_BOTTOM));
        gaindial->when(3);
        o->init("parameter12");
      } // Fl_Osc_Dial* gaindial
      { Fl_Osc_Dial* o = qdial = new Fl_Osc_Dial(10, 50, 25, 25, "Q");
        qdial->tooltip("Bandwidth/Resonance");
        qdial->box(FL_ROUND_UP_BOX);
        qdial->color(FL_BACKGROUND_COLOR);
        qdial->selection_color(FL_INACTIVE_COLOR);
        qdial->labeltype(FL_NORMAL_LABEL);
        qdial->labelfont(1);
        qdial->labelsize(10);
        qdial->labelcolor(FL_FOREGROUND_COLOR);
        qdial->maximum(127);
        qdial->callback((Fl_Callback*)cb_qdial1);
        qdial->align(Fl_Align(FL_ALIGN_BOTTOM));
        qdial->when(3);
        o->init("parameter13");
      } // Fl_Osc_Dial* qdial
      { Fl_Osc_Counter* o = stagescounter = new Fl_Osc_Counter(40, 55, 30, 15, "Stages");
        stagescounter->tooltip("Additional filter stages");
        stagescounter->type(1);
        stagescounter->box(FL_UP_BOX);
        stagescounter->color(FL_BACKGROUND_COLOR);
        stagescounter->selection_color(FL_INACTIVE_COLOR);
        stagescounter->labeltype(FL_NORMAL_LABEL);
        stagescounter->labelfont(1);
        stagescounter->labelsize(10);
        stagescounter->labelcolor(FL_FOREGROUND_COLOR);
        stagescounter->minimum(1);
        stagescounter->maximum(127);
        stagescounter->step(1);
        stagescounter->textfont(1);
        stagescounter->textsize(11);
        stagescounter->callback((Fl_Callback*)cb_stagescounter1);
        stagescounter->align(Fl_Align(FL_ALIGN_BOTTOM));
        stagescounter->when(FL_WHEN_CHANGED);
        o->bounds(0,MAX_FILTER_STAGES-1);
        o->init("parameter14");
      } // Fl_Osc_Counter* stagescounter
      bandgroup->end();
    } // Fl_Group* bandgroup
    { Fl_Osc_Choice* o = typechoice = new Fl_Osc_Choice(135, 15, 40, 15, "Type");
      typechoice->tooltip("Type");
      typechoice->box(FL_UP_BOX);
      typechoice->down_box(FL_BORDER_BOX);
      typechoice->color(FL_BACKGROUND_COLOR);
      typechoice->selection_color(FL_SELECTION_COLOR);
      typechoice->labeltype(FL_NORMAL_LABEL);
      typechoice->labelfont(1);
      typechoice->labelsize(10);
      typechoice->labelcolor(FL_FOREGROUND_COLOR);
      typechoice->textsize(10);
      typechoice->callback((Fl_Callback*)cb_typechoice1);
      typechoice->align(Fl_Align(FL_ALIGN_TOP));
      typechoice->when(FL_WHEN_RELEASE_ALWAYS);
      typechoice->menu(menu_typechoice1);
      o->init("parameter10");
    } // Fl_Osc_Choice* typechoice
    { eqgraph = new Fl_EQGraph(85, 35, 140, 55);
      eqgraph->box(FL_BORDER_BOX);
      eqgraph->color(FL_LIGHT1);
      eqgraph->selection_color(FL_BACKGROUND_COLOR);
      eqgraph->labeltype(FL_NORMAL_LABEL);
      eqgraph->labelfont(0);
      eqgraph->labelsize(14);
      eqgraph->labelcolor(FL_FOREGROUND_COLOR);
      eqgraph->align(Fl_Align(FL_ALIGN_CENTER));
      eqgraph->when(FL_WHEN_RELEASE);
    } // Fl_EQGraph* eqgraph
    set_module_parameters(o);
    effeqwindow->end();
  } // Fl_Group* effeqwindow
  return effeqwindow;
}

Fl_Group* SimpleEffUI::make_dynamicfilter_window() {
  { Fl_Group* o = effdynamicfilterwindow = new Fl_Group(0, 0, 230, 100);
    effdynamicfilterwindow->box(FL_UP_BOX);
    effdynamicfilterwindow->color((Fl_Color)51);
    effdynamicfilterwindow->selection_color(FL_BACKGROUND_COLOR);
    effdynamicfilterwindow->labeltype(FL_NO_LABEL);
    effdynamicfilterwindow->labelfont(1);
    effdynamicfilterwindow->labelsize(19);
    effdynamicfilterwindow->labelcolor(FL_FOREGROUND_COLOR);
    effdynamicfilterwindow->user_data((void*)(this));
    effdynamicfilterwindow->align(Fl_Align(FL_ALIGN_TOP));
    effdynamicfilterwindow->when(FL_WHEN_RELEASE);
    { Fl_Osc_Choice* o = dfp = new Fl_Osc_Choice(10, 15, 90, 15, "Preset");
      dfp->box(FL_UP_BOX);
      dfp->down_box(FL_BORDER_BOX);
      dfp->color(FL_DARK1);
      dfp->selection_color(FL_BACKGROUND2_COLOR);
      dfp->labeltype(FL_NORMAL_LABEL);
      dfp->labelfont(1);
      dfp->labelsize(10);
      dfp->labelcolor(FL_FOREGROUND_COLOR);
      dfp->textfont(1);
      dfp->textsize(10);
      dfp->align(Fl_Align(FL_ALIGN_TOP_LEFT));
      dfp->when(FL_WHEN_RELEASE);
      dfp->menu(menu_dfp1);
      o->init("preset");
    } // Fl_Osc_Choice* dfp
    { Fl_Osc_Dial* o = dfp0 = new Fl_Osc_Dial(10, 40, 30, 30, "Vol");
      dfp0->tooltip("Effect Volume");
      dfp0->box(FL_ROUND_UP_BOX);
      dfp0->color(FL_BACKGROUND_COLOR);
      dfp0->selection_color(FL_INACTIVE_COLOR);
      dfp0->labeltype(FL_NORMAL_LABEL);
      dfp0->labelfont(1);
      dfp0->labelsize(11);
      dfp0->labelcolor(FL_FOREGROUND_COLOR);
      dfp0->maximum(127);
      dfp0->align(Fl_Align(FL_ALIGN_BOTTOM));
      dfp0->when(FL_WHEN_CHANGED);
      o->init("parameter0");
    } // Fl_Osc_Dial* dfp0
    { Fl_Osc_Dial* o = dfp2 = new Fl_Osc_Dial(45, 40, 30, 30, "Freq");
      dfp2->tooltip("LFO frequency");
      dfp2->box(FL_ROUND_UP_BOX);
      dfp2->color(FL_BACKGROUND_COLOR);
      dfp2->selection_color(FL_INACTIVE_COLOR);
      dfp2->labeltype(FL_NORMAL_LABEL);
      dfp2->labelfont(1);
      dfp2->labelsize(11);
      dfp2->labelcolor(FL_FOREGROUND_COLOR);
      dfp2->maximum(127);
      dfp2->align(Fl_Align(FL_ALIGN_BOTTOM));
      dfp2->when(FL_WHEN_CHANGED);
      o->init("parameter2");
    } // Fl_Osc_Dial* dfp2
    { Fl_Osc_Dial* o = dfp6 = new Fl_Osc_Dial(80, 40, 30, 30, "LfoD");
      dfp6->tooltip("LFO depth");
      dfp6->box(FL_ROUND_UP_BOX);
      dfp6->color(FL_BACKGROUND_COLOR);
      dfp6->selection_color(FL_INACTIVE_COLOR);
      dfp6->labeltype(FL_NORMAL_LABEL);
      dfp6->labelfont(1);
      dfp6->labelsize(11);
      dfp6->labelcolor(FL_FOREGROUND_COLOR);
      dfp6->maximum(127);
      dfp6->align(Fl_Align(FL_ALIGN_BOTTOM));
      dfp6->when(FL_WHEN_CHANGED);
      o->init("parameter6");
    } // Fl_Osc_Dial* dfp6
    { Fl_Group* o = new Fl_Group(115, 40, 65, 45);
      o->box(FL_UP_FRAME);
      { Fl_Osc_Dial* o = dfp7 = new Fl_Osc_Dial(120, 45, 25, 25, "A.S.");
        dfp7->tooltip("how filter varies with amplitude");
        dfp7->box(FL_ROUND_UP_BOX);
        dfp7->color(FL_BACKGROUND_COLOR);
        dfp7->selection_color(FL_INACTIVE_COLOR);
        dfp7->labeltype(FL_NORMAL_LABEL);
        dfp7->labelfont(1);
        dfp7->labelsize(11);
        dfp7->labelcolor(FL_FOREGROUND_COLOR);
        dfp7->maximum(127);
        dfp7->align(Fl_Align(FL_ALIGN_BOTTOM));
        dfp7->when(FL_WHEN_CHANGED);
        o->init("parameter7");
      } // Fl_Osc_Dial* dfp7
      { Fl_Osc_Dial* o = dfp9 = new Fl_Osc_Dial(150, 45, 25, 25, "A.M");
        dfp9->tooltip("how quickly the filter varies with amplitude");
        dfp9->box(FL_ROUND_UP_BOX);
        dfp9->color(FL_BACKGROUND_COLOR);
        dfp9->selection_color(FL_INACTIVE_COLOR);
        dfp9->labeltype(FL_NORMAL_LABEL);
        dfp9->labelfont(1);
        dfp9->labelsize(11);
        dfp9->labelcolor(FL_FOREGROUND_COLOR);
        dfp9->maximum(127);
        dfp9->align(Fl_Align(FL_ALIGN_BOTTOM));
        dfp9->when(FL_WHEN_CHANGED);
        o->init("parameter9");
      } // Fl_Osc_Dial* dfp9
      o->end();
    } // Fl_Group* o
    set_module_parameters(o);
    effdynamicfilterwindow->end();
  } // Fl_Group* effdynamicfilterwindow
  return effdynamicfilterwindow;
}

void SimpleEffUI::init(bool ins_) {
  efftype = 0;
      insertion = ins_;
  make_null_window();
  make_reverb_window();
  make_echo_window();
  make_chorus_window();
  make_phaser_window();
  make_alienwah_window();
  make_distorsion_window();
  make_eq_window();
  make_dynamicfilter_window();
  
  int px=this->parent()->x();
  int py=this->parent()->y();
  
  effnullwindow->position(px,py);
  effreverbwindow->position(px,py);
  effechowindow->position(px,py);
  effchoruswindow->position(px,py);
  effphaserwindow->position(px,py);
  effalienwahwindow->position(px,py);
  effdistorsionwindow->position(px,py);
  effeqwindow->position(px,py);
  effdynamicfilterwindow->position(px,py);
}

void SimpleEffUI::refresh() {
  this->hide();
  
  for(int i=0; i<32; ++i)
      osc->requestValue(loc()+"parameter"+to_s(i));
  
  effnullwindow->hide();
  effreverbwindow->hide();
  effechowindow->hide();
  effchoruswindow->hide();
  effphaserwindow->hide();
  effalienwahwindow->hide();
  effdistorsionwindow->hide();
  effeqwindow->hide();
  effdynamicfilterwindow->hide();
  
  eqband=0;
  
      if(insertion) {
  	    revp0->label("D/W");
  	    echop0->label("D/W");
  	    chorusp0->label("D/W");
  	    phaserp0->label("D/W");
  	    awp0->label("D/W");
  	    distp0->label("D/W");
  	    dfp0->label("D/W");
      }
  
  switch(efftype){
       case 1:
          effreverbwindow->show();
          break; 
       case 2:
  	effechowindow->show();
          break; 
       case 3:
  	effchoruswindow->show();
          break; 
       case 4:
  	effphaserwindow->show();
          break; 
       case 5:
  	effalienwahwindow->show();
          break; 
       case 6:
  	effdistorsionwindow->show();
          break;
       case 7:
  	bandcounter->value(eqband);
  	bandcounter->do_callback();
  	effeqwindow->show();
          break;
       case 8:
  	effdynamicfilterwindow->show();
  	break;
      default:effnullwindow->show();
              break; 
  };
  
  this->show();
}
