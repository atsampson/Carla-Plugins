// generated by Fast Light User Interface Designer (fluid) version 1.0300

#ifndef PADnoteUI_h
#define PADnoteUI_h
#include <FL/Fl.H>
#include "../Params/PADnoteParameters.h"
#include "ResonanceUI.h"
#include <FL/Fl_Box.H>
#include <FL/Fl_Group.H>
#include <FL/Fl_File_Chooser.H>
#include <string>
#include "Fl_Osc_TSlider.H"
#include "Fl_Osc_VSlider.H"
#include "EnvelopeUI.h"
#include "LFOUI.h"
#include "FilterUI.h"
#include "OscilGenUI.h"
#include "Fl_PADnoteOvertonePosition.h"
#include "Fl_PADnoteHarmonicProfile.h"
#include "PresetsUI.h"
#include <FL/Fl_Box.H>
#include <FL/Fl_Tabs.H>
#include <FL/Fl_Group.H>
#include <FL/Fl_Button.H>

class PADnoteUI : public PresetsUI_ {
public:
  PADnoteUI(std::string location_, Fl_Osc_Interface *osc_);
  Fl_Osc_Window* make_window();
  Fl_Osc_Window *padnotewindow;
  Fl_Box *dummy;
private:
  void cb__i(Fl_Tabs*, void*);
  static void cb_(Fl_Tabs*, void*);
public:
  Fl_Osc_Group *harmonicstructuregroup;
  Fl_Osc_Group *bwprofilegroup;
  Fl_Osc_Dial *hpbasepar1;
private:
  void cb_hpbasepar1_i(Fl_Osc_Dial*, void*);
  static void cb_hpbasepar1(Fl_Osc_Dial*, void*);
public:
  Fl_Osc_Choice *hpbasetype;
private:
  void cb_hpbasetype_i(Fl_Osc_Choice*, void*);
  static void cb_hpbasetype(Fl_Osc_Choice*, void*);
  static Fl_Menu_Item menu_hpbasetype[];
public:
  Fl_Osc_Dial *hpfreqmult;
private:
  void cb_hpfreqmult_i(Fl_Osc_Dial*, void*);
  static void cb_hpfreqmult(Fl_Osc_Dial*, void*);
public:
  Fl_Osc_Dial *hpmpar1;
private:
  void cb_hpmpar1_i(Fl_Osc_Dial*, void*);
  static void cb_hpmpar1(Fl_Osc_Dial*, void*);
public:
  Fl_Osc_Dial *hpmfreq;
private:
  void cb_hpmfreq_i(Fl_Osc_Dial*, void*);
  static void cb_hpmfreq(Fl_Osc_Dial*, void*);
public:
  Fl_Osc_Choice *hpamptype;
private:
  void cb_hpamptype_i(Fl_Osc_Choice*, void*);
  static void cb_hpamptype(Fl_Osc_Choice*, void*);
  static Fl_Menu_Item menu_hpamptype[];
public:
  Fl_Osc_Choice *hpampmode;
private:
  void cb_hpampmode_i(Fl_Osc_Choice*, void*);
  static void cb_hpampmode(Fl_Osc_Choice*, void*);
  static Fl_Menu_Item menu_hpampmode[];
public:
  Fl_Osc_Dial *hpamppar1;
private:
  void cb_hpamppar1_i(Fl_Osc_Dial*, void*);
  static void cb_hpamppar1(Fl_Osc_Dial*, void*);
public:
  Fl_Osc_Dial *hpamppar2;
private:
  void cb_hpamppar2_i(Fl_Osc_Dial*, void*);
  static void cb_hpamppar2(Fl_Osc_Dial*, void*);
public:
  Fl_Osc_Check *hpautoscale;
private:
  void cb_hpautoscale_i(Fl_Osc_Check*, void*);
  static void cb_hpautoscale(Fl_Osc_Check*, void*);
public:
  Fl_Osc_Choice *hponehalf;
private:
  void cb_hponehalf_i(Fl_Osc_Choice*, void*);
  static void cb_hponehalf(Fl_Osc_Choice*, void*);
  static Fl_Menu_Item menu_hponehalf[];
public:
  Fl_Osc_Dial *hpwidth;
private:
  void cb_hpwidth_i(Fl_Osc_Dial*, void*);
  static void cb_hpwidth(Fl_Osc_Dial*, void*);
public:
  Fl_Osc_Group *oscilgroup;
private:
  void cb_Change_i(Fl_Button*, void*);
  static void cb_Change(Fl_Button*, void*);
public:
  Fl_Box *cbwidget;
private:
  void cb_cbwidget_i(Fl_Box*, void*);
  static void cb_cbwidget(Fl_Box*, void*);
  void cb_Resonance_i(Fl_Button*, void*);
  static void cb_Resonance(Fl_Button*, void*);
public:
  Fl_Osc_Dial *bwdial;
private:
  void cb_bwdial_i(Fl_Osc_Dial*, void*);
  static void cb_bwdial(Fl_Osc_Dial*, void*);
public:
  Fl_Osc_Output *bwcents;
  Fl_Osc_Choice *hrpostype;
private:
  void cb_hrpostype_i(Fl_Osc_Choice*, void*);
  static void cb_hrpostype(Fl_Osc_Choice*, void*);
  static Fl_Menu_Item menu_hrpostype[];
public:
  Fl_Osc_Dial *hrpospar1;
private:
  void cb_hrpospar1_i(Fl_Osc_Dial*, void*);
  static void cb_hrpospar1(Fl_Osc_Dial*, void*);
public:
  Fl_Osc_Dial *hrpospar2;
private:
  void cb_hrpospar2_i(Fl_Osc_Dial*, void*);
  static void cb_hrpospar2(Fl_Osc_Dial*, void*);
public:
  Fl_Osc_Dial *hrpospar3;
private:
  void cb_hrpospar3_i(Fl_Osc_Dial*, void*);
  static void cb_hrpospar3(Fl_Osc_Dial*, void*);
public:
  Fl_Osc_Choice *bwscale;
private:
  void cb_bwscale_i(Fl_Osc_Choice*, void*);
  static void cb_bwscale(Fl_Osc_Choice*, void*);
  static Fl_Menu_Item menu_bwscale[];
public:
  Fl_Group *overtonepos;
  Fl_Osc_Choice *qsamplesize;
private:
  void cb_qsamplesize_i(Fl_Osc_Choice*, void*);
  static void cb_qsamplesize(Fl_Osc_Choice*, void*);
  static Fl_Menu_Item menu_qsamplesize[];
public:
  Fl_Osc_Choice *qsmpoct;
private:
  void cb_qsmpoct_i(Fl_Osc_Choice*, void*);
  static void cb_qsmpoct(Fl_Osc_Choice*, void*);
  static Fl_Menu_Item menu_qsmpoct[];
public:
  Fl_Osc_Choice *qoct;
private:
  void cb_qoct_i(Fl_Osc_Choice*, void*);
  static void cb_qoct(Fl_Osc_Choice*, void*);
  static Fl_Menu_Item menu_qoct[];
public:
  Fl_Osc_Choice *qbasenote;
private:
  void cb_qbasenote_i(Fl_Osc_Choice*, void*);
  static void cb_qbasenote(Fl_Osc_Choice*, void*);
  static Fl_Menu_Item menu_qbasenote[];
public:
  Fl_Group *hprofile;
  Fl_Osc_Choice *spectrummode;
private:
  void cb_spectrummode_i(Fl_Osc_Choice*, void*);
  static void cb_spectrummode(Fl_Osc_Choice*, void*);
  static Fl_Menu_Item menu_spectrummode[];
public:
  EnvelopeUI *freqenv;
  Fl_Osc_Counter *octave;
  Fl_Osc_Counter *coarsedet;
  LFOUI *freqlfo;
  Fl_Osc_Slider *detune;
private:
  void cb_detune_i(Fl_Osc_Slider*, void*);
  static void cb_detune(Fl_Osc_Slider*, void*);
public:
  Fl_Osc_Output *detunevalueoutput;
  Fl_Osc_Choice *detunetype;
private:
  void cb_detunetype_i(Fl_Osc_Choice*, void*);
  static void cb_detunetype(Fl_Osc_Choice*, void*);
public:
  Fl_Osc_Dial *bendadjustdial;
  Fl_Osc_Dial *offsethzdial;
  Fl_Osc_Check *hz440;
private:
  void cb_hz440_i(Fl_Osc_Check*, void*);
  static void cb_hz440(Fl_Osc_Check*, void*);
public:
  Fl_Osc_Dial *fixedfreqetdial;
  Fl_Osc_VSlider *volume;
  Fl_Osc_VSlider *vsns;
  Fl_Osc_Dial *pan;
  Fl_Osc_Dial *pstr;
  Fl_Osc_Dial *pt;
  Fl_Osc_Dial *pstc;
  Fl_Osc_Dial *pvel;
  EnvelopeUI *ampenv;
  LFOUI *amplfo;
  Fl_Osc_Check *stereo;
private:
  void cb_stereo_i(Fl_Osc_Check*, void*);
  static void cb_stereo(Fl_Osc_Check*, void*);
public:
  EnvelopeUI *filterenv;
  LFOUI *filterlfo;
  FilterUI *filterui;
  Fl_Button *applybutton;
private:
  void cb_applybutton_i(Fl_Button*, void*);
  static void cb_applybutton(Fl_Button*, void*);
  void cb_Close_i(Fl_Button*, void*);
  static void cb_Close(Fl_Button*, void*);
  void cb_C_i(Fl_Button*, void*);
  static void cb_C(Fl_Button*, void*);
  void cb_P_i(Fl_Button*, void*);
  static void cb_P(Fl_Button*, void*);
  void cb_export_i(Fl_Osc_Button*, void*);
  static void cb_export(Fl_Osc_Button*, void*);
public:
  void refresh();
  ~PADnoteUI();
  OscilEditor *oscui; 
private:
  bool initialized; 
public:
  Fl_Oscilloscope *osc; 
  ResonanceUI *resui; 
private:
  std::string location; 
  Fl_Osc_Interface *osc_i; 
  PADnoteHarmonicProfile *hpui; 
  PADnoteOvertonePosition *opui; 
  class Osc_IntModel *apply_watcher;
};
#endif
