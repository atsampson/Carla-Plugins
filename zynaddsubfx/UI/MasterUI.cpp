// generated by Fast Light User Interface Designer (fluid) version 1.0300

#include "external/zynaddsubfx/UI/MasterUI.h"
//Copyright (c) 2002-2009 Nasca Octavian Paul - (c) 2009-2017 Mark McCurry
//License: GNU GPL version 2 or later
#if ! defined(PLUGINVERSION) && HAS_X11
#include "zynaddsubfx.xpm"
#endif
#include "Fl_Osc_Dial.H"
#include "Osc_DataModel.h"
#include "Fl_Osc_TSlider.H"

SysEffSend::SysEffSend(int x,int y, int w, int h, const char *label):Fl_Osc_Dial(x,y,w,h,label) {
}

void SysEffSend::init(int neff1,int neff2) {
  //TODO figure out if this extra class is even needed
  minimum(0);
  maximum(127);
  step(1);
  labelfont(1);
  labelsize(10);
  align(FL_ALIGN_TOP);
  
  Fl_Osc_Dial::init("part"+to_s(neff1)+"/sysefxsend"+to_s(neff2));
  char tmp[20];snprintf(tmp,20,"%d->%d",neff1+1,neff2+1);
  this->copy_label(tmp);
}

SysEffSend::~SysEffSend() {
  hide();
}

void Panellistitem::cb_partname_i(PartNameButton*, void*) {
  if ((int)bankui->cbwig->value()!=(npart+1)){
   bankui->cbwig->value(npart+1);
   bankui->cbwig->do_callback();
};
bankui->show();
}
void Panellistitem::cb_partname(PartNameButton* o, void* v) {
  ((Panellistitem*)(o->parent()->parent()->user_data()))->cb_partname_i(o,v);
}

void Panellistitem::cb_edit_i(Fl_Button*, void*) {
  if ((int)bankui->cbwig->value()!=(npart+1)){
   bankui->cbwig->value(npart+1);
   bankui->cbwig->do_callback();
   }
   if (Fl::event_shift())
        partui->instrumenteditwindow->show();
   else if (Fl::event_ctrl())
        partui->instrumentkitlist->show();
}
void Panellistitem::cb_edit(Fl_Button* o, void* v) {
  ((Panellistitem*)(o->parent()->parent()->user_data()))->cb_edit_i(o,v);
}

void Panellistitem::cb_partenabled_i(Fl_Osc_Check* o, void*) {
  if ((int) o->value()==0) panellistitemgroup->deactivate();
            else {
                panellistitemgroup->activate();
            };

            o->redraw();
}
void Panellistitem::cb_partenabled(Fl_Osc_Check* o, void* v) {
  ((Panellistitem*)(o->parent()->user_data()))->cb_partenabled_i(o,v);
}

Fl_Group* Panellistitem::make_window() {
  { panellistitem = new Fl_Group(0, 0, 100, 260);
    panellistitem->box(FL_NO_BOX);
    panellistitem->color(FL_BACKGROUND_COLOR);
    panellistitem->selection_color(FL_BACKGROUND_COLOR);
    panellistitem->labeltype(FL_NO_LABEL);
    panellistitem->labelfont(0);
    panellistitem->labelsize(14);
    panellistitem->labelcolor(FL_FOREGROUND_COLOR);
    panellistitem->user_data((void*)(this));
    panellistitem->align(Fl_Align(FL_ALIGN_TOP));
    panellistitem->when(FL_WHEN_RELEASE);
    { Fl_Group* o = panellistitemgroup = new Fl_Group(0, 20, 70, 240);
      panellistitemgroup->box(FL_UP_FRAME);
      { Fl_Group* o = new Fl_Group(45, 65, 15, 110);
        o->box(FL_ENGRAVED_FRAME);
        { partvu = new VuPartMeter(45, 65, 15, 110, "V U");
          partvu->box(FL_FLAT_BOX);
          partvu->color(FL_FOREGROUND_COLOR);
          partvu->selection_color((Fl_Color)75);
          partvu->labeltype(FL_NORMAL_LABEL);
          partvu->labelfont(0);
          partvu->labelsize(14);
          partvu->labelcolor((Fl_Color)55);
          partvu->align(Fl_Align(FL_ALIGN_WRAP));
          partvu->when(FL_WHEN_RELEASE);
        } // VuPartMeter* partvu
        o->end();
      } // Fl_Group* o
      { PartNameButton* o = partname = new PartNameButton(5, 27, 60, 30, "  ");
        partname->box(FL_THIN_DOWN_BOX);
        partname->down_box(FL_FLAT_BOX);
        partname->color(FL_BACKGROUND_COLOR);
        partname->selection_color(FL_BACKGROUND_COLOR);
        partname->labeltype(FL_NORMAL_LABEL);
        partname->labelfont(1);
        partname->labelsize(10);
        partname->labelcolor(FL_FOREGROUND_COLOR);
        partname->callback((Fl_Callback*)cb_partname);
        partname->align(Fl_Align(192|FL_ALIGN_INSIDE));
        partname->when(FL_WHEN_RELEASE);
        o->ext = "Pname";o->oscRegister("Pname");
      } // PartNameButton* partname
      { Fl_Osc_TSlider* o = partvolume = new Fl_Osc_TSlider(10, 65, 30, 110);
        partvolume->type(4);
        partvolume->box(FL_NO_BOX);
        partvolume->color(FL_BACKGROUND_COLOR);
        partvolume->selection_color(FL_BACKGROUND_COLOR);
        partvolume->labeltype(FL_NORMAL_LABEL);
        partvolume->labelfont(0);
        partvolume->labelsize(14);
        partvolume->labelcolor(FL_FOREGROUND_COLOR);
        partvolume->minimum(127);
        partvolume->maximum(0);
        partvolume->step(1);
        partvolume->value(127);
        partvolume->align(Fl_Align(FL_ALIGN_BOTTOM));
        partvolume->when(FL_WHEN_CHANGED);
        o->init("Pvolume", 'i');o->reset_value=96;
      } // Fl_Osc_TSlider* partvolume
      { Fl_Osc_Dial* o = partpanning = new Fl_Osc_Dial(20, 180, 30, 30);
        partpanning->box(FL_NO_BOX);
        partpanning->color(FL_BACKGROUND_COLOR);
        partpanning->selection_color(FL_INACTIVE_COLOR);
        partpanning->labeltype(FL_NORMAL_LABEL);
        partpanning->labelfont(0);
        partpanning->labelsize(14);
        partpanning->labelcolor(FL_FOREGROUND_COLOR);
        partpanning->maximum(127);
        partpanning->step(1);
        partpanning->align(Fl_Align(FL_ALIGN_BOTTOM));
        partpanning->when(FL_WHEN_CHANGED);
        o->init("Ppanning");o->reset_value=64;
      } // Fl_Osc_Dial* partpanning
      { Fl_Button* o = new Fl_Button(15, 235, 40, 20, "edit");
        o->labelsize(10);
        o->callback((Fl_Callback*)cb_edit);
      } // Fl_Button* o
      { Fl_Osc_Choice* o = partrcv = new Fl_Osc_Choice(10, 213, 50, 15);
        partrcv->tooltip("receive from Midi channel");
        partrcv->box(FL_UP_BOX);
        partrcv->down_box(FL_BORDER_BOX);
        partrcv->color(FL_BACKGROUND_COLOR);
        partrcv->selection_color(FL_SELECTION_COLOR);
        partrcv->labeltype(FL_NORMAL_LABEL);
        partrcv->labelfont(0);
        partrcv->labelsize(10);
        partrcv->labelcolor(FL_FOREGROUND_COLOR);
        partrcv->textfont(1);
        partrcv->textsize(10);
        partrcv->align(Fl_Align(FL_ALIGN_TOP_LEFT));
        partrcv->when(FL_WHEN_RELEASE);
        char nrstr[10]; for(int i=0;i<NUM_MIDI_CHANNELS;i++){sprintf(nrstr,"Ch%d",i+1);if (i!=9) o->add(nrstr); else o->add("Dr10");};
        o->init("Prcvchn");
      } // Fl_Osc_Choice* partrcv
      /*if (master->part[npart]->Penabled==0) o->deactivate();*/
      set_module_parameters( o );
      panellistitemgroup->end();
    } // Fl_Group* panellistitemgroup
    { Fl_Osc_Check* o = partenabled = new Fl_Osc_Check(5, 0, 45, 20, "01");
      partenabled->box(FL_NO_BOX);
      partenabled->down_box(FL_DOWN_BOX);
      partenabled->color(FL_BACKGROUND_COLOR);
      partenabled->selection_color(FL_FOREGROUND_COLOR);
      partenabled->labeltype(FL_EMBOSSED_LABEL);
      partenabled->labelfont(1);
      partenabled->labelsize(13);
      partenabled->labelcolor(FL_FOREGROUND_COLOR);
      partenabled->callback((Fl_Callback*)cb_partenabled);
      partenabled->align(Fl_Align(FL_ALIGN_RIGHT|FL_ALIGN_INSIDE));
      partenabled->when(FL_WHEN_RELEASE);
      char tmp[10];snprintf(tmp,10,"%d",npart+1);o->copy_label(tmp);
      o->init("Penabled");
    } // Fl_Osc_Check* partenabled
    panellistitem->end();
  } // Fl_Group* panellistitem
  return panellistitem;
}

Panellistitem::Panellistitem(int x,int y, int w, int h, const char *label):Fl_Osc_Group(x,y,w,h,label) {
  npart=0;
  bankui=NULL;
}

void Panellistitem::init(int npart_,BankUI *bankui_, PartUI *partui_) {
  npart=npart_;
  bankui=bankui_;
  partui=partui_;
  ext = "part"+to_s(npart)+"/";
  
  make_window();
  panellistitem->show();
  end();
}

void Panellistitem::refresh() {
  partenabled->update();
      partrcv->update();
      partpanning->update();
      partvolume->update();
      partname->update();
      
      if ((int)bankui->cbwig->value()!=(npart+1))
     panellistitemgroup->color(fl_rgb_color(160,160,160));
  else 
     panellistitemgroup->color(fl_rgb_color(50,190,240));
  
  panellistitemgroup->redraw();
}

Panellistitem::~Panellistitem() {
}

void MasterUI::cb_masterwindow_i(Fl_Osc_Window*, void*) {
  if ((isPlugin
#if USE_NSM
 || (nsm && nsm->is_active())
#endif
 || fl_choice("Exit and leave the unsaved data?","No","Yes",NULL))) {
    close();
};
}
void MasterUI::cb_masterwindow(Fl_Osc_Window* o, void* v) {
  ((MasterUI*)(o->user_data()))->cb_masterwindow_i(o,v);
}

void MasterUI::cb_New_i(Fl_Menu_*, void*) {
  do_new_master();
}
void MasterUI::cb_New(Fl_Menu_* o, void* v) {
  ((MasterUI*)(o->parent()->parent()->user_data()))->cb_New_i(o,v);
}

void MasterUI::cb_Revert_i(Fl_Menu_*, void*) {
  do_revert_changes();
}
void MasterUI::cb_Revert(Fl_Menu_* o, void* v) {
  ((MasterUI*)(o->parent()->parent()->user_data()))->cb_Revert_i(o,v);
}

void MasterUI::cb_Open_i(Fl_Menu_*, void*) {
  #if USE_NSM
            if ( nsm && nsm->is_active() )
            {
                do_load_master();
                do_save_master( nsm->project_filename );
            }
            else
#endif
            {
                do_load_master();
            };
}
void MasterUI::cb_Open(Fl_Menu_* o, void* v) {
  ((MasterUI*)(o->parent()->parent()->user_data()))->cb_Open_i(o,v);
}

void MasterUI::cb_Save_i(Fl_Menu_*, void*) {
  #if USE_NSM
            if ( nsm && nsm->is_active() )
            {
                do_save_master( nsm->project_filename );
            }
            else
#endif
            {
                 do_save_master();
            };
}
void MasterUI::cb_Save(Fl_Menu_* o, void* v) {
  ((MasterUI*)(o->parent()->parent()->user_data()))->cb_Save_i(o,v);
}

void MasterUI::cb_Load_i(Fl_Menu_*, void*) {
  char *filename;
filename=fl_file_chooser("Open:","({*.xlz})",NULL,0);
if (filename==NULL) return;

osc->write("/load_xlz", "s", filename);
}
void MasterUI::cb_Load(Fl_Menu_* o, void* v) {
  ((MasterUI*)(o->parent()->parent()->user_data()))->cb_Load_i(o,v);
}

void MasterUI::cb_Clear_i(Fl_Menu_*, void*) {
  osc->write("/clear_xlz", "");
}
void MasterUI::cb_Clear(Fl_Menu_* o, void* v) {
  ((MasterUI*)(o->parent()->parent()->user_data()))->cb_Clear_i(o,v);
}

void MasterUI::cb_Save1_i(Fl_Menu_*, void*) {
  char *filename;
int result;
filename=fl_file_chooser("Save:","({*.xlz})",NULL,0);
if (filename==NULL) return;
filename=fl_filename_setext(filename,".xlz");

result=fileexists(filename);
if (result) {
    result=0;
   if (!fl_choice("The file exists. \nOverwrite it?","No","Yes",NULL)) return;
};

osc->write("/save_xlz", "s", filename);
}
void MasterUI::cb_Save1(Fl_Menu_* o, void* v) {
  ((MasterUI*)(o->parent()->parent()->user_data()))->cb_Save1_i(o,v);
}

void MasterUI::cb_Load1_i(Fl_Menu_*, void*) {
  char *filename;
filename=fl_file_chooser("Open:","({*.xsz})",NULL,0);
if (filename==NULL) return;

osc->write("/load_xsz", "s", filename);
}
void MasterUI::cb_Load1(Fl_Menu_* o, void* v) {
  ((MasterUI*)(o->parent()->parent()->user_data()))->cb_Load1_i(o,v);
}

void MasterUI::cb_Save2_i(Fl_Menu_*, void*) {
  char *filename;
int result=0;

filename=fl_file_chooser("Save:","({*.xsz})",NULL,0);
if (filename==NULL) return;
filename=fl_filename_setext(filename,".xsz");

result=fileexists(filename);
if (result) {
    result=0;
   if (!fl_choice("The file exists. \nOverwrite it?","No","Yes",NULL)) return;
       
};


osc->write("/save_xsz", "s", filename);
}
void MasterUI::cb_Save2(Fl_Menu_* o, void* v) {
  ((MasterUI*)(o->parent()->parent()->user_data()))->cb_Save2_i(o,v);
}

void MasterUI::cb_Show_i(Fl_Menu_*, void*) {
  microtonalui->show();
}
void MasterUI::cb_Show(Fl_Menu_* o, void* v) {
  ((MasterUI*)(o->parent()->parent()->user_data()))->cb_Show_i(o,v);
}

void MasterUI::cb_Settings_i(Fl_Menu_*, void*) {
  configui->show();
}
void MasterUI::cb_Settings(Fl_Menu_* o, void* v) {
  ((MasterUI*)(o->parent()->parent()->user_data()))->cb_Settings_i(o,v);
}

void MasterUI::cb_N_i(Fl_Menu_*, void*) {
  nioui.refresh();
nioui.show();
}
void MasterUI::cb_N(Fl_Menu_* o, void* v) {
  ((MasterUI*)(o->parent()->parent()->user_data()))->cb_N_i(o,v);
}

void MasterUI::cb_Copyright_i(Fl_Menu_*, void*) {
  aboutwindow->show();
}
void MasterUI::cb_Copyright(Fl_Menu_* o, void* v) {
  ((MasterUI*)(o->parent()->parent()->user_data()))->cb_Copyright_i(o,v);
}

void MasterUI::cb_E_i(Fl_Menu_*, void*) {
  masterwindow->do_callback();
}
void MasterUI::cb_E(Fl_Menu_* o, void* v) {
  ((MasterUI*)(o->parent()->parent()->user_data()))->cb_E_i(o,v);
}

void MasterUI::cb_Clear1_i(Fl_Menu_*, void*) {
  if (fl_choice("Clear instrument's parameters ?","No","Yes",NULL)){
//       int npart=(int)npartcounter->value()-1;
       osc->write("/part"+to_s(npart)+"/clear");
};

updatepanel();
}
void MasterUI::cb_Clear1(Fl_Menu_* o, void* v) {
  ((MasterUI*)(o->parent()->parent()->user_data()))->cb_Clear1_i(o,v);
}

void MasterUI::cb_Open1_i(Fl_Menu_*, void*) {
  const char *filename;
filename=fl_file_chooser("Load:","({*.xiz})",NULL,0);
if (filename==NULL) return;


osc->write("/load_xiz", "is", npart, filename);
npartcounter->do_callback();
updatepanel();

/*
if (result==-10) fl_alert("Error: Could not load the file\nbecause it is not an instrument file.");
      else if (result<0) fl_alert("Error: Could not load the file.");*/;
}
void MasterUI::cb_Open1(Fl_Menu_* o, void* v) {
  ((MasterUI*)(o->parent()->parent()->user_data()))->cb_Open1_i(o,v);
}

void MasterUI::cb_Save3_i(Fl_Menu_*, void*) {
  char *filename;

filename=fl_file_chooser("Save:","({*.xiz})",NULL,0);
if (filename==NULL) return;
filename=fl_filename_setext(filename,".xiz");

int result=fileexists(filename);
if (result) {
    result=0;
   if (!fl_choice("The file exists. \nOverwrite it?","No","Yes",NULL)) return;
       
};

osc->write("/save_xiz", "is", npart, filename);
/*if (result<0) fl_alert("Error: Could not save the file.");*/;
}
void MasterUI::cb_Save3(Fl_Menu_* o, void* v) {
  ((MasterUI*)(o->parent()->parent()->user_data()))->cb_Save3_i(o,v);
}

void MasterUI::cb_Show1_i(Fl_Menu_*, void*) {
  bankui->show();
}
void MasterUI::cb_Show1(Fl_Menu_* o, void* v) {
  ((MasterUI*)(o->parent()->parent()->user_data()))->cb_Show1_i(o,v);
}

void MasterUI::cb_Virtual_i(Fl_Menu_*, void*) {
  virkeyboard->show();
}
void MasterUI::cb_Virtual(Fl_Menu_* o, void* v) {
  ((MasterUI*)(o->parent()->parent()->user_data()))->cb_Virtual_i(o,v);
}

void MasterUI::cb_Choose_i(Fl_Menu_*, void*) {
  char *filename;
recordbutton->deactivate();
pausebutton->deactivate();
pauselabel->deactivate();
stopbutton->deactivate();
filename=fl_file_chooser("Record to audio file:","(*.wav)",NULL,0);
if (filename==NULL) return;
fl_filename_setext(filename,".wav");

//TODO TODO Test if a file exists
if (fl_choice("The file *might* exist. \nOverwrite it?","No","Yes",NULL)) {
    osc->write("/HDDRecorder/preparefile", "s", filename);
    recordbutton->activate();//TODO make this button osc controlled
}

/*if (result!=0) fl_alert("Error: Could not save the file.");*/;
}
void MasterUI::cb_Choose(Fl_Menu_* o, void* v) {
  ((MasterUI*)(o->parent()->parent()->user_data()))->cb_Choose_i(o,v);
}

void MasterUI::cb_Switch_i(Fl_Menu_*, void*) {
  if (fl_choice("Switch the User Interface to Beginner mode ?","No","Yes",NULL)){
	masterwindow->hide();
	refresh_master_ui();
	simplemasterwindow->show();
    osc->write("/cfg.UserInterfaceMode", "i", 2);
};
}
void MasterUI::cb_Switch(Fl_Menu_* o, void* v) {
  ((MasterUI*)(o->parent()->parent()->user_data()))->cb_Switch_i(o,v);
}

Fl_Menu_Item MasterUI::menu_mastermenu[] = {
 {"&File", 0,  0, 0, 64, FL_NORMAL_LABEL, 0, 14, 0},
 {"&New (erase all)...", 0,  (Fl_Callback*)MasterUI::cb_New, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"&Revert changes...", 0,  (Fl_Callback*)MasterUI::cb_Revert, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"&Open Parameters...", 0,  (Fl_Callback*)MasterUI::cb_Open, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"&Save All Parameters...", 0,  (Fl_Callback*)MasterUI::cb_Save, 0, 128, FL_NORMAL_LABEL, 0, 14, 0},
 {"&Load Midi Learn...", 0,  (Fl_Callback*)MasterUI::cb_Load, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Clear Midi Learn...", 0,  (Fl_Callback*)MasterUI::cb_Clear, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Save Midi Learn...", 0,  (Fl_Callback*)MasterUI::cb_Save1, 0, 128, FL_NORMAL_LABEL, 0, 14, 0},
 {"&Load Scale Settings...", 0,  (Fl_Callback*)MasterUI::cb_Load1, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Save Sc&ale Settings ..", 0,  (Fl_Callback*)MasterUI::cb_Save2, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Show Scale Settings...", 0,  (Fl_Callback*)MasterUI::cb_Show, 0, 128, FL_NORMAL_LABEL, 0, 14, 0},
 {"&Settings...", 0,  (Fl_Callback*)MasterUI::cb_Settings, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"N&io Settings", 0,  (Fl_Callback*)MasterUI::cb_N, 0, 128, FL_NORMAL_LABEL, 0, 14, 0},
 {"&Copyright...", 0,  (Fl_Callback*)MasterUI::cb_Copyright, 0, 128, FL_NORMAL_LABEL, 0, 14, 0},
 {"E&xit", 0,  (Fl_Callback*)MasterUI::cb_E, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0},
 {"&Instrument", 0,  0, 0, 64, FL_NORMAL_LABEL, 0, 14, 0},
 {"&Clear Instrument...", 0,  (Fl_Callback*)MasterUI::cb_Clear1, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"&Open Instrument...", 0,  (Fl_Callback*)MasterUI::cb_Open1, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"&Save Instrument ...", 0,  (Fl_Callback*)MasterUI::cb_Save3, 0, 128, FL_NORMAL_LABEL, 0, 14, 0},
 {"Show Instrument &Bank...", 0,  (Fl_Callback*)MasterUI::cb_Show1, 0, 128, FL_NORMAL_LABEL, 0, 14, 0},
 {"&Virtual Keyboard...", 0,  (Fl_Callback*)MasterUI::cb_Virtual, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0},
 {"&Record", 0,  0, 0, 64, FL_NORMAL_LABEL, 0, 14, 0},
 {"&Choose WAV file...", 0,  (Fl_Callback*)MasterUI::cb_Choose, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0},
 {"Misc", 0,  0, 0, 64, FL_NORMAL_LABEL, 0, 14, 0},
 {"Switch User Interface Mode", 0,  (Fl_Callback*)MasterUI::cb_Switch, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0},
 {0,0,0,0,0,0,0,0,0}
};
Fl_Menu_Item* MasterUI::recordmenu = MasterUI::menu_mastermenu + 23;

void MasterUI::cb_Panic_i(Fl_Osc_Button* o, void*) {
  virkeyboard->releaseallkeys();
          o->oscWrite("Panic");
}
void MasterUI::cb_Panic(Fl_Osc_Button* o, void* v) {
  ((MasterUI*)(o->parent()->parent()->user_data()))->cb_Panic_i(o,v);
}

void MasterUI::cb_syseffnocounter_i(Fl_Counter* o, void*) {
  nsyseff=(int) o->value()-1;
              syseffectuigroup->reext("sysefx"+to_s(nsyseff)+"/");
              sysefftype->oscMove("sysefx"+to_s(nsyseff)+"/efftype");
syseffectui->refresh();
}
void MasterUI::cb_syseffnocounter(Fl_Counter* o, void* v) {
  ((MasterUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_syseffnocounter_i(o,v);
}

void MasterUI::cb_sysefftype_i(Fl_Osc_Choice* o, void*) {
  syseffectui->efftype = o->value();
syseffectui->refresh();
}
void MasterUI::cb_sysefftype(Fl_Osc_Choice* o, void* v) {
  ((MasterUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_sysefftype_i(o,v);
}

Fl_Menu_Item MasterUI::menu_sysefftype[] = {
 {"No Effect", 0,  0, 0, 0, FL_NORMAL_LABEL, 1, 10, 0},
 {"Reverb", 0,  0, 0, 0, FL_NORMAL_LABEL, 1, 10, 0},
 {"Echo", 0,  0, 0, 0, FL_NORMAL_LABEL, 1, 10, 0},
 {"Chorus", 0,  0, 0, 0, FL_NORMAL_LABEL, 1, 10, 0},
 {"Phaser", 0,  0, 0, 0, FL_NORMAL_LABEL, 1, 10, 0},
 {"AlienWah", 0,  0, 0, 0, FL_NORMAL_LABEL, 1, 10, 0},
 {"Distortion", 0,  0, 0, 0, FL_NORMAL_LABEL, 1, 10, 0},
 {"EQ", 0,  0, 0, 0, FL_NORMAL_LABEL, 1, 10, 0},
 {"DynFilter", 0,  0, 0, 0, FL_NORMAL_LABEL, 1, 10, 0},
 {0,0,0,0,0,0,0,0,0}
};

void MasterUI::cb_Send_i(Fl_Button*, void*) {
  syseffsendwindow->show();
}
void MasterUI::cb_Send(Fl_Button* o, void* v) {
  ((MasterUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_Send_i(o,v);
}

void MasterUI::cb_C_i(Fl_Button*, void*) {
  presetsui->copy("/sysefx"+to_s(nsyseff)+"/");
}
void MasterUI::cb_C(Fl_Button* o, void* v) {
  ((MasterUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_C_i(o,v);
}

void MasterUI::cb_P_i(Fl_Button*, void*) {
  presetsui->paste("/sysefx"+to_s(nsyseff)+"/",syseffectui);
}
void MasterUI::cb_P(Fl_Button* o, void* v) {
  ((MasterUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_P_i(o,v);
}

void MasterUI::cb_inseffnocounter_i(Fl_Counter* o, void*) {
  ninseff=(int) o->value()-1;
              insefftype->oscMove("insefx"+to_s(ninseff)+"/efftype");
              inseffectuigroup->reext("insefx"+to_s(ninseff)+"/");
              inseffpart->oscMove("Pinsparts"+to_s(ninseff));

              /*
insefftype->value(master->insefx[ninseff]->geteffect());
inseffpart->value(master->Pinsparts[ninseff]+2);
inseffectui->refresh();

if (master->Pinsparts[ninseff]!=-1) {
        insefftype->activate();
	inseffectui->activate();
        inseffectuigroup->activate();
} else {
	insefftype->deactivate();
 	inseffectui->deactivate();
        inseffectuigroup->deactivate();
};*/;
}
void MasterUI::cb_inseffnocounter(Fl_Counter* o, void* v) {
  ((MasterUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_inseffnocounter_i(o,v);
}

void MasterUI::cb_insefftype_i(Fl_Osc_Choice* o, void*) {
  /*pthread_mutex_lock(&master->mutex);
master->insefx[ninseff]->changeeffect((int) o->value());
pthread_mutex_unlock(&master->mutex);*/
inseffectui->efftype = o->value();
inseffectui->refresh();
inseffectui->show();
}
void MasterUI::cb_insefftype(Fl_Osc_Choice* o, void* v) {
  ((MasterUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_insefftype_i(o,v);
}

Fl_Menu_Item MasterUI::menu_insefftype[] = {
 {"No Effect", 0,  0, 0, 0, FL_NORMAL_LABEL, 1, 10, 0},
 {"Reverb", 0,  0, 0, 0, FL_NORMAL_LABEL, 1, 10, 0},
 {"Echo", 0,  0, 0, 0, FL_NORMAL_LABEL, 1, 10, 0},
 {"Chorus", 0,  0, 0, 0, FL_NORMAL_LABEL, 1, 10, 0},
 {"Phaser", 0,  0, 0, 0, FL_NORMAL_LABEL, 1, 10, 0},
 {"AlienWah", 0,  0, 0, 0, FL_NORMAL_LABEL, 1, 10, 0},
 {"Distortion", 0,  0, 0, 0, FL_NORMAL_LABEL, 1, 10, 0},
 {"EQ", 0,  0, 0, 0, FL_NORMAL_LABEL, 1, 10, 0},
 {"DynFilter", 0,  0, 0, 0, FL_NORMAL_LABEL, 1, 10, 0},
 {0,0,0,0,0,0,0,0,0}
};

void MasterUI::cb_inseffpart_i(Fl_Osc_Choice* o, void*) {
  /*master->Pinsparts[ninseff]=(int) o->value()-2;*/
if ((int) o->value()==1){
    inseffectuigroup->deactivate();
    insefftype->deactivate();
    inseffectui->deactivate();
} else {
    inseffectuigroup->activate();
    insefftype->activate();
    inseffectui->activate();
};
/*master->insefx[ninseff]->cleanup();*/;
}
void MasterUI::cb_inseffpart(Fl_Osc_Choice* o, void* v) {
  ((MasterUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_inseffpart_i(o,v);
}

void MasterUI::cb_C1_i(Fl_Button*, void*) {
  presetsui->copy(inseffectuigroup->loc());
}
void MasterUI::cb_C1(Fl_Button* o, void* v) {
  ((MasterUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_C1_i(o,v);
}

void MasterUI::cb_P1_i(Fl_Button*, void*) {
  presetsui->paste(inseffectuigroup->loc(),inseffectui);
}
void MasterUI::cb_P1(Fl_Button* o, void* v) {
  ((MasterUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_P1_i(o,v);
}

void MasterUI::cb_Scales_i(Fl_Button*, void*) {
  microtonalui->show();
}
void MasterUI::cb_Scales(Fl_Button* o, void* v) {
  ((MasterUI*)(o->parent()->parent()->user_data()))->cb_Scales_i(o,v);
}

void MasterUI::cb_recordbutton_i(Fl_Osc_Button* o, void*) {
  o->deactivate();
recordmenu->deactivate();
recordmenu->label("&Record(*)");
stopbutton->activate();
pausebutton->activate();
pauselabel->activate();
o->oscWrite("HDDRecorder/start");
o->oscWrite("reset-vu");
mastermenu->redraw();
}
void MasterUI::cb_recordbutton(Fl_Osc_Button* o, void* v) {
  ((MasterUI*)(o->parent()->parent()->parent()->user_data()))->cb_recordbutton_i(o,v);
}

void MasterUI::cb_stopbutton_i(Fl_Osc_Button* o, void*) {
  o->deactivate();
            o->oscWrite("HDDRecorder/stop");
recordbutton->deactivate();
pausebutton->deactivate();
pauselabel->deactivate();
recordmenu->activate();
recordmenu->label("&Record");
mastermenu->redraw();
}
void MasterUI::cb_stopbutton(Fl_Osc_Button* o, void* v) {
  ((MasterUI*)(o->parent()->parent()->parent()->user_data()))->cb_stopbutton_i(o,v);
}

void MasterUI::cb_pausebutton_i(Fl_Osc_Button* o, void*) {
  o->deactivate();
o->oscWrite("HDDRecorder/pause");
recordbutton->activate();
mastermenu->redraw();
}
void MasterUI::cb_pausebutton(Fl_Osc_Button* o, void* v) {
  ((MasterUI*)(o->parent()->parent()->parent()->user_data()))->cb_pausebutton_i(o,v);
}

void MasterUI::cb_npartcounter_i(Fl_Counter* o, void*) {
  int nval=(int) o->value()-1;
/*partuigroup->remove(partui);
delete partui;
partui=new PartUI(0,0,765,525);
partuigroup->add(partui);
char buffer[1024];
snprintf(buffer, 1024, "/part%d/", nval);
partui->init(master->part[nval], buffer, master, nval, bankui, "/part"+to_s(nval)+"/", osc);
partui->redraw();
o->redraw();
*/
npart=nval;
partui->rebase("/part"+to_s(npart)+"/");

updatepanel();
simplenpartcounter->value(nval+1);
simplenpartcounter->do_callback();
}
void MasterUI::cb_npartcounter(Fl_Counter* o, void* v) {
  ((MasterUI*)(o->parent()->parent()->user_data()))->cb_npartcounter_i(o,v);
}

void MasterUI::cb_vK_i(Fl_Button*, void*) {
  virkeyboard->show();
}
void MasterUI::cb_vK(Fl_Button* o, void* v) {
  ((MasterUI*)(o->parent()->parent()->user_data()))->cb_vK_i(o,v);
}

void MasterUI::cb_Reset_i(Fl_Button*, void*) {
  globalfinedetuneslider->value(64.0);
globalfinedetuneslider->do_callback();
}
void MasterUI::cb_Reset(Fl_Button* o, void* v) {
  ((MasterUI*)(o->parent()->parent()->parent()->user_data()))->cb_Reset_i(o,v);
}

void MasterUI::cb_Panel_i(Fl_Button*, void*) {
  updatepanel();
panelwindow->show();
}
void MasterUI::cb_Panel(Fl_Button* o, void* v) {
  ((MasterUI*)(o->parent()->parent()->user_data()))->cb_Panel_i(o,v);
}

void MasterUI::cb_Close_i(Fl_Button*, void*) {
  aboutwindow->hide();
}
void MasterUI::cb_Close(Fl_Button* o, void* v) {
  ((MasterUI*)(o->parent()->user_data()))->cb_Close_i(o,v);
}

void MasterUI::cb_Close1_i(Fl_Button*, void*) {
  syseffsendwindow->hide();
}
void MasterUI::cb_Close1(Fl_Button* o, void* v) {
  ((MasterUI*)(o->parent()->user_data()))->cb_Close1_i(o,v);
}

void MasterUI::cb_Close2_i(Fl_Button*, void*) {
  panelwindow->hide();
updatepanel();
}
void MasterUI::cb_Close2(Fl_Button* o, void* v) {
  ((MasterUI*)(o->parent()->user_data()))->cb_Close2_i(o,v);
}

void MasterUI::cb_Refresh_i(Fl_Button*, void*) {
  updatepanel();
}
void MasterUI::cb_Refresh(Fl_Button* o, void* v) {
  ((MasterUI*)(o->parent()->user_data()))->cb_Refresh_i(o,v);
}

void MasterUI::cb_simplemasterwindow_i(Fl_Osc_Window*, void*) {
  if (isPlugin || fl_choice("Exit and leave the unsaved data?","No","Yes",NULL))
{
	*exitprogram=1;
};
}
void MasterUI::cb_simplemasterwindow(Fl_Osc_Window* o, void* v) {
  ((MasterUI*)(o->user_data()))->cb_simplemasterwindow_i(o,v);
}

void MasterUI::cb_New1_i(Fl_Menu_*, void*) {
  do_new_master();
}
void MasterUI::cb_New1(Fl_Menu_* o, void* v) {
  ((MasterUI*)(o->parent()->user_data()))->cb_New1_i(o,v);
}

void MasterUI::cb_Revert1_i(Fl_Menu_*, void*) {
  do_revert_changes();
}
void MasterUI::cb_Revert1(Fl_Menu_* o, void* v) {
  ((MasterUI*)(o->parent()->user_data()))->cb_Revert1_i(o,v);
}

void MasterUI::cb_Open2_i(Fl_Menu_*, void*) {
  do_load_master();
}
void MasterUI::cb_Open2(Fl_Menu_* o, void* v) {
  ((MasterUI*)(o->parent()->user_data()))->cb_Open2_i(o,v);
}

void MasterUI::cb_Save4_i(Fl_Menu_*, void*) {
  #if USE_NSM
            if ( nsm && nsm->is_active() )
            {
                do_save_master( nsm->project_filename );
            }
            else
#endif
            {
                 do_save_master();
            };
}
void MasterUI::cb_Save4(Fl_Menu_* o, void* v) {
  ((MasterUI*)(o->parent()->user_data()))->cb_Save4_i(o,v);
}

void MasterUI::cb_Settings1_i(Fl_Menu_*, void*) {
  configui->show();
}
void MasterUI::cb_Settings1(Fl_Menu_* o, void* v) {
  ((MasterUI*)(o->parent()->user_data()))->cb_Settings1_i(o,v);
}

void MasterUI::cb_Copyright1_i(Fl_Menu_*, void*) {
  aboutwindow->show();
}
void MasterUI::cb_Copyright1(Fl_Menu_* o, void* v) {
  ((MasterUI*)(o->parent()->user_data()))->cb_Copyright1_i(o,v);
}

void MasterUI::cb_E1_i(Fl_Menu_*, void*) {
  masterwindow->do_callback();
}
void MasterUI::cb_E1(Fl_Menu_* o, void* v) {
  ((MasterUI*)(o->parent()->user_data()))->cb_E1_i(o,v);
}

void MasterUI::cb_Open3_i(Fl_Menu_*, void*) {
  const char *filename;
filename=fl_file_chooser("Load:","({*.xiz})",NULL,0);
if (filename==NULL) return;


osc->write("/load_xiz", "si", filename, npart);
simplenpartcounter->do_callback();
/*
if (result==-10) fl_alert("Error: Could not load the file\nbecause it is not an instrument file.");
      else if (result<0) fl_alert("Error: Could not load the file.");*/;
}
void MasterUI::cb_Open3(Fl_Menu_* o, void* v) {
  ((MasterUI*)(o->parent()->user_data()))->cb_Open3_i(o,v);
}

void MasterUI::cb_Show2_i(Fl_Menu_*, void*) {
  bankui->show();
}
void MasterUI::cb_Show2(Fl_Menu_* o, void* v) {
  ((MasterUI*)(o->parent()->user_data()))->cb_Show2_i(o,v);
}

void MasterUI::cb_Switch1_i(Fl_Menu_*, void*) {
  if (fl_choice("Switch the User Interface to Advanced mode ?","No","Yes",NULL)){
	simplemasterwindow->hide();
	refresh_master_ui();
	masterwindow->show();
    osc->write("/cfg.UserInterfaceMode", "i", 1);
};
}
void MasterUI::cb_Switch1(Fl_Menu_* o, void* v) {
  ((MasterUI*)(o->parent()->user_data()))->cb_Switch1_i(o,v);
}

Fl_Menu_Item MasterUI::menu_simplemastermenu[] = {
 {"&File", 0,  0, 0, 64, FL_NORMAL_LABEL, 0, 14, 0},
 {"&New (erase all)...", 0,  (Fl_Callback*)MasterUI::cb_New1, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"&Revert changes...", 0,  (Fl_Callback*)MasterUI::cb_Revert1, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"&Open Parameters...", 0,  (Fl_Callback*)MasterUI::cb_Open2, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"&Save All Parameters...", 0,  (Fl_Callback*)MasterUI::cb_Save4, 0, 128, FL_NORMAL_LABEL, 0, 14, 0},
 {"&Settings...", 0,  (Fl_Callback*)MasterUI::cb_Settings1, 0, 128, FL_NORMAL_LABEL, 0, 14, 0},
 {"&Copyright...", 0,  (Fl_Callback*)MasterUI::cb_Copyright1, 0, 128, FL_NORMAL_LABEL, 0, 14, 0},
 {"E&xit", 0,  (Fl_Callback*)MasterUI::cb_E1, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0},
 {"&Instrument", 0,  0, 0, 64, FL_NORMAL_LABEL, 0, 14, 0},
 {"&Open Instrument...", 0,  (Fl_Callback*)MasterUI::cb_Open3, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {"Show Instrument &Bank...", 0,  (Fl_Callback*)MasterUI::cb_Show2, 0, 128, FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0},
 {"Misc", 0,  0, 0, 64, FL_NORMAL_LABEL, 0, 14, 0},
 {"Switch User Interface Mode", 0,  (Fl_Callback*)MasterUI::cb_Switch1, 0, 0, FL_NORMAL_LABEL, 0, 14, 0},
 {0,0,0,0,0,0,0,0,0},
 {0,0,0,0,0,0,0,0,0}
};

void MasterUI::cb_partname1_i(PartNameButton*, void*) {
  if ((int)bankui->cbwig->value()!=(npart+1)){
   bankui->cbwig->value(npart+1);
   bankui->cbwig->do_callback();
};
bankui->show();
}
void MasterUI::cb_partname1(PartNameButton* o, void* v) {
  ((MasterUI*)(o->parent()->parent()->user_data()))->cb_partname1_i(o,v);
}

void MasterUI::cb_partrcv_i(Fl_Osc_Choice* o, void*) {
  virkeys->releaseallkeys(0);
virkeys->midich=(int) o->value();
}
void MasterUI::cb_partrcv(Fl_Osc_Choice* o, void* v) {
  ((MasterUI*)(o->parent()->parent()->user_data()))->cb_partrcv_i(o,v);
}

void MasterUI::cb_simpleminkcounter_i(Fl_Osc_Counter* o, void*) {
  if (simpleminkcounter->value()>simplemaxkcounter->value()) o->textcolor(FL_RED);
              else o->textcolor(FL_BLACK);
}
void MasterUI::cb_simpleminkcounter(Fl_Osc_Counter* o, void* v) {
  ((MasterUI*)(o->parent()->parent()->user_data()))->cb_simpleminkcounter_i(o,v);
}

void MasterUI::cb_simplemaxkcounter_i(Fl_Osc_Counter* o, void*) {
  if (simpleminkcounter->value()>simplemaxkcounter->value()) o->textcolor(FL_RED);
              else o->textcolor(FL_BLACK);
}
void MasterUI::cb_simplemaxkcounter(Fl_Osc_Counter* o, void* v) {
  ((MasterUI*)(o->parent()->parent()->user_data()))->cb_simplemaxkcounter_i(o,v);
}

void MasterUI::cb_m_i(Fl_Osc_Button* o, void*) {
  o->oscWrite("grabMinNote");
}
void MasterUI::cb_m(Fl_Osc_Button* o, void* v) {
  ((MasterUI*)(o->parent()->parent()->user_data()))->cb_m_i(o,v);
}

void MasterUI::cb_M_i(Fl_Osc_Button* o, void*) {
  o->oscWrite("grabMaxNote");
}
void MasterUI::cb_M(Fl_Osc_Button* o, void* v) {
  ((MasterUI*)(o->parent()->parent()->user_data()))->cb_M_i(o,v);
}

void MasterUI::cb_R_i(Fl_Button*, void*) {
  simpleminkcounter->value(0);
simpleminkcounter->do_callback();
simplemaxkcounter->value(127);
simplemaxkcounter->do_callback();
}
void MasterUI::cb_R(Fl_Button* o, void* v) {
  ((MasterUI*)(o->parent()->parent()->user_data()))->cb_R_i(o,v);
}

void MasterUI::cb_partenabled1_i(Fl_Osc_Check* o, void*) {
  if ((int) o->value()==0) simplelistitemgroup->deactivate();
  else {
    simplelistitemgroup->activate();
    if ((int)bankui->cbwig->value()!=(npart+1)){
       bankui->cbwig->value(npart+1);
       bankui->cbwig->do_callback();
    };
};

o->redraw();
}
void MasterUI::cb_partenabled1(Fl_Osc_Check* o, void* v) {
  ((MasterUI*)(o->parent()->user_data()))->cb_partenabled1_i(o,v);
}

void MasterUI::cb_simplesyseffnocounter_i(Fl_Counter* o, void*) {
  nsyseff=(int) o->value()-1;
/*simplesysefftype->value(master->sysefx[nsyseff]->geteffect());*/
simplesyseffectui->refresh();
simplesysefftype->oscMove("sysefx"+to_s(nsyseff)+"/efftype");
simplesyseffectuigroup->reext("sysefx"+to_s(nsyseff)+"/");
simplesyseffsend->oscMove("Psysefxvol"+to_s(nsyseff)+"/part"+to_s(npart));
simplerefresh();
}
void MasterUI::cb_simplesyseffnocounter(Fl_Counter* o, void* v) {
  ((MasterUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_simplesyseffnocounter_i(o,v);
}

void MasterUI::cb_simplesysefftype_i(Fl_Osc_Choice* o, void*) {
  simplesyseffectui->efftype = o->value();
simplesyseffectui->refresh();
}
void MasterUI::cb_simplesysefftype(Fl_Osc_Choice* o, void* v) {
  ((MasterUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_simplesysefftype_i(o,v);
}

Fl_Menu_Item MasterUI::menu_simplesysefftype[] = {
 {"No Effect", 0,  0, 0, 0, FL_NORMAL_LABEL, 1, 10, 0},
 {"Reverb", 0,  0, 0, 0, FL_NORMAL_LABEL, 1, 10, 0},
 {"Echo", 0,  0, 0, 0, FL_NORMAL_LABEL, 1, 10, 0},
 {"Chorus", 0,  0, 0, 0, FL_NORMAL_LABEL, 1, 10, 0},
 {"Phaser", 0,  0, 0, 0, FL_NORMAL_LABEL, 1, 10, 0},
 {"AlienWah", 0,  0, 0, 0, FL_NORMAL_LABEL, 1, 10, 0},
 {"Distortion", 0,  0, 0, 0, FL_NORMAL_LABEL, 1, 10, 0},
 {"EQ", 0,  0, 0, 0, FL_NORMAL_LABEL, 1, 10, 0},
 {"DynFilter", 0,  0, 0, 0, FL_NORMAL_LABEL, 1, 10, 0},
 {0,0,0,0,0,0,0,0,0}
};

void MasterUI::cb_Send1_i(Fl_Button*, void*) {
  syseffsendwindow->show();
}
void MasterUI::cb_Send1(Fl_Button* o, void* v) {
  ((MasterUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_Send1_i(o,v);
}

void MasterUI::cb_P2_i(Fl_Button*, void*) {
  /*pthread_mutex_lock(&master->mutex);
presetsui->paste(master->sysefx[nsyseff],simplesyseffectui);
pthread_mutex_unlock(&master->mutex);*/;
}
void MasterUI::cb_P2(Fl_Button* o, void* v) {
  ((MasterUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_P2_i(o,v);
}

void MasterUI::cb_simpleinseffnocounter_i(Fl_Counter* o, void*) {
  ninseff=(int) o->value()-1;
/*simpleinsefftype->value(master->insefx[ninseff]->geteffect());
simpleinseffpart->value(master->Pinsparts[ninseff]+2);*/
simpleinseffectuigroup->reext("insefx"+to_s(ninseff)+"/");
simpleinsefftype->oscMove("insefx"+to_s(ninseff)+"/efftype");
simpleinseffectui->refresh();

/*
if (master->Pinsparts[ninseff]!=-1) {
        simpleinsefftype->activate();
	simpleinseffectui->activate();
        simpleinseffectuigroup->activate();
} else {
	simpleinsefftype->deactivate();
 	simpleinseffectui->deactivate();
        simpleinseffectuigroup->deactivate();
};*/;
}
void MasterUI::cb_simpleinseffnocounter(Fl_Counter* o, void* v) {
  ((MasterUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_simpleinseffnocounter_i(o,v);
}

void MasterUI::cb_simpleinsefftype_i(Fl_Osc_Choice* o, void*) {
  /*pthread_mutex_lock(&master->mutex);
master->insefx[ninseff]->changeeffect((int) o->value());
pthread_mutex_unlock(&master->mutex);*/
simpleinseffectui->efftype = o->value();
simpleinseffectui->refresh();
simpleinseffectui->show();
}
void MasterUI::cb_simpleinsefftype(Fl_Osc_Choice* o, void* v) {
  ((MasterUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_simpleinsefftype_i(o,v);
}

Fl_Menu_Item MasterUI::menu_simpleinsefftype[] = {
 {"No Effect", 0,  0, 0, 0, FL_NORMAL_LABEL, 1, 10, 0},
 {"Reverb", 0,  0, 0, 0, FL_NORMAL_LABEL, 1, 10, 0},
 {"Echo", 0,  0, 0, 0, FL_NORMAL_LABEL, 1, 10, 0},
 {"Chorus", 0,  0, 0, 0, FL_NORMAL_LABEL, 1, 10, 0},
 {"Phaser", 0,  0, 0, 0, FL_NORMAL_LABEL, 1, 10, 0},
 {"AlienWah", 0,  0, 0, 0, FL_NORMAL_LABEL, 1, 10, 0},
 {"Distortion", 0,  0, 0, 0, FL_NORMAL_LABEL, 1, 10, 0},
 {"EQ", 0,  0, 0, 0, FL_NORMAL_LABEL, 1, 10, 0},
 {"DynFilter", 0,  0, 0, 0, FL_NORMAL_LABEL, 1, 10, 0},
 {0,0,0,0,0,0,0,0,0}
};

void MasterUI::cb_simpleinseffpart_i(Fl_Choice* o, void*) {
  /*master->Pinsparts[ninseff]=(int) o->value()-2;*/
if ((int) o->value()==1){
    simpleinseffectuigroup->deactivate();
    simpleinsefftype->deactivate();
    simpleinseffectui->deactivate();
} else {
    simpleinseffectuigroup->activate();
    simpleinsefftype->activate();
    simpleinseffectui->activate();
};
/*master->insefx[ninseff]->cleanup();*/;
}
void MasterUI::cb_simpleinseffpart(Fl_Choice* o, void* v) {
  ((MasterUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_simpleinseffpart_i(o,v);
}

void MasterUI::cb_P3_i(Fl_Button*, void*) {
  /*pthread_mutex_lock(&master->mutex);
presetsui->paste(master->insefx[ninseff],simpleinseffectui);
pthread_mutex_unlock(&master->mutex);*/;
}
void MasterUI::cb_P3(Fl_Button* o, void* v) {
  ((MasterUI*)(o->parent()->parent()->parent()->parent()->user_data()))->cb_P3_i(o,v);
}

void MasterUI::cb_Stop_i(Fl_Osc_Button* o, void*) {
  virkeyboard->releaseallkeys();
        o->oscWrite("Panic");
}
void MasterUI::cb_Stop(Fl_Osc_Button* o, void* v) {
  ((MasterUI*)(o->parent()->user_data()))->cb_Stop_i(o,v);
}

void MasterUI::cb_Reset1_i(Fl_Button*, void*) {
  simpleglobalfinedetuneslider->value(64.0);
simpleglobalfinedetuneslider->do_callback();
}
void MasterUI::cb_Reset1(Fl_Button* o, void* v) {
  ((MasterUI*)(o->parent()->user_data()))->cb_Reset1_i(o,v);
}

void MasterUI::cb_simplenpartcounter_i(Fl_Counter* o, void*) {
  virkeys->releaseallkeys(0);
npartcounter->value(o->value());
npart=(int) o->value()-1;

simplelistitemgroup->reext("part"+to_s(npart)+"/");
partenabled->oscMove("part"+to_s(npart)+"/Penabled");
simplerefresh();
}
void MasterUI::cb_simplenpartcounter(Fl_Counter* o, void* v) {
  ((MasterUI*)(o->parent()->user_data()))->cb_simplenpartcounter_i(o,v);
}

void MasterUI::cb_Keyb_i(Fl_Counter* o, void*) {
  virkeys->releaseallkeys(0);
virkeys->midioct=(int) o->value();
virkeys->take_focus();
}
void MasterUI::cb_Keyb(Fl_Counter* o, void* v) {
  ((MasterUI*)(o->parent()->user_data()))->cb_Keyb_i(o,v);
}

void MasterUI::cb_selectuiwindow_i(Fl_Osc_Window*, void*) {
  *exitprogram=1;
}
void MasterUI::cb_selectuiwindow(Fl_Osc_Window* o, void* v) {
  ((MasterUI*)(o->user_data()))->cb_selectuiwindow_i(o,v);
}

void MasterUI::cb_Advanced_i(Fl_Button*, void*) {
  osc->write("/config/cfg.UserInterfaceMode", "i", 1);
masterwindow->show();
selectuiwindow->hide();
}
void MasterUI::cb_Advanced(Fl_Button* o, void* v) {
  ((MasterUI*)(o->parent()->user_data()))->cb_Advanced_i(o,v);
}

void MasterUI::cb_Beginner_i(Fl_Button*, void*) {
  simplemasterwindow->show();
selectuiwindow->hide();
osc->write("/config/cfg.UserInterfaceMode", "i", 2);
}
void MasterUI::cb_Beginner(Fl_Button* o, void* v) {
  ((MasterUI*)(o->parent()->user_data()))->cb_Beginner_i(o,v);
}

Fl_Osc_Window* MasterUI::make_window() {
  { masterwindow = new Fl_Osc_Window(390, 525, "zynaddsubfx");
    masterwindow->box(FL_FLAT_BOX);
    masterwindow->color(FL_BACKGROUND_COLOR);
    masterwindow->selection_color(FL_BACKGROUND_COLOR);
    masterwindow->labeltype(FL_NO_LABEL);
    masterwindow->labelfont(0);
    masterwindow->labelsize(14);
    masterwindow->labelcolor(FL_FOREGROUND_COLOR);
    masterwindow->callback((Fl_Callback*)cb_masterwindow, (void*)(this));
    masterwindow->align(Fl_Align(FL_ALIGN_TOP));
    masterwindow->when(FL_WHEN_RELEASE);
    { dummy_again = new Fl_Box(25, 25, 25, 25);
      masterwindow->init(osc, "");
    } // Fl_Box* dummy_again
    { win_root = new Fl_Osc_Group(0, 0, 390, 525);
      win_root->box(FL_NO_BOX);
      win_root->color(FL_BACKGROUND_COLOR);
      win_root->selection_color(FL_BACKGROUND_COLOR);
      win_root->labeltype(FL_NORMAL_LABEL);
      win_root->labelfont(0);
      win_root->labelsize(14);
      win_root->labelcolor(FL_FOREGROUND_COLOR);
      win_root->align(Fl_Align(FL_ALIGN_TOP));
      win_root->when(FL_WHEN_RELEASE);
      { mastermenu = new Fl_Menu_Bar(0, 0, 390, 25);
        mastermenu->menu(menu_mastermenu);
      } // Fl_Menu_Bar* mastermenu
      { dummy = new Fl_Box(25, 25, 25, 25);
        win_root->osc = osc;
        win_root->base = "/";
      } // Fl_Box* dummy
      { Fl_Osc_Dial* o = mastervolumedial = new Fl_Osc_Dial(15, 32, 55, 55, "Master Volume");
        mastervolumedial->tooltip("Master Volume");
        mastervolumedial->box(FL_ROUND_UP_BOX);
        mastervolumedial->color(FL_BACKGROUND_COLOR);
        mastervolumedial->selection_color(FL_INACTIVE_COLOR);
        mastervolumedial->labeltype(FL_NORMAL_LABEL);
        mastervolumedial->labelfont(0);
        mastervolumedial->labelsize(9);
        mastervolumedial->labelcolor(FL_FOREGROUND_COLOR);
        mastervolumedial->maximum(127);
        mastervolumedial->step(1);
        mastervolumedial->align(Fl_Align(130));
        mastervolumedial->when(FL_WHEN_CHANGED);
        o->init("volume"); o->selection_color(FL_RED); o->reset_value=80;
      } // Fl_Osc_Dial* mastervolumedial
      { Fl_Osc_Counter* o = masterkeyshiftcounter = new Fl_Osc_Counter(150, 97, 120, 23, "Master KeyShift");
        masterkeyshiftcounter->type(1);
        masterkeyshiftcounter->box(FL_UP_BOX);
        masterkeyshiftcounter->color(FL_BACKGROUND_COLOR);
        masterkeyshiftcounter->selection_color(FL_INACTIVE_COLOR);
        masterkeyshiftcounter->labeltype(FL_NORMAL_LABEL);
        masterkeyshiftcounter->labelfont(0);
        masterkeyshiftcounter->labelsize(9);
        masterkeyshiftcounter->labelcolor(FL_FOREGROUND_COLOR);
        masterkeyshiftcounter->minimum(-64);
        masterkeyshiftcounter->maximum(64);
        masterkeyshiftcounter->step(1);
        masterkeyshiftcounter->align(Fl_Align(FL_ALIGN_BOTTOM));
        masterkeyshiftcounter->when(FL_WHEN_CHANGED);
        o->lstep(12);
        o->init("Pkeyshift",'i',-64);
      } // Fl_Osc_Counter* masterkeyshiftcounter
      { Fl_Osc_Button* o = new Fl_Osc_Button(280, 29, 105, 53, "Panic!");
        o->box(FL_UP_BOX);
        o->color((Fl_Color)90);
        o->selection_color(FL_BACKGROUND_COLOR);
        o->labeltype(FL_NORMAL_LABEL);
        o->labelfont(1);
        o->labelsize(14);
        o->labelcolor(FL_FOREGROUND_COLOR);
        o->callback((Fl_Callback*)cb_Panic);
        o->align(Fl_Align(FL_ALIGN_CENTER));
        o->when(FL_WHEN_RELEASE);
      } // Fl_Osc_Button* o
      { partuigroup = new Fl_Group(0, 310, 390, 205);
        { PartUI* o = partui = new PartUI(0, 310, 383, 175);
          partui->box(FL_NO_BOX);
          partui->color(FL_BACKGROUND_COLOR);
          partui->selection_color(FL_BACKGROUND_COLOR);
          partui->labeltype(FL_NORMAL_LABEL);
          partui->labelfont(0);
          partui->labelsize(14);
          partui->labelcolor(FL_FOREGROUND_COLOR);
          partui->align(Fl_Align(FL_ALIGN_TOP));
          partui->when(FL_WHEN_RELEASE);
          o->init("/part0/", 0,bankui,"/part0/", osc);
          o->show();
          partui->end();
        } // PartUI* partui
        partuigroup->end();
      } // Fl_Group* partuigroup
      { Fl_Tabs* o = new Fl_Tabs(0, 145, 390, 165);
        o->box(FL_UP_FRAME);
        { Fl_Group* o = new Fl_Group(0, 162, 390, 145, "System Effects");
          o->labelsize(15);
          o->align(Fl_Align(FL_ALIGN_TOP_RIGHT));
          { Fl_Counter* o = syseffnocounter = new Fl_Counter(5, 181, 80, 22, "Sys.Effect No.");
            syseffnocounter->type(1);
            syseffnocounter->labelfont(1);
            syseffnocounter->labelsize(10);
            syseffnocounter->minimum(0);
            syseffnocounter->maximum(127);
            syseffnocounter->step(1);
            syseffnocounter->value(1);
            syseffnocounter->textfont(1);
            syseffnocounter->callback((Fl_Callback*)cb_syseffnocounter);
            syseffnocounter->align(Fl_Align(FL_ALIGN_TOP));
            o->bounds(1,NUM_SYS_EFX);
            o->value(nsyseff+1);
          } // Fl_Counter* syseffnocounter
          { Fl_Osc_Choice* o = sysefftype = new Fl_Osc_Choice(285, 176, 100, 22, "EffType");
            sysefftype->box(FL_UP_BOX);
            sysefftype->down_box(FL_BORDER_BOX);
            sysefftype->color(FL_BACKGROUND_COLOR);
            sysefftype->selection_color(FL_SELECTION_COLOR);
            sysefftype->labeltype(FL_NORMAL_LABEL);
            sysefftype->labelfont(0);
            sysefftype->labelsize(10);
            sysefftype->labelcolor(FL_FOREGROUND_COLOR);
            sysefftype->callback((Fl_Callback*)cb_sysefftype);
            sysefftype->align(Fl_Align(FL_ALIGN_LEFT));
            sysefftype->when(FL_WHEN_RELEASE);
            sysefftype->menu(menu_sysefftype);
            o->init("sysefx"+to_s(nsyseff)+"/efftype");
          } // Fl_Osc_Choice* sysefftype
          { syseffectuigroup = new Fl_Osc_Group(5, 203, 380, 95);
            syseffectuigroup->box(FL_NO_BOX);
            syseffectuigroup->color((Fl_Color)48);
            syseffectuigroup->selection_color(FL_BACKGROUND_COLOR);
            syseffectuigroup->labeltype(FL_NORMAL_LABEL);
            syseffectuigroup->labelfont(0);
            syseffectuigroup->labelsize(14);
            syseffectuigroup->labelcolor(FL_FOREGROUND_COLOR);
            syseffectuigroup->align(Fl_Align(FL_ALIGN_TOP));
            syseffectuigroup->when(FL_WHEN_RELEASE);
            { new Fl_Box(5, 203, 0, 0);
              syseffectuigroup->ext = "sysefx0/";
            } // Fl_Box* o
            { EffUI* o = syseffectui = new EffUI(5, 203, 380, 95);
              syseffectui->box(FL_NO_BOX);
              syseffectui->color(FL_BACKGROUND_COLOR);
              syseffectui->selection_color(FL_BACKGROUND_COLOR);
              syseffectui->labeltype(FL_NORMAL_LABEL);
              syseffectui->labelfont(0);
              syseffectui->labelsize(14);
              syseffectui->labelcolor(FL_FOREGROUND_COLOR);
              syseffectui->align(Fl_Align(FL_ALIGN_TOP));
              syseffectui->when(FL_WHEN_RELEASE);
              o->init(false);
              syseffectui->end();
            } // EffUI* syseffectui
            syseffectuigroup->end();
          } // Fl_Osc_Group* syseffectuigroup
          { Fl_Button* o = new Fl_Button(90, 181, 85, 22, "Send to...");
            o->box(FL_THIN_UP_BOX);
            o->labelfont(1);
            o->labelsize(11);
            o->callback((Fl_Callback*)cb_Send);
          } // Fl_Button* o
          { Fl_Button* o = new Fl_Button(180, 187, 25, 15, "C");
            o->box(FL_THIN_UP_BOX);
            o->color((Fl_Color)179);
            o->labelfont(1);
            o->labelsize(11);
            o->labelcolor((Fl_Color)55);
            o->callback((Fl_Callback*)cb_C);
          } // Fl_Button* o
          { Fl_Button* o = new Fl_Button(210, 187, 25, 15, "P");
            o->box(FL_THIN_UP_BOX);
            o->color((Fl_Color)179);
            o->labelfont(1);
            o->labelsize(11);
            o->labelcolor((Fl_Color)55);
            o->callback((Fl_Callback*)cb_P);
          } // Fl_Button* o
          o->end();
        } // Fl_Group* o
        { Fl_Group* o = new Fl_Group(0, 165, 390, 145, "Insertion Effects");
          o->labelsize(15);
          o->align(Fl_Align(FL_ALIGN_TOP_RIGHT));
          o->hide();
          { Fl_Counter* o = inseffnocounter = new Fl_Counter(5, 183, 80, 22, "Ins.Effect No.");
            inseffnocounter->type(1);
            inseffnocounter->labelfont(1);
            inseffnocounter->labelsize(10);
            inseffnocounter->minimum(0);
            inseffnocounter->maximum(127);
            inseffnocounter->step(1);
            inseffnocounter->value(1);
            inseffnocounter->textfont(1);
            inseffnocounter->callback((Fl_Callback*)cb_inseffnocounter);
            inseffnocounter->align(Fl_Align(FL_ALIGN_TOP));
            o->bounds(1,NUM_INS_EFX);
            o->value(ninseff+1);
          } // Fl_Counter* inseffnocounter
          { Fl_Osc_Choice* o = insefftype = new Fl_Osc_Choice(285, 173, 100, 22, "EffType");
            insefftype->box(FL_UP_BOX);
            insefftype->down_box(FL_BORDER_BOX);
            insefftype->color(FL_BACKGROUND_COLOR);
            insefftype->selection_color(FL_SELECTION_COLOR);
            insefftype->labeltype(FL_NORMAL_LABEL);
            insefftype->labelfont(0);
            insefftype->labelsize(10);
            insefftype->labelcolor(FL_FOREGROUND_COLOR);
            insefftype->callback((Fl_Callback*)cb_insefftype);
            insefftype->align(Fl_Align(FL_ALIGN_LEFT));
            insefftype->when(FL_WHEN_RELEASE);
            insefftype->menu(menu_insefftype);
            /*o->value(master->insefx[ninseff]->geteffect());*/
            /*if (master->Pinsparts[ninseff]== -1) o->deactivate();*/
            o->init("insefx"+to_s(ninseff)+"/efftype");
          } // Fl_Osc_Choice* insefftype
          { inseffectuigroup = new Fl_Osc_Group(5, 205, 380, 95);
            inseffectuigroup->box(FL_FLAT_BOX);
            inseffectuigroup->color((Fl_Color)48);
            inseffectuigroup->selection_color(FL_BACKGROUND_COLOR);
            inseffectuigroup->labeltype(FL_NORMAL_LABEL);
            inseffectuigroup->labelfont(0);
            inseffectuigroup->labelsize(14);
            inseffectuigroup->labelcolor(FL_FOREGROUND_COLOR);
            inseffectuigroup->align(Fl_Align(FL_ALIGN_TOP));
            inseffectuigroup->when(FL_WHEN_RELEASE);
            { new Fl_Box(5, 205, 0, 0);
              inseffectuigroup->ext = "insefx0/";
            } // Fl_Box* o
            { EffUI* o = inseffectui = new EffUI(5, 205, 380, 90);
              inseffectui->box(FL_UP_FRAME);
              inseffectui->color(FL_BACKGROUND_COLOR);
              inseffectui->selection_color(FL_BACKGROUND_COLOR);
              inseffectui->labeltype(FL_NORMAL_LABEL);
              inseffectui->labelfont(0);
              inseffectui->labelsize(14);
              inseffectui->labelcolor(FL_FOREGROUND_COLOR);
              inseffectui->align(Fl_Align(FL_ALIGN_TOP));
              inseffectui->when(FL_WHEN_RELEASE);
              o->init(true);
              inseffectui->end();
            } // EffUI* inseffectui
            inseffectuigroup->end();
          } // Fl_Osc_Group* inseffectuigroup
          { Fl_Osc_Choice* o = inseffpart = new Fl_Osc_Choice(95, 183, 80, 22, "Insert To.");
            inseffpart->box(FL_UP_BOX);
            inseffpart->down_box(FL_BORDER_BOX);
            inseffpart->color(FL_BACKGROUND_COLOR);
            inseffpart->selection_color(FL_SELECTION_COLOR);
            inseffpart->labeltype(FL_NORMAL_LABEL);
            inseffpart->labelfont(1);
            inseffpart->labelsize(10);
            inseffpart->labelcolor(FL_FOREGROUND_COLOR);
            inseffpart->textsize(10);
            inseffpart->callback((Fl_Callback*)cb_inseffpart);
            inseffpart->align(Fl_Align(FL_ALIGN_TOP_LEFT));
            inseffpart->when(FL_WHEN_RELEASE);
            o->add("Master Out");o->add("Off");
            char tmp[50]; for (int i=0;i<NUM_MIDI_PARTS;i++) {sprintf(tmp,"Part %2d",i+1);o->add(tmp);};
            o->init("Pinsparts"+to_s(ninseff),-2);
          } // Fl_Osc_Choice* inseffpart
          { Fl_Button* o = new Fl_Button(180, 185, 25, 15, "C");
            o->box(FL_THIN_UP_BOX);
            o->color((Fl_Color)179);
            o->labelfont(1);
            o->labelsize(11);
            o->labelcolor((Fl_Color)55);
            o->callback((Fl_Callback*)cb_C1);
          } // Fl_Button* o
          { Fl_Button* o = new Fl_Button(210, 185, 25, 15, "P");
            o->box(FL_THIN_UP_BOX);
            o->color((Fl_Color)179);
            o->labelfont(1);
            o->labelsize(11);
            o->labelcolor((Fl_Color)55);
            o->callback((Fl_Callback*)cb_P1);
          } // Fl_Button* o
          o->end();
        } // Fl_Group* o
        o->end();
      } // Fl_Tabs* o
      { Fl_Button* o = new Fl_Button(320, 87, 65, 23, "Scales");
        o->color((Fl_Color)51);
        o->labelfont(1);
        o->callback((Fl_Callback*)cb_Scales);
      } // Fl_Button* o
      { Fl_Group* o = new Fl_Group(150, 40, 117, 45);
        o->box(FL_UP_FRAME);
        { recordbutton = new Fl_Osc_Button(159, 46, 21, 21, "Rec.");
          recordbutton->tooltip("Start Recording");
          recordbutton->box(FL_ROUND_UP_BOX);
          recordbutton->color(FL_RED);
          recordbutton->selection_color(FL_BACKGROUND_COLOR);
          recordbutton->labeltype(FL_NORMAL_LABEL);
          recordbutton->labelfont(1);
          recordbutton->labelsize(10);
          recordbutton->labelcolor(FL_FOREGROUND_COLOR);
          recordbutton->callback((Fl_Callback*)cb_recordbutton);
          recordbutton->align(Fl_Align(FL_ALIGN_BOTTOM));
          recordbutton->when(FL_WHEN_RELEASE);
          recordbutton->deactivate();
        } // Fl_Osc_Button* recordbutton
        { stopbutton = new Fl_Osc_Button(237, 46, 21, 21, "Stop");
          stopbutton->tooltip("Stop Recording and close the audio file");
          stopbutton->box(FL_THIN_UP_BOX);
          stopbutton->color((Fl_Color)4);
          stopbutton->selection_color(FL_BACKGROUND_COLOR);
          stopbutton->labeltype(FL_NORMAL_LABEL);
          stopbutton->labelfont(1);
          stopbutton->labelsize(10);
          stopbutton->labelcolor(FL_FOREGROUND_COLOR);
          stopbutton->callback((Fl_Callback*)cb_stopbutton);
          stopbutton->align(Fl_Align(FL_ALIGN_BOTTOM));
          stopbutton->when(FL_WHEN_RELEASE);
          stopbutton->deactivate();
        } // Fl_Osc_Button* stopbutton
        { pausebutton = new Fl_Osc_Button(198, 46, 21, 21, "| |");
          pausebutton->tooltip("Pause Recording");
          pausebutton->box(FL_THIN_UP_BOX);
          pausebutton->color((Fl_Color)4);
          pausebutton->selection_color((Fl_Color)4);
          pausebutton->labeltype(FL_NORMAL_LABEL);
          pausebutton->labelfont(1);
          pausebutton->labelsize(14);
          pausebutton->labelcolor((Fl_Color)3);
          pausebutton->callback((Fl_Callback*)cb_pausebutton);
          pausebutton->align(Fl_Align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE));
          pausebutton->when(FL_WHEN_RELEASE);
          pausebutton->deactivate();
        } // Fl_Osc_Button* pausebutton
        { pauselabel = new Fl_Box(192, 66, 30, 15, "Pause");
          pauselabel->labelfont(1);
          pauselabel->labelsize(10);
          pauselabel->deactivate();
        } // Fl_Box* pauselabel
        o->end();
      } // Fl_Group* o
      { Fl_Group* o = new Fl_Group(1, 490, 389, 55);
        { VuMasterMeter* o = mastervu = new VuMasterMeter(5, 490, 380, 30, "VU-Meter");
          mastervu->box(FL_FLAT_BOX);
          mastervu->color((Fl_Color)48);
          mastervu->selection_color((Fl_Color)75);
          mastervu->labeltype(FL_NORMAL_LABEL);
          mastervu->labelfont(0);
          mastervu->labelsize(14);
          mastervu->labelcolor(FL_FOREGROUND_COLOR);
          mastervu->align(Fl_Align(FL_ALIGN_CENTER));
          mastervu->when(FL_WHEN_RELEASE);
          o->init(osc);
        } // VuMasterMeter* mastervu
        o->end();
      } // Fl_Group* o
      { Fl_Osc_Check* o = nrpnbutton = new Fl_Osc_Check(10, 115, 60, 25, "NRPN");
        nrpnbutton->tooltip("Receive NRPNs");
        nrpnbutton->box(FL_NO_BOX);
        nrpnbutton->down_box(FL_DOWN_BOX);
        nrpnbutton->color(FL_BACKGROUND_COLOR);
        nrpnbutton->selection_color(FL_FOREGROUND_COLOR);
        nrpnbutton->labeltype(FL_NORMAL_LABEL);
        nrpnbutton->labelfont(0);
        nrpnbutton->labelsize(12);
        nrpnbutton->labelcolor(FL_FOREGROUND_COLOR);
        nrpnbutton->align(Fl_Align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE));
        nrpnbutton->when(FL_WHEN_RELEASE);
        o->init("ctl/NRPN.receive");
      } // Fl_Osc_Check* nrpnbutton
      { Fl_Counter* o = npartcounter = new Fl_Counter(5, 312, 50, 18);
        npartcounter->tooltip("The part number");
        npartcounter->type(1);
        npartcounter->labelfont(1);
        npartcounter->minimum(0);
        npartcounter->maximum(127);
        npartcounter->step(1);
        npartcounter->value(1);
        npartcounter->textfont(1);
        npartcounter->callback((Fl_Callback*)cb_npartcounter);
        o->bounds(1,NUM_MIDI_PARTS);
        bankui->init(o);
      } // Fl_Counter* npartcounter
      { Fl_Button* o = new Fl_Button(280, 87, 40, 23, "vK");
        o->tooltip("Virtual Keyboard");
        o->color((Fl_Color)51);
        o->labelfont(1);
        o->callback((Fl_Callback*)cb_vK);
      } // Fl_Button* o
      { Fl_Group* o = new Fl_Group(85, 32, 55, 110);
        o->box(FL_UP_FRAME);
        { Fl_Button* o = new Fl_Button(90, 37, 45, 23, "Reset");
          o->tooltip("Master fine detune reset");
          o->box(FL_THIN_UP_BOX);
          o->labelsize(10);
          o->callback((Fl_Callback*)cb_Reset);
        } // Fl_Button* o
        { Fl_Osc_Dial* o = globalfinedetuneslider = new Fl_Osc_Dial(90, 68, 45, 45, "Fine Detune");
          globalfinedetuneslider->tooltip("global fine detune");
          globalfinedetuneslider->box(FL_ROUND_UP_BOX);
          globalfinedetuneslider->color(FL_BACKGROUND_COLOR);
          globalfinedetuneslider->selection_color(FL_INACTIVE_COLOR);
          globalfinedetuneslider->labeltype(FL_NORMAL_LABEL);
          globalfinedetuneslider->labelfont(0);
          globalfinedetuneslider->labelsize(9);
          globalfinedetuneslider->labelcolor(FL_FOREGROUND_COLOR);
          globalfinedetuneslider->maximum(127);
          globalfinedetuneslider->step(1);
          globalfinedetuneslider->value(64);
          globalfinedetuneslider->align(Fl_Align(130));
          globalfinedetuneslider->when(FL_WHEN_CHANGED);
          o->init("microtonal/Pglobalfinedetune");o->reset_value=64;
        } // Fl_Osc_Dial* globalfinedetuneslider
        o->end();
      } // Fl_Group* o
      { Fl_Button* o = new Fl_Button(280, 112, 105, 23, "Panel Window");
        o->tooltip("Panel Window");
        o->color((Fl_Color)51);
        o->labelfont(1);
        o->labelsize(10);
        o->callback((Fl_Callback*)cb_Panel);
      } // Fl_Button* o
      { sm_indicator1 = new Fl_Button(350, 5, 35, 15, "SM");
        sm_indicator1->box(FL_ROUNDED_BOX);
        sm_indicator1->down_box(FL_ROUNDED_BOX);
        sm_indicator1->color(FL_DARK2);
        sm_indicator1->selection_color((Fl_Color)93);
        sm_indicator1->labelfont(3);
        sm_indicator1->labelcolor(FL_DARK3);
        sm_indicator1->deactivate();
      } // Fl_Button* sm_indicator1
      win_root->end();
    } // Fl_Osc_Group* win_root
    masterwindow->xclass("zynaddsubfx");
    masterwindow->end();
  } // Fl_Osc_Window* masterwindow
  { aboutwindow = new Fl_Double_Window(365, 280, "Copyright...");
    aboutwindow->user_data((void*)(this));
    { Fl_Box* o = new Fl_Box(15, 35, 335, 55, "Copyright (c) 2002-2009 Nasca O. PAUL, 2009-2016 Mark McCurry, and others. Pl\
ease read AUTHORS.txt");
      o->labeltype(FL_EMBOSSED_LABEL);
      o->labelsize(15);
      o->align(Fl_Align(192|FL_ALIGN_INSIDE));
    } // Fl_Box* o
    { Fl_Box* o = new Fl_Box(15, 90, 335, 145, "This is free software; you may redistribute it and/or modify it under the ter\
ms of the \nversion 2 (or any later version) of the GNU General Public License\
 as published by the Free Software Fundation.\n  This program comes with\n ABS\
OLUTELY NO WARRANTY. \n See the version 2 (or any later version) of the \nGNU \
General Public License for details.");
      o->labelfont(1);
      o->labelsize(11);
      o->align(Fl_Align(FL_ALIGN_WRAP|FL_ALIGN_INSIDE));
    } // Fl_Box* o
    { Fl_Button* o = new Fl_Button(80, 245, 190, 25, "Close this window");
      o->box(FL_THIN_UP_BOX);
      o->labelsize(11);
      o->callback((Fl_Callback*)cb_Close);
    } // Fl_Button* o
    { Fl_Box* o = new Fl_Box(15, 5, 335, 30, "ZynAddSubFX");
      o->labeltype(FL_EMBOSSED_LABEL);
      o->labelfont(1);
      o->labelsize(20);
      o->align(Fl_Align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE));
    } // Fl_Box* o
    aboutwindow->end();
  } // Fl_Double_Window* aboutwindow
  { syseffsendwindow = new Fl_Osc_Window(120, 250, "System Effects Send");
    syseffsendwindow->box(FL_FLAT_BOX);
    syseffsendwindow->color(FL_BACKGROUND_COLOR);
    syseffsendwindow->selection_color(FL_BACKGROUND_COLOR);
    syseffsendwindow->labeltype(FL_NO_LABEL);
    syseffsendwindow->labelfont(0);
    syseffsendwindow->labelsize(14);
    syseffsendwindow->labelcolor(FL_FOREGROUND_COLOR);
    syseffsendwindow->user_data((void*)(this));
    syseffsendwindow->align(Fl_Align(FL_ALIGN_TOP));
    syseffsendwindow->when(FL_WHEN_RELEASE);
    { new Fl_Box(0, 0, 0, 0);
      syseffsendwindow->init(osc,"");
    } // Fl_Box* o
    { Fl_Scroll* o = syseffscroll = new Fl_Scroll(0, 45, 120, 170);
      syseffscroll->box(FL_FLAT_BOX);
      syseffsendwindow->begin();for (int neff1=0;neff1<NUM_SYS_EFX;neff1++) for (int neff2=neff1+1;neff2<NUM_SYS_EFX;neff2++)
      {syseffsend[neff1][neff2]=new Fl_Osc_Dial(o->x()+(neff2-1)*35,o->y()+15+neff1*50,30,30);syseffsend[neff1][neff2]->label(strdup((to_s(neff1) + "->" + to_s(neff2)).c_str()));syseffsend[neff1][neff2]->init("/sysefxfrom"+to_s(neff1)+"/to"+to_s(neff2));};syseffsendwindow->end();
      syseffscroll->end();
      Fl_Group::current()->resizable(syseffscroll);
    } // Fl_Scroll* syseffscroll
    { Fl_Button* o = new Fl_Button(25, 220, 80, 25, "Close");
      o->box(FL_THIN_UP_BOX);
      o->callback((Fl_Callback*)cb_Close1);
    } // Fl_Button* o
    { Fl_Box* o = new Fl_Box(5, 5, 110, 35, "Send system effect\'s output to other system effects");
      o->labelsize(10);
      o->align(Fl_Align(192));
    } // Fl_Box* o
    syseffsendwindow->end();
  } // Fl_Osc_Window* syseffsendwindow
  { panelwindow = new Fl_Osc_Window(630, 635, "ZynAddSubFX Panel");
    panelwindow->box(FL_FLAT_BOX);
    panelwindow->color(FL_BACKGROUND_COLOR);
    panelwindow->selection_color(FL_BACKGROUND_COLOR);
    panelwindow->labeltype(FL_NO_LABEL);
    panelwindow->labelfont(0);
    panelwindow->labelsize(14);
    panelwindow->labelcolor(FL_FOREGROUND_COLOR);
    panelwindow->user_data((void*)(this));
    panelwindow->align(Fl_Align(FL_ALIGN_TOP));
    panelwindow->when(FL_WHEN_RELEASE);
    { new Fl_Box(0, 0, 0, 0);
      panelwindow->init(osc,"/");
    } // Fl_Box* o
    { Fl_Scroll* o = new Fl_Scroll(0, 5, 570, 310);
      o->type(1);
      o->box(FL_THIN_UP_BOX);
      { Fl_Pack* o = new Fl_Pack(5, 10, 560, 285);
        o->type(1);
        for (int i=0;i<NUM_MIDI_PARTS/2;i++){panellistitem[i]=new Panellistitem(0,0,70,260,"");panellistitem[i]->init(i,bankui,partui);}
        o->end();
      } // Fl_Pack* o
      o->end();
    } // Fl_Scroll* o
    { Fl_Scroll* o = new Fl_Scroll(0, 320, 570, 310);
      o->type(1);
      o->box(FL_THIN_UP_BOX);
      { Fl_Pack* o = new Fl_Pack(5, 325, 560, 285);
        o->type(1);
        for (int i=NUM_MIDI_PARTS/2;i<NUM_MIDI_PARTS;i++){panellistitem[i]=new Panellistitem(0,0,70,260,"");panellistitem[i]->init(i,bankui,partui);}
        o->end();
      } // Fl_Pack* o
      o->end();
    } // Fl_Scroll* o
    { Fl_Button* o = new Fl_Button(575, 605, 50, 25, "Close");
      o->box(FL_THIN_UP_BOX);
      o->labelsize(13);
      o->callback((Fl_Callback*)cb_Close2);
    } // Fl_Button* o
    { Fl_Button* o = new Fl_Button(575, 570, 55, 25, "Refresh");
      o->box(FL_THIN_UP_BOX);
      o->labelsize(13);
      o->callback((Fl_Callback*)cb_Refresh);
    } // Fl_Button* o
    panelwindow->end();
  } // Fl_Osc_Window* panelwindow
  { simplemasterwindow = new Fl_Osc_Window(600, 335, "ZynAddSubFX");
    simplemasterwindow->box(FL_FLAT_BOX);
    simplemasterwindow->color(FL_BACKGROUND_COLOR);
    simplemasterwindow->selection_color(FL_BACKGROUND_COLOR);
    simplemasterwindow->labeltype(FL_NO_LABEL);
    simplemasterwindow->labelfont(0);
    simplemasterwindow->labelsize(14);
    simplemasterwindow->labelcolor(FL_FOREGROUND_COLOR);
    simplemasterwindow->callback((Fl_Callback*)cb_simplemasterwindow, (void*)(this));
    simplemasterwindow->align(Fl_Align(FL_ALIGN_TOP));
    simplemasterwindow->when(FL_WHEN_RELEASE);
    { new Fl_Box(0, 0, 0, 0);
      simplemasterwindow->init(osc, "/");
    } // Fl_Box* o
    { simplemastermenu = new Fl_Menu_Bar(0, 0, 600, 25);
      simplemastermenu->menu(menu_simplemastermenu);
    } // Fl_Menu_Bar* simplemastermenu
    { simplelistitemgroup = new Fl_Osc_Group(125, 65, 215, 145);
      simplelistitemgroup->box(FL_UP_FRAME);
      simplelistitemgroup->color(FL_BACKGROUND_COLOR);
      simplelistitemgroup->selection_color(FL_BACKGROUND_COLOR);
      simplelistitemgroup->labeltype(FL_NORMAL_LABEL);
      simplelistitemgroup->labelfont(0);
      simplelistitemgroup->labelsize(14);
      simplelistitemgroup->labelcolor(FL_FOREGROUND_COLOR);
      simplelistitemgroup->align(Fl_Align(FL_ALIGN_TOP));
      simplelistitemgroup->when(FL_WHEN_RELEASE);
      { new Fl_Box(125, 65, 0, 0);
        simplelistitemgroup->ext = "part0/";
      } // Fl_Box* o
      { PartNameButton* o = partname = new PartNameButton(130, 72, 205, 18);
        partname->box(FL_THIN_DOWN_BOX);
        partname->down_box(FL_FLAT_BOX);
        partname->color(FL_LIGHT1);
        partname->selection_color(FL_BACKGROUND_COLOR);
        partname->labeltype(FL_NORMAL_LABEL);
        partname->labelfont(1);
        partname->labelsize(11);
        partname->labelcolor(FL_FOREGROUND_COLOR);
        partname->callback((Fl_Callback*)cb_partname1);
        partname->align(Fl_Align(192|FL_ALIGN_INSIDE));
        partname->when(FL_WHEN_RELEASE);
        o->ext = "Pname";o->oscRegister("Pname");
      } // PartNameButton* partname
      { Fl_Osc_TSlider* o = partpanning = new Fl_Osc_TSlider(185, 95, 145, 15, "Pan");
        partpanning->type(5);
        partpanning->box(FL_NO_BOX);
        partpanning->color(FL_BACKGROUND_COLOR);
        partpanning->selection_color(FL_BACKGROUND_COLOR);
        partpanning->labeltype(FL_NORMAL_LABEL);
        partpanning->labelfont(0);
        partpanning->labelsize(11);
        partpanning->labelcolor(FL_FOREGROUND_COLOR);
        partpanning->maximum(127);
        partpanning->step(1);
        partpanning->value(64);
        partpanning->align(Fl_Align(FL_ALIGN_BOTTOM));
        partpanning->when(FL_WHEN_CHANGED);
        o->init("Ppanning",'i'); o->reset_value=64;
      } // Fl_Osc_TSlider* partpanning
      { Fl_Osc_Choice* o = partrcv = new Fl_Osc_Choice(140, 157, 65, 18, "Midi Channel Receive");
        partrcv->tooltip("receive from Midi channel");
        partrcv->box(FL_UP_BOX);
        partrcv->down_box(FL_BORDER_BOX);
        partrcv->color(FL_BACKGROUND_COLOR);
        partrcv->selection_color(FL_SELECTION_COLOR);
        partrcv->labeltype(FL_NORMAL_LABEL);
        partrcv->labelfont(0);
        partrcv->labelsize(10);
        partrcv->labelcolor(FL_FOREGROUND_COLOR);
        partrcv->textfont(1);
        partrcv->callback((Fl_Callback*)cb_partrcv);
        partrcv->align(Fl_Align(130));
        partrcv->when(FL_WHEN_RELEASE);
        char nrstr[10]; for(int i=0;i<NUM_MIDI_CHANNELS;i++){sprintf(nrstr,"Ch%d",i+1);if (i!=9) o->add(nrstr); else o->add("Dr10");};
        o->init("Prcvchn");
      } // Fl_Osc_Choice* partrcv
      { Fl_Osc_Dial* o = partvolume = new Fl_Osc_Dial(135, 95, 45, 40);
        partvolume->box(FL_NO_BOX);
        partvolume->color(FL_BACKGROUND_COLOR);
        partvolume->selection_color(FL_INACTIVE_COLOR);
        partvolume->labeltype(FL_NORMAL_LABEL);
        partvolume->labelfont(0);
        partvolume->labelsize(9);
        partvolume->labelcolor(FL_FOREGROUND_COLOR);
        partvolume->maximum(127);
        partvolume->step(1);
        partvolume->align(Fl_Align(FL_ALIGN_BOTTOM));
        partvolume->when(FL_WHEN_CHANGED);
        o->init("Pvolume"); o->reset_value=96;
      } // Fl_Osc_Dial* partvolume
      { Fl_Box* o = new Fl_Box(130, 130, 55, 20, "Volume");
        o->labelsize(10);
      } // Fl_Box* o
      { Fl_Osc_Check* o = simplepartportamento = new Fl_Osc_Check(193, 127, 79, 23, "Portamento");
        simplepartportamento->tooltip("Enable/Disable the portamento");
        simplepartportamento->box(FL_NO_BOX);
        simplepartportamento->down_box(FL_DOWN_BOX);
        simplepartportamento->color(FL_BACKGROUND_COLOR);
        simplepartportamento->selection_color(FL_FOREGROUND_COLOR);
        simplepartportamento->labeltype(FL_NORMAL_LABEL);
        simplepartportamento->labelfont(0);
        simplepartportamento->labelsize(9);
        simplepartportamento->labelcolor(FL_FOREGROUND_COLOR);
        simplepartportamento->align(Fl_Align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE));
        simplepartportamento->when(FL_WHEN_RELEASE);
        o->init("ctl/portamento.portamento");
      } // Fl_Osc_Check* simplepartportamento
      { Fl_Osc_Counter* o = simpleminkcounter = new Fl_Osc_Counter(210, 158, 40, 15, "Min.key");
        simpleminkcounter->tooltip("Minimum key (that the part receives NoteOn messages)");
        simpleminkcounter->type(1);
        simpleminkcounter->box(FL_UP_BOX);
        simpleminkcounter->color(FL_BACKGROUND_COLOR);
        simpleminkcounter->selection_color(FL_INACTIVE_COLOR);
        simpleminkcounter->labeltype(FL_NORMAL_LABEL);
        simpleminkcounter->labelfont(0);
        simpleminkcounter->labelsize(10);
        simpleminkcounter->labelcolor(FL_FOREGROUND_COLOR);
        simpleminkcounter->minimum(0);
        simpleminkcounter->maximum(127);
        simpleminkcounter->step(1);
        simpleminkcounter->textsize(10);
        simpleminkcounter->callback((Fl_Callback*)cb_simpleminkcounter);
        simpleminkcounter->align(Fl_Align(FL_ALIGN_BOTTOM));
        simpleminkcounter->when(FL_WHEN_CHANGED);
        o->init("Pminkey");
      } // Fl_Osc_Counter* simpleminkcounter
      { Fl_Osc_Counter* o = simplemaxkcounter = new Fl_Osc_Counter(255, 158, 40, 15, "Max.key");
        simplemaxkcounter->tooltip("Maximum key (that the part receives NoteOn messages)");
        simplemaxkcounter->type(1);
        simplemaxkcounter->box(FL_UP_BOX);
        simplemaxkcounter->color(FL_BACKGROUND_COLOR);
        simplemaxkcounter->selection_color(FL_INACTIVE_COLOR);
        simplemaxkcounter->labeltype(FL_NORMAL_LABEL);
        simplemaxkcounter->labelfont(0);
        simplemaxkcounter->labelsize(10);
        simplemaxkcounter->labelcolor(FL_FOREGROUND_COLOR);
        simplemaxkcounter->minimum(0);
        simplemaxkcounter->maximum(127);
        simplemaxkcounter->step(1);
        simplemaxkcounter->textsize(10);
        simplemaxkcounter->callback((Fl_Callback*)cb_simplemaxkcounter);
        simplemaxkcounter->align(Fl_Align(FL_ALIGN_BOTTOM));
        simplemaxkcounter->when(FL_WHEN_CHANGED);
        o->init("Pmaxkey");
      } // Fl_Osc_Counter* simplemaxkcounter
      { Fl_Osc_Button* o = new Fl_Osc_Button(230, 188, 15, 12, "m");
        o->tooltip("set the minimum key to the last pressed key");
        o->box(FL_THIN_UP_BOX);
        o->color(FL_BACKGROUND_COLOR);
        o->selection_color(FL_BACKGROUND_COLOR);
        o->labeltype(FL_NORMAL_LABEL);
        o->labelfont(0);
        o->labelsize(10);
        o->labelcolor(FL_FOREGROUND_COLOR);
        o->callback((Fl_Callback*)cb_m);
        o->align(Fl_Align(FL_ALIGN_CENTER));
        o->when(FL_WHEN_RELEASE);
      } // Fl_Osc_Button* o
      { Fl_Osc_Button* o = new Fl_Osc_Button(260, 188, 15, 12, "M");
        o->tooltip("set the maximum key to the last pressed key");
        o->box(FL_THIN_UP_BOX);
        o->color(FL_BACKGROUND_COLOR);
        o->selection_color(FL_BACKGROUND_COLOR);
        o->labeltype(FL_NORMAL_LABEL);
        o->labelfont(0);
        o->labelsize(10);
        o->labelcolor(FL_FOREGROUND_COLOR);
        o->callback((Fl_Callback*)cb_M);
        o->align(Fl_Align(FL_ALIGN_CENTER));
        o->when(FL_WHEN_RELEASE);
      } // Fl_Osc_Button* o
      { Fl_Button* o = new Fl_Button(245, 188, 15, 12, "R");
        o->tooltip("reset the minimum key to 0 and maximum key to 127");
        o->box(FL_THIN_UP_BOX);
        o->labelfont(1);
        o->labelsize(10);
        o->callback((Fl_Callback*)cb_R);
      } // Fl_Button* o
      { Fl_Osc_Counter* o = simplepartkeyshiftcounter = new Fl_Osc_Counter(280, 120, 50, 20, "KeyShift");
        simplepartkeyshiftcounter->type(1);
        simplepartkeyshiftcounter->box(FL_UP_BOX);
        simplepartkeyshiftcounter->color(FL_BACKGROUND_COLOR);
        simplepartkeyshiftcounter->selection_color(FL_INACTIVE_COLOR);
        simplepartkeyshiftcounter->labeltype(FL_NORMAL_LABEL);
        simplepartkeyshiftcounter->labelfont(0);
        simplepartkeyshiftcounter->labelsize(11);
        simplepartkeyshiftcounter->labelcolor(FL_FOREGROUND_COLOR);
        simplepartkeyshiftcounter->minimum(-64);
        simplepartkeyshiftcounter->maximum(64);
        simplepartkeyshiftcounter->step(1);
        simplepartkeyshiftcounter->align(Fl_Align(FL_ALIGN_BOTTOM));
        simplepartkeyshiftcounter->when(FL_WHEN_CHANGED);
        o->lstep(12);
        o->init("Pkeyshift", 'i', -64);
      } // Fl_Osc_Counter* simplepartkeyshiftcounter
      { Fl_Osc_Dial* o = simplesyseffsend = new Fl_Osc_Dial(300, 160, 30, 30);
        simplesyseffsend->box(FL_NO_BOX);
        simplesyseffsend->color(FL_BACKGROUND_COLOR);
        simplesyseffsend->selection_color(FL_INACTIVE_COLOR);
        simplesyseffsend->labeltype(FL_NORMAL_LABEL);
        simplesyseffsend->labelfont(0);
        simplesyseffsend->labelsize(14);
        simplesyseffsend->labelcolor(FL_FOREGROUND_COLOR);
        simplesyseffsend->maximum(127);
        simplesyseffsend->step(1);
        simplesyseffsend->align(Fl_Align(FL_ALIGN_BOTTOM));
        simplesyseffsend->when(FL_WHEN_CHANGED);
        o->alt_init("/","Psysefxvol"+to_s(nsyseff)+"/part"+to_s(npart));
      } // Fl_Osc_Dial* simplesyseffsend
      { Fl_Box* o = new Fl_Box(295, 190, 40, 15, "Effect");
        o->labelsize(10);
      } // Fl_Box* o
      simplelistitemgroup->end();
    } // Fl_Osc_Group* simplelistitemgroup
    { Fl_Osc_Check* o = partenabled = new Fl_Osc_Check(250, 40, 85, 20, "Enabled");
      partenabled->box(FL_NO_BOX);
      partenabled->down_box(FL_DOWN_BOX);
      partenabled->color(FL_BACKGROUND_COLOR);
      partenabled->selection_color(FL_FOREGROUND_COLOR);
      partenabled->labeltype(FL_EMBOSSED_LABEL);
      partenabled->labelfont(1);
      partenabled->labelsize(13);
      partenabled->labelcolor(FL_FOREGROUND_COLOR);
      partenabled->callback((Fl_Callback*)cb_partenabled1);
      partenabled->align(Fl_Align(FL_ALIGN_RIGHT|FL_ALIGN_INSIDE));
      partenabled->when(FL_WHEN_RELEASE);
      //char tmp[10];snprintf(tmp,10,"%d",npart+1);o->copy_label(tmp);
      o->init("part0/Penabled");
    } // Fl_Osc_Check* partenabled
    { VirKeys* o = virkeys = new VirKeys(5, 215, 590, 80, "Keyboard");
      virkeys->box(FL_BORDER_BOX);
      virkeys->color((Fl_Color)17);
      virkeys->selection_color(FL_BACKGROUND_COLOR);
      virkeys->labeltype(FL_NORMAL_LABEL);
      virkeys->labelfont(0);
      virkeys->labelsize(14);
      virkeys->labelcolor(FL_FOREGROUND_COLOR);
      virkeys->align(Fl_Align(FL_ALIGN_CENTER));
      virkeys->when(FL_WHEN_RELEASE);
      o->init(osc, "/");
    } // VirKeys* virkeys
    { Fl_Group* o = new Fl_Group(340, 30, 255, 185);
      { Fl_Tabs* o = new Fl_Tabs(345, 35, 245, 175);
        o->box(FL_UP_FRAME);
        o->align(Fl_Align(FL_ALIGN_BOTTOM|FL_ALIGN_INSIDE));
        { Fl_Group* o = new Fl_Group(345, 55, 245, 155, "System Effects");
          o->box(FL_UP_FRAME);
          o->labelfont(1);
          o->labelsize(12);
          o->align(Fl_Align(FL_ALIGN_BOTTOM|FL_ALIGN_INSIDE));
          { Fl_Counter* o = simplesyseffnocounter = new Fl_Counter(350, 75, 80, 20, "Sys.Effect No.");
            simplesyseffnocounter->type(1);
            simplesyseffnocounter->labelfont(1);
            simplesyseffnocounter->labelsize(10);
            simplesyseffnocounter->minimum(0);
            simplesyseffnocounter->maximum(127);
            simplesyseffnocounter->step(1);
            simplesyseffnocounter->value(1);
            simplesyseffnocounter->textfont(1);
            simplesyseffnocounter->callback((Fl_Callback*)cb_simplesyseffnocounter);
            simplesyseffnocounter->align(Fl_Align(FL_ALIGN_TOP));
            o->bounds(1,NUM_SYS_EFX);
            o->value(nsyseff+1);
          } // Fl_Counter* simplesyseffnocounter
          { Fl_Osc_Choice* o = simplesysefftype = new Fl_Osc_Choice(515, 80, 70, 15, "EffType");
            simplesysefftype->box(FL_UP_BOX);
            simplesysefftype->down_box(FL_BORDER_BOX);
            simplesysefftype->color(FL_BACKGROUND_COLOR);
            simplesysefftype->selection_color(FL_SELECTION_COLOR);
            simplesysefftype->labeltype(FL_NORMAL_LABEL);
            simplesysefftype->labelfont(0);
            simplesysefftype->labelsize(10);
            simplesysefftype->labelcolor(FL_FOREGROUND_COLOR);
            simplesysefftype->callback((Fl_Callback*)cb_simplesysefftype);
            simplesysefftype->align(Fl_Align(FL_ALIGN_TOP_LEFT));
            simplesysefftype->when(FL_WHEN_RELEASE);
            simplesysefftype->menu(menu_simplesysefftype);
            o->init("sysefx"+to_s(nsyseff)+"/efftype");
          } // Fl_Osc_Choice* simplesysefftype
          { simplesyseffectuigroup = new Fl_Osc_Group(350, 95, 235, 95);
            simplesyseffectuigroup->box(FL_NO_BOX);
            simplesyseffectuigroup->color((Fl_Color)48);
            simplesyseffectuigroup->selection_color(FL_BACKGROUND_COLOR);
            simplesyseffectuigroup->labeltype(FL_NORMAL_LABEL);
            simplesyseffectuigroup->labelfont(0);
            simplesyseffectuigroup->labelsize(14);
            simplesyseffectuigroup->labelcolor(FL_FOREGROUND_COLOR);
            simplesyseffectuigroup->align(Fl_Align(FL_ALIGN_TOP));
            simplesyseffectuigroup->when(FL_WHEN_RELEASE);
            { new Fl_Box(350, 95, 0, 0);
              simplesyseffectuigroup->ext = "sysefx0/";
            } // Fl_Box* o
            { SimpleEffUI* o = simplesyseffectui = new SimpleEffUI(350, 95, 234, 95);
              simplesyseffectui->box(FL_NO_BOX);
              simplesyseffectui->color(FL_BACKGROUND_COLOR);
              simplesyseffectui->selection_color(FL_BACKGROUND_COLOR);
              simplesyseffectui->labeltype(FL_NORMAL_LABEL);
              simplesyseffectui->labelfont(0);
              simplesyseffectui->labelsize(14);
              simplesyseffectui->labelcolor(FL_FOREGROUND_COLOR);
              simplesyseffectui->align(Fl_Align(FL_ALIGN_TOP));
              simplesyseffectui->when(FL_WHEN_RELEASE);
              o->init(false);
              o->refresh();
              simplesyseffectui->end();
            } // SimpleEffUI* simplesyseffectui
            simplesyseffectuigroup->end();
          } // Fl_Osc_Group* simplesyseffectuigroup
          { Fl_Button* o = new Fl_Button(435, 75, 75, 20, "Send to...");
            o->box(FL_THIN_UP_BOX);
            o->labelfont(1);
            o->labelsize(11);
            o->callback((Fl_Callback*)cb_Send1);
          } // Fl_Button* o
          { Fl_Button* o = new Fl_Button(560, 65, 25, 15, "P");
            o->box(FL_THIN_UP_BOX);
            o->color((Fl_Color)179);
            o->labelfont(1);
            o->labelsize(11);
            o->labelcolor((Fl_Color)55);
            o->callback((Fl_Callback*)cb_P2);
          } // Fl_Button* o
          o->end();
        } // Fl_Group* o
        { Fl_Group* o = new Fl_Group(345, 55, 245, 155, "Insertion Effects");
          o->box(FL_UP_FRAME);
          o->labelfont(1);
          o->labelsize(12);
          o->align(Fl_Align(FL_ALIGN_BOTTOM|FL_ALIGN_INSIDE));
          o->hide();
          { Fl_Counter* o = simpleinseffnocounter = new Fl_Counter(350, 75, 80, 20, "Ins.Effect No.");
            simpleinseffnocounter->type(1);
            simpleinseffnocounter->labelfont(1);
            simpleinseffnocounter->labelsize(10);
            simpleinseffnocounter->minimum(0);
            simpleinseffnocounter->maximum(127);
            simpleinseffnocounter->step(1);
            simpleinseffnocounter->value(1);
            simpleinseffnocounter->textfont(1);
            simpleinseffnocounter->callback((Fl_Callback*)cb_simpleinseffnocounter);
            simpleinseffnocounter->align(Fl_Align(FL_ALIGN_TOP));
            o->bounds(1,NUM_INS_EFX);
            o->value(ninseff+1);
          } // Fl_Counter* simpleinseffnocounter
          { Fl_Osc_Choice* o = simpleinsefftype = new Fl_Osc_Choice(515, 80, 70, 15, "EffType");
            simpleinsefftype->box(FL_UP_BOX);
            simpleinsefftype->down_box(FL_BORDER_BOX);
            simpleinsefftype->color(FL_BACKGROUND_COLOR);
            simpleinsefftype->selection_color(FL_SELECTION_COLOR);
            simpleinsefftype->labeltype(FL_NORMAL_LABEL);
            simpleinsefftype->labelfont(0);
            simpleinsefftype->labelsize(10);
            simpleinsefftype->labelcolor(FL_FOREGROUND_COLOR);
            simpleinsefftype->callback((Fl_Callback*)cb_simpleinsefftype);
            simpleinsefftype->align(Fl_Align(FL_ALIGN_TOP_LEFT));
            simpleinsefftype->when(FL_WHEN_RELEASE);
            simpleinsefftype->menu(menu_simpleinsefftype);
            /*o->value(master->insefx[ninseff]->geteffect());*/
            /*if (master->Pinsparts[ninseff]== -1) o->deactivate();*/
            o->init("insefx"+to_s(ninseff)+"/efftype");
          } // Fl_Osc_Choice* simpleinsefftype
          { simpleinseffectuigroup = new Fl_Osc_Group(350, 95, 234, 95);
            simpleinseffectuigroup->box(FL_FLAT_BOX);
            simpleinseffectuigroup->color((Fl_Color)48);
            simpleinseffectuigroup->selection_color(FL_BACKGROUND_COLOR);
            simpleinseffectuigroup->labeltype(FL_NORMAL_LABEL);
            simpleinseffectuigroup->labelfont(0);
            simpleinseffectuigroup->labelsize(14);
            simpleinseffectuigroup->labelcolor(FL_FOREGROUND_COLOR);
            simpleinseffectuigroup->align(Fl_Align(FL_ALIGN_TOP));
            simpleinseffectuigroup->when(FL_WHEN_RELEASE);
            { new Fl_Box(350, 95, 0, 0);
              simpleinseffectuigroup->ext = "insefx0/";
            } // Fl_Box* o
            { SimpleEffUI* o = simpleinseffectui = new SimpleEffUI(350, 95, 234, 95);
              simpleinseffectui->box(FL_NO_BOX);
              simpleinseffectui->color(FL_BACKGROUND_COLOR);
              simpleinseffectui->selection_color(FL_BACKGROUND_COLOR);
              simpleinseffectui->labeltype(FL_NORMAL_LABEL);
              simpleinseffectui->labelfont(0);
              simpleinseffectui->labelsize(14);
              simpleinseffectui->labelcolor(FL_FOREGROUND_COLOR);
              simpleinseffectui->align(Fl_Align(FL_ALIGN_TOP));
              simpleinseffectui->when(FL_WHEN_RELEASE);
              o->init(true);
              simpleinseffectui->end();
            } // SimpleEffUI* simpleinseffectui
            simpleinseffectuigroup->end();
          } // Fl_Osc_Group* simpleinseffectuigroup
          { Fl_Choice* o = simpleinseffpart = new Fl_Choice(435, 75, 80, 20, "Insert To.");
            simpleinseffpart->down_box(FL_BORDER_BOX);
            simpleinseffpart->labelfont(1);
            simpleinseffpart->labelsize(10);
            simpleinseffpart->textsize(10);
            simpleinseffpart->callback((Fl_Callback*)cb_simpleinseffpart);
            simpleinseffpart->align(Fl_Align(FL_ALIGN_TOP_LEFT));
            o->add("Master Out");o->add("Off");
            char tmp[50]; for (int i=0;i<NUM_MIDI_PARTS;i++) {sprintf(tmp,"Part %2d",i+1);o->add(tmp);};
            /*o->value(master->Pinsparts[ninseff]+2);*/
          } // Fl_Choice* simpleinseffpart
          { Fl_Button* o = new Fl_Button(560, 65, 25, 15, "P");
            o->box(FL_THIN_UP_BOX);
            o->color((Fl_Color)179);
            o->labelfont(1);
            o->labelsize(11);
            o->labelcolor((Fl_Color)55);
            o->callback((Fl_Callback*)cb_P3);
          } // Fl_Button* o
          o->end();
        } // Fl_Group* o
        o->end();
      } // Fl_Tabs* o
      o->end();
    } // Fl_Group* o
    { Fl_Group* o = new Fl_Group(5, 300, 590, 30);
      o->box(FL_ENGRAVED_FRAME);
      { VuMasterMeter* o = simplemastervu = new VuMasterMeter(5, 300, 590, 30, "VU-Meter");
        simplemastervu->box(FL_FLAT_BOX);
        simplemastervu->color((Fl_Color)41);
        simplemastervu->selection_color((Fl_Color)75);
        simplemastervu->labeltype(FL_NORMAL_LABEL);
        simplemastervu->labelfont(0);
        simplemastervu->labelsize(14);
        simplemastervu->labelcolor(FL_FOREGROUND_COLOR);
        simplemastervu->align(Fl_Align(FL_ALIGN_CENTER));
        simplemastervu->when(FL_WHEN_RELEASE);
        o->init(osc);
      } // VuMasterMeter* simplemastervu
      o->end();
    } // Fl_Group* o
    { Fl_Osc_Dial* o = simplemastervolumedial = new Fl_Osc_Dial(10, 35, 40, 40, "Master Volume");
      simplemastervolumedial->tooltip("Master Volume");
      simplemastervolumedial->box(FL_ROUND_UP_BOX);
      simplemastervolumedial->color(FL_BACKGROUND_COLOR);
      simplemastervolumedial->selection_color(FL_INACTIVE_COLOR);
      simplemastervolumedial->labeltype(FL_NORMAL_LABEL);
      simplemastervolumedial->labelfont(1);
      simplemastervolumedial->labelsize(11);
      simplemastervolumedial->labelcolor(FL_FOREGROUND_COLOR);
      simplemastervolumedial->maximum(127);
      simplemastervolumedial->step(1);
      simplemastervolumedial->align(Fl_Align(130));
      simplemastervolumedial->when(FL_WHEN_CHANGED);
      o->init("Pvolume");o->reset_value=80;
    } // Fl_Osc_Dial* simplemastervolumedial
    { Fl_Osc_Counter* o = simplemasterkeyshiftcounter = new Fl_Osc_Counter(15, 110, 90, 20, "Master KeyShift");
      simplemasterkeyshiftcounter->box(FL_UP_BOX);
      simplemasterkeyshiftcounter->color(FL_BACKGROUND_COLOR);
      simplemasterkeyshiftcounter->selection_color(FL_INACTIVE_COLOR);
      simplemasterkeyshiftcounter->labeltype(FL_NORMAL_LABEL);
      simplemasterkeyshiftcounter->labelfont(0);
      simplemasterkeyshiftcounter->labelsize(11);
      simplemasterkeyshiftcounter->labelcolor(FL_FOREGROUND_COLOR);
      simplemasterkeyshiftcounter->minimum(-64);
      simplemasterkeyshiftcounter->maximum(64);
      simplemasterkeyshiftcounter->step(1);
      simplemasterkeyshiftcounter->align(Fl_Align(FL_ALIGN_BOTTOM));
      simplemasterkeyshiftcounter->when(FL_WHEN_CHANGED);
      o->lstep(12);
      o->init("Pkeyshift",'i',-64);
    } // Fl_Osc_Counter* simplemasterkeyshiftcounter
    { Fl_Osc_Button* o = new Fl_Osc_Button(5, 149, 115, 31, "Stop ALL sounds!");
      o->box(FL_UP_BOX);
      o->color((Fl_Color)90);
      o->selection_color(FL_BACKGROUND_COLOR);
      o->labeltype(FL_NORMAL_LABEL);
      o->labelfont(1);
      o->labelsize(10);
      o->labelcolor(FL_FOREGROUND_COLOR);
      o->callback((Fl_Callback*)cb_Stop);
      o->align(Fl_Align(FL_ALIGN_CENTER));
      o->when(FL_WHEN_RELEASE);
    } // Fl_Osc_Button* o
    { Fl_Button* o = new Fl_Button(70, 30, 50, 17, "Reset");
      o->tooltip("Master fine detune reset");
      o->box(FL_THIN_UP_BOX);
      o->labelsize(11);
      o->callback((Fl_Callback*)cb_Reset1);
      o->align(Fl_Align(FL_ALIGN_WRAP));
    } // Fl_Button* o
    { Fl_Osc_Dial* o = simpleglobalfinedetuneslider = new Fl_Osc_Dial(80, 50, 30, 30, "Fine Detune");
      simpleglobalfinedetuneslider->tooltip("global fine detune");
      simpleglobalfinedetuneslider->box(FL_ROUND_UP_BOX);
      simpleglobalfinedetuneslider->color(FL_BACKGROUND_COLOR);
      simpleglobalfinedetuneslider->selection_color(FL_INACTIVE_COLOR);
      simpleglobalfinedetuneslider->labeltype(FL_NORMAL_LABEL);
      simpleglobalfinedetuneslider->labelfont(0);
      simpleglobalfinedetuneslider->labelsize(11);
      simpleglobalfinedetuneslider->labelcolor(FL_FOREGROUND_COLOR);
      simpleglobalfinedetuneslider->maximum(127);
      simpleglobalfinedetuneslider->step(1);
      simpleglobalfinedetuneslider->value(64);
      simpleglobalfinedetuneslider->align(Fl_Align(130));
      simpleglobalfinedetuneslider->when(FL_WHEN_CHANGED);
      o->init("microtonal/Pglobalfinedetune");o->reset_value=64;
    } // Fl_Osc_Dial* simpleglobalfinedetuneslider
    { Fl_Counter* o = simplenpartcounter = new Fl_Counter(170, 40, 70, 20, "Part");
      simplenpartcounter->tooltip("The part number");
      simplenpartcounter->type(1);
      simplenpartcounter->labelfont(1);
      simplenpartcounter->minimum(0);
      simplenpartcounter->maximum(127);
      simplenpartcounter->step(1);
      simplenpartcounter->value(1);
      simplenpartcounter->textfont(1);
      simplenpartcounter->callback((Fl_Callback*)cb_simplenpartcounter);
      simplenpartcounter->align(Fl_Align(FL_ALIGN_LEFT));
      o->bounds(1,NUM_MIDI_PARTS);
    } // Fl_Counter* simplenpartcounter
    { Fl_Counter* o = new Fl_Counter(5, 190, 55, 20, "Keyb.Oct.");
      o->tooltip("Midi Octave");
      o->type(1);
      o->labelsize(11);
      o->minimum(0);
      o->maximum(5);
      o->step(1);
      o->textfont(1);
      o->textsize(11);
      o->callback((Fl_Callback*)cb_Keyb);
      o->align(Fl_Align(FL_ALIGN_RIGHT));
      o->when(FL_WHEN_RELEASE_ALWAYS);
      o->value(virkeys->midioct);
    } // Fl_Counter* o
    { sm_indicator2 = new Fl_Button(560, 5, 35, 15, "SM");
      sm_indicator2->box(FL_ROUNDED_BOX);
      sm_indicator2->down_box(FL_ROUNDED_BOX);
      sm_indicator2->color(FL_DARK2);
      sm_indicator2->selection_color((Fl_Color)93);
      sm_indicator2->labelfont(3);
      sm_indicator2->labelcolor(FL_DARK3);
      sm_indicator2->deactivate();
    } // Fl_Button* sm_indicator2
    simplemasterwindow->end();
  } // Fl_Osc_Window* simplemasterwindow
  { selectuiwindow = new Fl_Osc_Window(430, 250, "User Interface mode");
    selectuiwindow->box(FL_FLAT_BOX);
    selectuiwindow->color(FL_BACKGROUND_COLOR);
    selectuiwindow->selection_color(FL_BACKGROUND_COLOR);
    selectuiwindow->labeltype(FL_NO_LABEL);
    selectuiwindow->labelfont(0);
    selectuiwindow->labelsize(14);
    selectuiwindow->labelcolor(FL_FOREGROUND_COLOR);
    selectuiwindow->callback((Fl_Callback*)cb_selectuiwindow, (void*)(this));
    selectuiwindow->align(Fl_Align(FL_ALIGN_TOP));
    selectuiwindow->when(FL_WHEN_RELEASE);
    { Fl_Box* o = new Fl_Box(5, 5, 425, 40, "Welcome to ZynAddSubFX");
      o->labeltype(FL_SHADOW_LABEL);
      o->labelfont(1);
      o->labelsize(26);
    } // Fl_Box* o
    { Fl_Box* o = new Fl_Box(10, 50, 265, 25, "Please choose the interface mode:");
      o->labelfont(1);
      o->labelsize(13);
    } // Fl_Box* o
    { Fl_Button* o = new Fl_Button(10, 165, 100, 35, "Advanced");
      o->color((Fl_Color)229);
      o->labelfont(1);
      o->labelsize(16);
      o->callback((Fl_Callback*)cb_Advanced);
    } // Fl_Button* o
    { Fl_Box* o = new Fl_Box(110, 165, 310, 35, ".. if you have used ZynAddSubFX before, or you like to have full control to a\
ll parameters.");
      o->labelfont(1);
      o->labelsize(11);
      o->align(Fl_Align(FL_ALIGN_WRAP|FL_ALIGN_INSIDE));
    } // Fl_Box* o
    { Fl_Button* o = new Fl_Button(10, 80, 100, 65, "Beginner");
      o->color((Fl_Color)238);
      o->labelfont(1);
      o->labelsize(16);
      o->callback((Fl_Callback*)cb_Beginner);
    } // Fl_Button* o
    { Fl_Box* o = new Fl_Box(110, 75, 320, 75, "..if you are a beginner, you prefer using presets or you prefer to use simple\
r user interfaces. Most functionality of ZynAddSubFX will be hidden in this mo\
de to make simple the learning/using it.");
      o->labelfont(1);
      o->labelsize(11);
      o->align(Fl_Align(FL_ALIGN_WRAP|FL_ALIGN_INSIDE));
    } // Fl_Box* o
    { Fl_Box* o = new Fl_Box(30, 215, 360, 25, "You can switch the interface modes anytime you want.");
      o->box(FL_BORDER_BOX);
      o->color((Fl_Color)51);
      o->labelfont(1);
      o->labelsize(11);
      o->align(Fl_Align(FL_ALIGN_WRAP|FL_ALIGN_INSIDE));
    } // Fl_Box* o
    selectuiwindow->set_non_modal();
    selectuiwindow->end();
  } // Fl_Osc_Window* selectuiwindow
  return selectuiwindow;
}

void MasterUI::updatesendwindow() {
  /*for (int neff1=0;neff1<NUM_SYS_EFX;neff1++) 
    for (int neff2=neff1+1;neff2<NUM_SYS_EFX;neff2++)
      syseffsend[neff1][neff2]->value(master->Psysefxsend[neff1][neff2]);*/
}

void MasterUI::updatepanel() {
  for (int npart=0;npart<NUM_MIDI_PARTS;npart++){
    panellistitem[npart]->refresh();
  };
}

void MasterUI::setfilelabel(const char *filename) {
  if (filename!=NULL) snprintf(&masterwindowlabel[0],100,"%s - ZynAddSubFX",fl_filename_name(filename));
    else snprintf(&masterwindowlabel[0],100,"%s","ZynAddSubFX");
  masterwindowlabel[99]='\0';
  masterwindow->label(&masterwindowlabel[0]);
  simplemasterwindow->label(&masterwindowlabel[0]);
  masterwindow->update_title();
  simplemasterwindow->update_title();
}

MasterUI::MasterUI(int *exitprogram_, class Fl_Osc_Interface *osc_):nioui(osc_) {
  exitprogram=exitprogram_;
  osc=osc_;
  ninseff=0;
  nsyseff=0;
  npart=0;
  last_loaded[0]=0;
  loading_next[0]=0;
  last_xmz = new Osc_DataModel(osc);
  last_xmz->callback = [this](std::string filestr) {
      const char *filename = filestr.c_str();
      if (filename[0] != 0)
         strncpy(last_loaded, filename, XMZ_PATH_MAX);
      else if (loading_next[0] != 0) {
         strncpy(last_loaded, loading_next, XMZ_PATH_MAX);
         loading_next[0] = 0;
      } else
         last_loaded[0] = 0;
      last_loaded[XMZ_PATH_MAX - 1] = 0;
      char *label = NULL;
      if(last_loaded[0] != 0) {
          label = strrchr(last_loaded, '/');
          if(label && *label)
              label = label+1;
          else
              label = last_loaded;
      }
  
      setfilelabel(label);
  };
  last_xmz->doUpdate("/last_xmz");
  
  for (int i=0;i<NUM_SYS_EFX;i++)
     for (int j=0;j<NUM_SYS_EFX;j++)
       syseffsend[i][j]=NULL;
  
  microtonalui=new MicrotonalUI(osc, "/microtonal/");
  virkeyboard=new VirKeyboard(osc, "/");
  bankui=new BankUI(&npart, osc);
  configui=new ConfigUI(osc);
  
  make_window();
  fl_open_display();
  
  #if !defined(PLUGINVERSION) && HAS_X11
  Pixmap p, mask;
  XCreatePixmapFromData(fl_display, DefaultRootWindow(fl_display),
                                   (char**)zynaddsubfx_xpm, &p, &mask, NULL);
  masterwindow->icon((char *)p);
  #endif
  assert(osc);
  presetsui=new PresetsUI(osc);
  setfilelabel(NULL);
  swapefftype=0;
  simplerefresh();
}

MasterUI::~MasterUI() {
  masterwindow->hide();
  delete masterwindow;
  simplemasterwindow->hide();
  delete simplemasterwindow;
  aboutwindow->hide();
  delete aboutwindow;
  syseffsendwindow->hide();
  delete syseffsendwindow;
  
  delete virkeyboard;
  delete microtonalui;
  delete bankui;
  delete configui;
  
  delete presetsui;
  delete panelwindow;
  delete selectuiwindow;
}

void MasterUI::showUI(int UIMode) {
  switch (UIMode){
  	case 0:selectuiwindow->show();
  	break;
  	case 1:masterwindow->show();
  	break;
  	case 2:simplemasterwindow->show();
  	break;
  };
}

void MasterUI::simplerefresh() {
  /*
       if (master->part[npart]->Pname[0]!=0) partname->label((char *)master->part[npart]->Pname);
       else partname->label("Click here to load a instrument");
       */
  
  simplelistitemgroup->redraw();
}

void MasterUI::do_new_master_unconditional() {
  delete microtonalui;
  microtonalui=new MicrotonalUI(osc, "/microtonal/");
  
      osc->write("/reset_master");
         osc->write("/last_xmz");
         npartcounter->value(1);
         refresh_master_ui();
         updatepanel();
}

void MasterUI::do_new_master() {
  if (fl_choice("Clear *ALL* the parameters ?","No","Yes",NULL)){
           do_new_master_unconditional();
           }
}

int MasterUI::do_revert_changes_unconditional() {
  strncpy(loading_next, last_loaded, XMZ_PATH_MAX);
      osc->write("/load_xmz", "s", last_loaded);
      osc->write("/last_xmz");
      refresh_master_ui();
      updatepanel();
  
  return 1;
}

void MasterUI::do_revert_changes() {
  if (last_loaded[0] == 0)
           do_new_master();
           else
           if (fl_choice("Revert *ALL* the parameters ?","No","Yes",NULL)){
           do_revert_changes_unconditional();
           }
}

int MasterUI::do_load_master_unconditional(const char *filename, const char *display_name) {
  strncpy(loading_next, filename, XMZ_PATH_MAX);
      osc->write("/load_xmz", "s", filename);
      osc->write("/last_xmz");
      refresh_master_ui();
      updatepanel();
  
      setfilelabel(display_name);
      
      return 1;
}

void MasterUI::do_load_master(const char* file ) {
  const char *filename;
    if (file == NULL) {
      filename=fl_file_chooser("Open:","({*.xmz})",NULL,0);
      if (filename==NULL) return;
    }
    else {
      filename = file;
    }
  
    int result = do_load_master_unconditional( filename, filename );
  
  if (result==-10) fl_alert("Error: Could not load the file\nbecause it is not a zynaddsubfx parameters file.");
        else if (result<0) fl_alert("Error: Could not load the file.");
}

void MasterUI::do_save_master(const char* file ) {
  const char *filename;
  char *tmp;
    int result=0;
    if (file == NULL) {
      tmp=fl_file_chooser("Save:","({*.xmz})",NULL,0);
      if (tmp==NULL) return;
      tmp=fl_filename_setext(tmp,".xmz");
      filename=tmp;
      result=fileexists(tmp);
      if (result) {
        result=0;
        if (!fl_choice("The file exists. Overwrite it?","No","Yes",NULL)) return;
        
      }
    }
    else {
      filename = file;
    }
  
  
      osc->write("/save_xmz", "s", filename);
  if (result<0) fl_alert("Error: Could not save the file.");
  	else
  {
      osc->write("/last_xmz", "s", filename);
  #if USE_NSM
          if ( nsm && nsm->is_active() )
               setfilelabel( nsm->display_name );
          else
  #endif
               setfilelabel(filename);
  }
  updatepanel();
}

void MasterUI::refresh_master_ui() {
  ninseff=0;
  nsyseff=0;
  npart=0;
  
  //the Master UI
  npartcounter->do_callback();
  syseffnocounter->do_callback();
  inseffnocounter->do_callback();
  delete microtonalui;
  microtonalui=new MicrotonalUI(osc, "/microtonal/");
  updatesendwindow();
  updatepanel();
  
  //the simle MasterUI
  simplenpartcounter->value(1);
  simplesyseffnocounter->value(1);
  simpleinseffnocounter->value(1);
  simplenpartcounter->do_callback();
  simplesyseffnocounter->do_callback();
  simpleinseffnocounter->do_callback();
  
  simplerefresh();
  bankui->hide();
}

void MasterUI::close() {
  *exitprogram=1;
}
