// generated by Fast Light User Interface Designer (fluid) version 1.0300

#ifndef SUBnoteUI_h
#define SUBnoteUI_h
#include <FL/Fl.H>
#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include "../globals.h"
#include "Fl_Osc_VSlider.H"
#include "Fl_Osc_TSlider.H"
#include "Fl_Osc_Dial.H"
#include "EnvelopeUI.h"
#include "FilterUI.h"
#include "../Misc/Util.h"
#include "../Params/SUBnoteParameters.h"
#include "PresetsUI.h"

class SUBSlider : public Fl_Osc_TSlider {
public:
  SUBSlider(int x,int y, int w, int h, const char *label=0)
  ;
  void OSC_value(char c);
  void cb(void);
};
#include <FL/Fl_Box.H>

class SUBnoteharmonic : public Fl_Osc_Group {
  Fl_Osc_Group* make_window();
public:
  Fl_Osc_Group *harmonic;
  SUBSlider *mag;
  SUBSlider *bw;
  SUBnoteharmonic(int x,int y, int w, int h, const char *label=0);
  void init(int n_);
  void refresh();
  ~SUBnoteharmonic();
private:
  int n; 
};
#include <FL/Fl_Scroll.H>
#include <FL/Fl_Pack.H>
#include <FL/Fl_Button.H>
#include <FL/Fl_Group.H>

class SUBnoteUI : public PresetsUI_ {
public:
  Fl_Osc_Window* make_window();
  Fl_Osc_Window *SUBparameters;
  Fl_Pack *harmonics;
private:
  void cb_Close_i(Fl_Button*, void*);
  static void cb_Close(Fl_Button*, void*);
public:
  Fl_Osc_VSlider *vol;
  Fl_Osc_VSlider *vsns;
  Fl_Osc_Dial *pan;
  EnvelopeUI *ampenv;
  Fl_Osc_Counter *filterstages;
  Fl_Osc_Choice *magtype;
  static Fl_Menu_Item menu_magtype[];
  Fl_Osc_Choice *start;
  static Fl_Menu_Item menu_start[];
  Fl_Group *freqsettingsui;
  EnvelopeUI *freqenvelopegroup;
  Fl_Osc_Check *freqee;
private:
  void cb_freqee_i(Fl_Osc_Check*, void*);
  static void cb_freqee(Fl_Osc_Check*, void*);
public:
  Fl_Osc_Counter *octave;
  Fl_Osc_Counter *coarsedet;
  Fl_Osc_Slider *detune;
private:
  void cb_detune_i(Fl_Osc_Slider*, void*);
  static void cb_detune(Fl_Osc_Slider*, void*);
public:
  Fl_Osc_Output *detunevalueoutput;
  Fl_Osc_Dial *bendadjdial;
  Fl_Osc_Dial *offsethzdial;
  Fl_Osc_Check *hz440;
private:
  void cb_hz440_i(Fl_Osc_Check*, void*);
  static void cb_hz440(Fl_Osc_Check*, void*);
public:
  Fl_Osc_Dial *fixedfreqetdial;
  Fl_Osc_Choice *detunetype;
private:
  void cb_detunetype_i(Fl_Osc_Choice*, void*);
  static void cb_detunetype(Fl_Osc_Choice*, void*);
public:
  Fl_Osc_Check *stereo;
private:
  void cb_Clear_i(Fl_Osc_Button*, void*);
  static void cb_Clear(Fl_Osc_Button*, void*);
public:
  Fl_Group *bandwidthsettingsui;
  EnvelopeUI *bandwidthenvelopegroup;
  Fl_Osc_Check *bwee;
private:
  void cb_bwee_i(Fl_Osc_Check*, void*);
  static void cb_bwee(Fl_Osc_Check*, void*);
public:
  Fl_Osc_VSlider *bandwidth;
  Fl_Osc_TSlider *bwidthscale;
  Fl_Group *globalfiltergroup;
  EnvelopeUI *filterenv;
  FilterUI *filterui;
  Fl_Osc_Check *filtere;
private:
  void cb_filtere_i(Fl_Osc_Check*, void*);
  static void cb_filtere(Fl_Osc_Check*, void*);
  void cb_C_i(Fl_Button*, void*);
  static void cb_C(Fl_Button*, void*);
  void cb_P_i(Fl_Button*, void*);
  static void cb_P(Fl_Button*, void*);
public:
  Fl_Osc_Choice *spreadtype;
  static Fl_Menu_Item menu_spreadtype[];
  Fl_Osc_Dial *spreadpar1;
  Fl_Osc_Dial *spreadpar2;
  Fl_Osc_Dial *spreadpar3;
  void refresh();
  SUBnoteUI(Fl_Osc_Interface *osc_, std::string loc_);
  ~SUBnoteUI();
private:
  Fl_Osc_Interface *osc; 
  std::string loc; 
  SUBnoteharmonic *h[MAX_SUB_HARMONICS]; 
};
#endif
